// Copyright (c) 2017 Trail of Bits, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

/* Examples can be found in test directory.
  Hard part is finding all the references. Forgetting some, or adding
  some extra is often hard to notice as it could be located in some
  not often executed code.

  For externals, relocations must be calculated. Instead of ea of thunk
  some new address is invented (not in original binary). This new address
  is then written in .got & .got.plt using information about relocations.
  This step is not required, lifted code that is not position independent can
  work with external having addresses from thunks, but this is not guaranteed.
*/


package mcsema;

// A cross-reference contained within an instruction.
// Similar to reference from Segment
message CodeReference {
  enum TargetType {
    // Examples: callq  8c0 <_ZN1AC2EPKc>
    CodeTarget = 0;
    // Example: lea  0x20094a(%rip),%rdi  # 201049 <global>
    DataTarget = 1;
  }

  enum OperandType {
    // Example: mov    $0x617400,%r8d
    ImmediateOperand = 0;

    // Absolute and PC-relative accesses.
    // Example: movzwl 0x2151b9(%rip),%edx  # 617800 <stderr@@GLIBC_2.2.5+0x10>
    MemoryOperand = 1;

    // Example: jmpq   *0x413d20(,%rcx,8)
    MemoryDisplacementOperand = 2;

    // E.g. Function call target.
    // Example: callq  406000 <__sprintf_chk@plt+0x4250>
    ControlFlowOperand = 3;

    // For a jump table. Big enough switch statements get converted to jump
    // table. It may be hard to find this, requiring some heuristics
    OffsetTable = 4;
  }

  enum Location {
    Internal = 0;
    // Is it to external symbol?
    External = 1;
  }

  required  TargetType  target_type = 1;
  required  OperandType operand_type = 2;
  required  Location    location = 3;
  required  int64       ea = 4;

  // For aarch64, since instruction are 32-bit and there may be the need to
  // build up 64-bit address
  optional  int64       mask = 5;
  optional  string      name = 6;
}

// An instruction inside of a block.
message Instruction {
  required  int64           ea = 1;
  required  bytes           bytes = 2;
  repeated  CodeReference   xrefs = 3;
  optional  bool            local_noreturn = 4;

  // Address of the landing pad
  optional  uint64          lp_ea = 5;
}

// A basic block of instructions inside of a function.
message Block {
  required  int64       ea = 1;
  repeated  Instruction instructions = 2;
  repeated  int64       successor_eas = 3;
}

// A function with an implementation inside of the binary.
message Function {
  required  int64       ea = 1;
  repeated  Block       blocks = 2;

  // Can someone else link against the code and use this function?
  required  bool        is_entrypoint = 3;
  optional  string      name = 4;
  repeated  StackVariable      stack_vars = 5;
  repeated  ExceptionFrame     eh_frame = 6;
}

/* A function that is used or referenced within binary, but not implemented
  within the binary. Classical example would be printf, or other functions from
  standard library.
  Some information about externals can be found in tools/mcsema_disass/{USED_OS}.txt
  If function is later supplied via --abi_libraries attributes get rewritten
  using this more precise information
*/
message ExternalFunction {
  enum CallingConvention {
    CallerCleanup = 0;
    CalleeCleanup = 1;
    FastCall = 2;
  }

  required  string            name = 1;
  // Address of relocation. Other entry with ea of thunk can be added as well
  required  int64             ea = 2;

  required  CallingConvention cc = 3;
  // Does this function return?
  required  bool              has_return = 4;
  required  bool              no_return = 5;
  required  int32             argument_count = 6;
  // Linkage information
  required  bool              is_weak = 7;
  optional  string            signature = 8;
}

// A named symbol defined outside of the binary. For example, `stderr`.
message ExternalVariable {
  required  string      name = 1;
  // E.g. address of the relocation in the binary.
  required  int64       ea = 2;
  required  int32       size = 3;
  required  bool        is_weak = 4;
  required  bool        is_thread_local = 5;
}

/* A cross-reference contained within a data segment. This represents some
  code- or data-reference embedded within the data segment.
  for example piece of .data:

  0x00400f80: 800c4000 00000000 e00c4000 00000000 ..@.......@.....

  There are 2 references: at 0x400f80 targeting 400c80 which is in .text
                          at 0x400f88 targeting 400ce0 which is in .text
  Both of them are actually function pointers. This can be a hint where
  does functions start in stripped binary

  McSema needs this information so that address of lifted symbol can be
  inserted there instead of old value, which had meaning only in original
  binary.
*/
message DataReference {
  enum TargetFixupKind {
    Absolute = 0;
    OffsetFromThreadBase = 1;
  };

  // Location of the cross-reference.
  required  int64               ea = 1;

  // How many bytes wide is this cross-reference? Not to be confused with the
  // size of the data to which this reference points.
  // This will often be size of pointer
  required  int32               width = 2;

  // Information about the target of the cross-reference.
  required  int64               target_ea = 4;
  required  string              target_name = 5;
  required  bool                target_is_code = 6;

  required  TargetFixupKind     target_fixup_kind = 8;
}

/* Represents a named location within a data segment. Variables will often
  be the targets of cross-references, either within other parts of the
  data segments, or from code.
  Actual data in segment if they can be isolated
  For example

  Hex dump of section '.rodata':
  0x000009c0: 01000200 476c6f62 616c0056 61726961 ....Global.Varia
  0x000009d0: 626c6520 6e616d65 2025730a 00636c61 ble name %s..cla

  At 0x9c4 beginning of variable can be seen
*/
message Variable {
  required  int64       ea = 1;
  required  string      name = 2;
}

message Reference {
  required  uint64   inst_ea = 1;
  required  int64    offset = 2;
}

message ExceptionFrame {

  enum Action {
    Cleanup = 0;
    Catch = 1;
  }

  required uint64     func_ea = 1;
  required uint64     start_ea = 3;
  required uint64     end_ea = 4;
  required uint64     lp_ea = 5;
  required Action     action = 6;
  repeated ExternalVariable ttype = 7;
}

// This is optional information, but leads to better lift
message StackVariable {
  required string     name = 1;
  required uint64     size = 2;
  required int64      sp_offset = 3;
  optional bool       has_frame = 4;
  optional string     reg_name = 5;
  repeated Reference  ref_eas = 6;
}

// Global variable from original binary
message GlobalVariable {
  required int64      ea = 1;
  required string     name = 2;
  required int64      size = 3;
}

// The data section is a verbatim copy of all the data in a given segment. This
// copy will be "instantiated" into the LLVM module as a packed struct, where
// the elements of the struct will be opaque sequences of bytes interspered
// with cross-reference pointers.
message Segment {
  // Start of the segment
  required  int64           ea = 1;

  // Verbatim copy of all data in the segment,
  // in case of offset tables after applying relocations!
  required  bytes           data = 2;
  required  bool            read_only = 3;
  required  bool            is_external = 4;

  required  string          name = 5;
  optional  string          variable_name = 6;
  required  bool            is_exported = 7;
  required  bool            is_thread_local = 8;

  // References to other data (their addresses) possibly in different segment
  repeated  DataReference   xrefs = 9;

  // Variables inside segment, often targets of references
  repeated  Variable        vars = 10;

}

// Root of the structure. Represents collection of all information about
// binary to be lifted.
message Module {
  required  string              name = 1;

  // Functions with implementation in binary
  repeated  Function            funcs = 2;

  // Sections of binary (.got, .data, .rodata, ...)
  repeated  Segment             segments = 3;

  // Possible source of these outside of binary itselfs
  // is in tools/mcsema_disass/defs/{USED_OS}.txt
  // Some of them may be supplied later via --abi_libraries
  repeated  ExternalFunction    external_funcs = 4;
  repeated  ExternalVariable    external_vars = 5;

  repeated  GlobalVariable      global_vars = 8;
}

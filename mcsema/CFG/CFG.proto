// Copyright (c) 2017 Trail of Bits, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package mcsema;

// A cross-reference contained within an instruction.
message CodeReference {
  enum TargetType {
    CodeTarget = 0;
    DataTarget = 1;
  }

  enum OperandType {
    ImmediateOperand = 0;
    MemoryOperand = 1;  // Absolute and PC-relative accesses.
    MemoryDisplacementOperand = 2;
    ControlFlowOperand = 3;  // E.g. Function call target.
    OffsetTable = 4;  // For a jump table.
  }

  enum Location {
    Internal = 0;
    External = 1;
  }

  required  TargetType  target_type = 1;
  required  OperandType operand_type = 2;
  required  Location    location = 3;
  required  int64       ea = 4;
  optional  int64       mask = 5;
  optional  string      name = 6;
}

// An instruction inside of a block.
message Instruction {
  required  int64           ea = 1;
  required  bytes           bytes = 2;
  repeated  CodeReference   xrefs = 3;
  optional  bool            local_noreturn = 4;
  optional  uint64          lp_ea = 5;     // Address of the landing pad
}

// A basic block of instructions inside of a function.
message Block {
  required  int64       ea = 1;
  repeated  Instruction instructions = 2;
  repeated  int64       successor_eas = 3;
}

// A function with an implementation inside of the binary.
message Function {
  required  int64       ea = 1;
  repeated  Block       blocks = 2;
  required  bool        is_entrypoint = 3;
  optional  string      name = 4;
  repeated  StackVariable	stack_vars = 5;
  repeated  ExceptionFrame     eh_frame = 6;
}

// A function that is used or referenced within binary, but not implemented
// within the binary.
message ExternalFunction {
  enum CallingConvention {
    CallerCleanup = 0;
    CalleeCleanup = 1;
    FastCall = 2;
  }

  required  string            name = 1;
  required  int64             ea = 2;  // E.g. address of the thunk in the binary.

  required  CallingConvention cc = 3;
  required  bool              has_return = 4;
  required  bool              no_return = 5;
  required  int32             argument_count = 6;
  required  bool              is_weak = 7;
  optional  string            signature = 8;
}

// A named symbol defined outside of the binary. For example, `stderr`.
message ExternalVariable {
  required  string      name = 1;
  required  int64       ea = 2;    // E.g. address of the relocation in the binary.
  required  int32       size = 3;
  required  bool        is_weak = 4;
  required  bool        is_thread_local = 5;
}

// A cross-reference contained within a data segment. This represents some
// code- or data-reference embedded within the data segment.
message DataReference {
 
  enum TargetFixupKind {
    Absolute = 0;
    OffsetFromThreadBase = 1;
  };

  // Location of the cross-reference.
  required  int64               ea = 1;

  // How many bytes wide is this cross-reference? Not to be confused with the
  // size of the data to which this reference points.
  required  int32               width = 2;

  // Information about the target of the cross-reference.
  required  int64               target_ea = 4;
  required  string              target_name = 5;
  required  bool                target_is_code = 6;
    
  required  TargetFixupKind     target_fixup_kind = 8;        
}

// Represents a named location within a data segment. Variables will often
// be the targets of cross-references, either within other parts of the
// data segments, or from code.
message Variable {
  required  int64       ea = 1;
  required  string      name = 2;
}

message Reference {
  required  uint64   inst_ea = 1;
  required  int64    offset = 2;
}

message ExceptionFrame {

  enum Action {
    Cleanup = 0;
    Catch = 1;
  }

  required uint64     func_ea = 1;
  required uint64     start_ea = 3;
  required uint64     end_ea = 4;
  required uint64     lp_ea = 5;
  required Action     action = 6;
}

message StackVariable {
  required string     name = 1;
  required uint64     size = 2;
  required int64      sp_offset = 3;
  optional bool       has_frame = 4;
  optional string     reg_name = 5;
  repeated Reference  ref_eas = 6;
}

message GlobalVariable {
  required int64      ea = 1;
  required string     name = 2;
  required int64      size = 3;
}

// The data section is a verbatim copy of all the data in a given segment. This
// copy will be "instantiated" into the LLVM module as a packed struct, where
// the elements of the struct will be opaque sequences of bytes interspered
// with cross-reference pointers.
message Segment {
  required  int64           ea = 1;
  required  bytes           data = 2;
  required  bool            read_only = 3;
  required  bool            is_external = 4;

  required  string          name = 5;
  optional  string          variable_name = 6;
  required  bool            is_exported = 7;
  required  bool            is_thread_local = 8;
  
  repeated  DataReference   xrefs = 9;
  repeated  Variable        vars = 10;

}

message Module {
  required  string              name = 1;

  repeated  Function            funcs = 2;
  repeated  Segment             segments = 3;

  repeated  ExternalFunction    external_funcs = 4;
  repeated  ExternalVariable    external_vars = 5;
  
  repeated  GlobalVariable      global_vars = 8;
}

!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABICallSpill	BC/Util.h	/^  ABICallSpill = (1 << 2),   \/\/ spill regs at function prolog$/;"	e	enum:StoreSpillType
ABICallStore	BC/Util.h	/^  ABICallStore = (1 << 1),   \/\/ store regs in preparation for CALL$/;"	e	enum:StoreSpillType
ABIRetSpill	BC/Util.h	/^  ABIRetSpill = (1 << 4)    \/\/ spill regs right after a RET$/;"	e	enum:StoreSpillType
ABIRetStore	BC/Util.h	/^  ABIRetStore = (1 << 3),   \/\/ Store regs in preparation for RET$/;"	e	enum:StoreSpillType
ADDR_NOREF	BC/Util.h	211;"	d
ADDR_NOREF_IMPL	Arch/X86/Util.h	/^static llvm::Value *ADDR_NOREF_IMPL(NativeModulePtr natM, llvm::BasicBlock *b,$/;"	f	signature:(NativeModulePtr natM, llvm::BasicBlock *b, int x, NativeInstPtr ip, const llvm::MCInst &inst)
ADDR_TO_POINTER	BC/Util.cpp	/^llvm::Value *ADDR_TO_POINTER($/;"	f	signature:( llvm::BasicBlock *b, llvm::Value *memAddr, int width)
ADDR_TO_POINTER	BC/Util.h	/^inline static llvm::Value *ADDR_TO_POINTER(llvm::BasicBlock *b,$/;"	f	signature:(llvm::BasicBlock *b, llvm::Value *memAddr)
ADDR_TO_POINTER	BC/Util.h	/^llvm::Value *ADDR_TO_POINTER(llvm::BasicBlock *b, llvm::Value *memAddr,$/;"	p	signature:(llvm::BasicBlock *b, llvm::Value *memAddr, int width)
ADDR_TO_POINTER_V	BC/Util.cpp	/^llvm::Value *ADDR_TO_POINTER_V(llvm::BasicBlock *b, llvm::Value *memAddr,$/;"	f	signature:(llvm::BasicBlock *b, llvm::Value *memAddr, llvm::Type *ptrType)
ADDR_TO_POINTER_V	BC/Util.h	/^llvm::Value *ADDR_TO_POINTER_V(llvm::BasicBlock *b, llvm::Value *memAddr,$/;"	p	signature:(llvm::BasicBlock *b, llvm::Value *memAddr, llvm::Type *ptrType)
ADD_populateDispatchMap	Arch/X86/Semantics/ADD.cpp	/^void ADD_populateDispatchMap(DispatchMap &m) {$/;"	f	signature:(DispatchMap &m)
ADD_populateDispatchMap	Arch/X86/Semantics/ADD.h	/^void ADD_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
ADDiu_populateDispatchMap	Arch/Mips/Semantics/ADDiu.cpp	/^void ADDiu_populateDispatchMap(DispatchMap &m)$/;"	f	signature:(DispatchMap &m)
ADDiu_populateDispatchMap	Arch/Mips/Semantics/ADDiu.h	/^void ADDiu_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
ADDu_populateDispatchMap	Arch/Mips/Semantics/ADDu.cpp	/^void ADDu_populateDispatchMap(DispatchMap &m)$/;"	f	signature:(DispatchMap &m)
ADDu_populateDispatchMap	Arch/Mips/Semantics/ADDu.h	/^void ADDu_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
AF_F	Arch/X86/Semantics/Jcc.cpp	203;"	d	file:
AF_F	Arch/X86/Semantics/Jcc.cpp	80;"	d	file:
AND	Arch/X86/Semantics/CMOV.cpp	/^static Value *AND(BasicBlock *b, Value *v1, Value *v2) {$/;"	f	file:	signature:(BasicBlock *b, Value *v1, Value *v2)
AND	Arch/X86/Semantics/Jcc.cpp	/^static llvm::Value *AND(llvm::BasicBlock *&b, llvm::Value *x, llvm::Value *y) {$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::Value *x, llvm::Value *y)
ASMText	CFG/CFG.h	/^  ASMText,$/;"	e	enum:ModuleInputFormat
AddPadding	Arch/Mips/Register.cpp	/^static void AddPadding(llvm::Type *type, int num_elements) {$/;"	f	namespace:__anon3	signature:(llvm::Type *type, int num_elements)
AddPadding	Arch/X86/Register.cpp	/^static void AddPadding(llvm::Type *type, int num_elements) {$/;"	f	namespace:__anon4	signature:(llvm::Type *type, int num_elements)
AddReg	Arch/Mips/Register.cpp	/^static void AddReg(MCSemaRegs reg, const char *name, llvm::Type *type) {$/;"	f	namespace:__anon3	signature:(MCSemaRegs reg, const char *name, llvm::Type *type)
AddReg	Arch/X86/Register.cpp	/^static void AddReg(MCSemaRegs reg, const char *name, llvm::Type *type) {$/;"	f	namespace:__anon4	signature:(MCSemaRegs reg, const char *name, llvm::Type *type)
AddRegStateTracer	BC/Lift.cpp	/^static void AddRegStateTracer(llvm::BasicBlock *B) {$/;"	f	file:	signature:(llvm::BasicBlock *B)
AddSubReg	Arch/Mips/Register.cpp	/^static void AddSubReg(MCSemaRegs reg, const char *name,$/;"	f	namespace:__anon3	signature:(MCSemaRegs reg, const char *name, llvm::Type *read_type, llvm::Type *write_type, size_t parent_offset)
AddSubReg	Arch/X86/Register.cpp	/^static void AddSubReg(MCSemaRegs reg, const char *name,$/;"	f	namespace:__anon4	signature:(MCSemaRegs reg, const char *name, llvm::Type *read_type, llvm::Type *write_type, size_t parent_offset)
AllRegs	BC/Util.h	/^  AllRegs = (1 << 0),   \/\/ store\/spill all regs$/;"	e	enum:StoreSpillType
AnnotateInst	BC/Lift.cpp	/^static void AnnotateInst(llvm::Instruction *inst, llvm::MDNode *annot) {$/;"	f	file:	signature:(llvm::Instruction *inst, llvm::MDNode *annot)
AnnotateInsts	BC/Lift.cpp	/^static void AnnotateInsts(llvm::Function *F, VA pc) {$/;"	f	file:	signature:(llvm::Function *F, VA pc)
ArchAddCallbackDriver	Arch/Arch.cpp	/^llvm::Function *ArchAddCallbackDriver(llvm::Module *M, VA local_target) {$/;"	f	signature:(llvm::Module *M, VA local_target)
ArchAddCallbackDriver	Arch/Arch.h	/^llvm::Function *ArchAddCallbackDriver(llvm::Module *M, VA local_target);$/;"	p	signature:(llvm::Module *M, VA local_target)
ArchAddEntryPointDriver	Arch/Arch.cpp	/^llvm::Function *ArchAddEntryPointDriver(llvm::Module *M,$/;"	f	signature:(llvm::Module *M, const std::string &name, VA entry)
ArchAddEntryPointDriver	Arch/Arch.h	/^llvm::Function *ArchAddEntryPointDriver($/;"	p	signature:( llvm::Module *M, const std::string &name, VA entry)
ArchAddExitPointDriver	Arch/Arch.cpp	/^llvm::Function *ArchAddExitPointDriver(llvm::Function *F) {$/;"	f	signature:(llvm::Function *F)
ArchAddExitPointDriver	Arch/Arch.h	/^llvm::Function *ArchAddExitPointDriver(llvm::Function *F);$/;"	p	signature:(llvm::Function *F)
ArchAddressSize	Arch/Arch.cpp	/^int ArchAddressSize(void) {$/;"	f	signature:(void)
ArchAddressSize	Arch/Arch.h	/^int ArchAddressSize(void);$/;"	p	signature:(void)
ArchAllocRegisterVars	Arch/Arch.cpp	/^void (*ArchAllocRegisterVars)(llvm::BasicBlock *) = nullptr;$/;"	v
ArchCallingConv	Arch/Arch.cpp	/^llvm::CallingConv::ID ArchCallingConv(void) {$/;"	f	signature:(void)
ArchCallingConv	Arch/Arch.h	/^llvm::CallingConv::ID ArchCallingConv(void);$/;"	p	signature:(void)
ArchDataLayout	Arch/Arch.cpp	/^const std::string &ArchDataLayout(void) {$/;"	f	signature:(void)
ArchDataLayout	Arch/Arch.h	/^const std::string &ArchDataLayout(void);$/;"	p	signature:(void)
ArchDecodeInstruction	Arch/Arch.cpp	/^size_t ArchDecodeInstruction(const uint8_t *bytes, const uint8_t *bytes_end,$/;"	f	signature:(const uint8_t *bytes, const uint8_t *bytes_end, uintptr_t va, llvm::MCInst &inst)
ArchDecodeInstruction	Arch/Arch.h	/^size_t ArchDecodeInstruction(const uint8_t *bytes, const uint8_t *bytes_end,$/;"	p	signature:(const uint8_t *bytes, const uint8_t *bytes_end, uintptr_t va, llvm::MCInst &inst)
ArchGetCallingConv	Arch/Arch.h	168;"	d
ArchGetInstructionLifter	Arch/Arch.cpp	/^InstructionLifter *ArchGetInstructionLifter(const llvm::MCInst &inst) {$/;"	f	signature:(const llvm::MCInst &inst)
ArchGetInstructionLifter	Arch/Dispatch.h	/^InstructionLifter *ArchGetInstructionLifter(const llvm::MCInst &inst);$/;"	p	signature:(const llvm::MCInst &inst)
ArchGetOrCreateRegStateTracer	Arch/Arch.cpp	/^llvm::Function *(*ArchGetOrCreateRegStateTracer)(llvm::Module *) = nullptr;$/;"	m	class:llvm	file:
ArchInitAttachDetach	Arch/Arch.cpp	/^void ArchInitAttachDetach(llvm::Module *M) {$/;"	f	signature:(llvm::Module *M)
ArchInitAttachDetach	Arch/Arch.h	/^void ArchInitAttachDetach(llvm::Module *M);$/;"	p	signature:(llvm::Module *M)
ArchLiftInstruction	Arch/Arch.cpp	/^InstTransResult (*ArchLiftInstruction)($/;"	v
ArchNameMcSemaCall	Arch/Arch.cpp	/^std::string ArchNameMcSemaCall(const std::string &name) {$/;"	f	signature:(const std::string &name)
ArchNameMcSemaCall	Arch/Arch.h	/^std::string ArchNameMcSemaCall(const std::string &name);$/;"	p	signature:(const std::string &name)
ArchPointerSize	Arch/Arch.h	167;"	d
ArchRegStateStructType	Arch/Arch.cpp	/^llvm::StructType *(*ArchRegStateStructType)(void) = nullptr;$/;"	m	class:llvm	file:
ArchRegisterName	Arch/Arch.cpp	/^const std::string &(*ArchRegisterName)(MCSemaRegs) = nullptr;$/;"	m	class:std	file:
ArchRegisterNumber	Arch/Arch.cpp	/^MCSemaRegs (*ArchRegisterNumber)(const std::string &) = nullptr;$/;"	v
ArchRegisterOffset	Arch/Arch.cpp	/^unsigned (*ArchRegisterOffset)(MCSemaRegs) = nullptr;$/;"	v
ArchRegisterParent	Arch/Arch.cpp	/^MCSemaRegs (*ArchRegisterParent)(MCSemaRegs) = nullptr;$/;"	v
ArchRegisterSize	Arch/Arch.cpp	/^unsigned (*ArchRegisterSize)(MCSemaRegs) = nullptr;$/;"	v
ArchSetCallingConv	Arch/Arch.cpp	/^void ArchSetCallingConv(llvm::Module *M, llvm::CallInst *ci) {$/;"	f	signature:(llvm::Module *M, llvm::CallInst *ci)
ArchSetCallingConv	Arch/Arch.cpp	/^void ArchSetCallingConv(llvm::Module *M, llvm::Function *F) {$/;"	f	signature:(llvm::Module *M, llvm::Function *F)
ArchSetCallingConv	Arch/Arch.h	/^void ArchSetCallingConv(llvm::Module *M, llvm::CallInst *ci);$/;"	p	signature:(llvm::Module *M, llvm::CallInst *ci)
ArchSetCallingConv	Arch/Arch.h	/^void ArchSetCallingConv(llvm::Module *M, llvm::Function *F);$/;"	p	signature:(llvm::Module *M, llvm::Function *F)
ArchTriple	Arch/Arch.cpp	/^const std::string &ArchTriple(void) {$/;"	f	signature:(void)
ArchTriple	Arch/Arch.h	/^const std::string &ArchTriple(void);$/;"	p	signature:(void)
ArchType	Arch/Arch.cpp	/^llvm::Triple::ArchType ArchType(void) {$/;"	f	signature:(void)
ArchType	Arch/Arch.h	/^llvm::Triple::ArchType ArchType(void);$/;"	p	signature:(void)
BEQ_populateDispatchMap	Arch/Mips/Semantics/BEQ.cpp	/^void BEQ_populateDispatchMap(DispatchMap &m)$/;"	f	signature:(DispatchMap &m)
BEQ_populateDispatchMap	Arch/Mips/Semantics/BEQ.h	/^void BEQ_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
BLOCKNAMES_TRANSLATION	Arch/X86/Semantics/Branches.cpp	1029;"	d	file:
BNE_populateDispatchMap	Arch/Mips/Semantics/BNE.cpp	/^void BNE_populateDispatchMap(DispatchMap &m)$/;"	f	signature:(DispatchMap &m)
BNE_populateDispatchMap	Arch/Mips/Semantics/BNE.h	/^void BNE_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
B_populateDispatchMap	Arch/Mips/Semantics/B.cpp	/^void B_populateDispatchMap(DispatchMap &m)$/;"	f	signature:(DispatchMap &m)
B_populateDispatchMap	Arch/Mips/Semantics/B.h	/^void B_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
Bitops_populateDispatchMap	Arch/X86/Semantics/bitops.cpp	/^void Bitops_populateDispatchMap(DispatchMap &m) {$/;"	f	signature:(DispatchMap &m)
Bitops_populateDispatchMap	Arch/X86/Semantics/bitops.h	/^void Bitops_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
Branches_populateDispatchMap	Arch/X86/Semantics/Branches.cpp	/^void Branches_populateDispatchMap(DispatchMap &m) {$/;"	f	signature:(DispatchMap &m)
Branches_populateDispatchMap	Arch/X86/Semantics/Branches.h	/^void Branches_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
CFGCodeRef	CFG/CFG.h	/^    CFGCodeRef,$/;"	e	enum:NativeInst::CFGRefType
CFGDataRef	CFG/CFG.h	/^    CFGDataRef$/;"	e	enum:NativeInst::CFGRefType
CFGOpType	CFG/CFG.h	/^  enum CFGOpType {$/;"	g	class:NativeInst	access:public
CFGRefType	CFG/CFG.h	/^  enum CFGRefType {$/;"	g	class:NativeInst	access:public
CF_F	Arch/X86/Semantics/Jcc.cpp	201;"	d	file:
CF_F	Arch/X86/Semantics/Jcc.cpp	78;"	d	file:
CHOOSE_IF	Arch/X86/Semantics/CMOV.cpp	/^static Value *CHOOSE_IF(BasicBlock *b, Value *cmp, Value *trueval,$/;"	f	file:	signature:(BasicBlock *b, Value *cmp, Value *trueval, Value *falseval)
CMOV_populateDispatchMap	Arch/X86/Semantics/CMOV.cpp	/^void CMOV_populateDispatchMap(DispatchMap &m) {$/;"	f	signature:(DispatchMap &m)
CMOV_populateDispatchMap	Arch/X86/Semantics/CMOV.h	/^void CMOV_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
CMP	Arch/Mips/Semantics/BNE.cpp	/^static Value *CMP(BasicBlock *&b, Value *x, Value *y) {$/;"	f	file:	signature:(BasicBlock *&b, Value *x, Value *y)
CMP	Arch/X86/Semantics/Jcc.cpp	/^static llvm::Value *CMP(llvm::BasicBlock *&b, llvm::Value *x, llvm::Value *y) {$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::Value *x, llvm::Value *y)
CMPS_TRANSLATION	Arch/X86/Semantics/String.cpp	758;"	d	file:
CMPTEST_populateDispatchMap	Arch/X86/Semantics/CMPTEST.cpp	/^void CMPTEST_populateDispatchMap(DispatchMap &m) {$/;"	f	signature:(DispatchMap &m)
CMPTEST_populateDispatchMap	Arch/X86/Semantics/CMPTEST.h	/^void CMPTEST_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
COFFObject	CFG/CFG.h	/^  COFFObject,$/;"	e	enum:ModuleInputFormat
CONSTFP_V	Arch/X86/Semantics/fpu.cpp	/^static llvm::Value *CONSTFP_V(llvm::BasicBlock *&b, long double val) {$/;"	f	file:	signature:(llvm::BasicBlock *&b, long double val)
CONST_V	BC/Util.h	/^inline static llvm::ConstantInt *CONST_V(llvm::BasicBlock *, uint64_t val) {$/;"	f	signature:(llvm::BasicBlock *, uint64_t val)
CONST_V	BC/Util.h	/^inline static llvm::ConstantInt *CONST_V(llvm::BasicBlock *, unsigned width,$/;"	f	signature:(llvm::BasicBlock *, unsigned width, uint64_t val)
CONST_V_INT	BC/Util.h	/^inline static llvm::ConstantInt *CONST_V_INT($/;"	f	signature:( llvm::LLVMContext &, uint64_t val)
CREATE_BLOCK	BC/Util.h	216;"	d
CalleeCleanup	CFG/Externals.h	/^    CalleeCleanup,$/;"	e	enum:ExternalCodeRef::CallingConvention
CallerCleanup	CFG/Externals.h	/^    CallerCleanup,$/;"	e	enum:ExternalCodeRef::CallingConvention
CallingConvention	CFG/Externals.h	/^  enum CallingConvention {$/;"	g	class:ExternalCodeRef	access:public
CreateConstantBlob	BC/Util.cpp	/^static llvm::Constant *CreateConstantBlob(llvm::LLVMContext &ctx,$/;"	f	file:	signature:(llvm::LLVMContext &ctx, const std::vector<uint8_t> &blob)
CreateConstantInt	BC/Util.cpp	/^llvm::ConstantInt *CreateConstantInt(int width, uint64_t val) {$/;"	f	signature:(int width, uint64_t val)
CreateConstantInt	BC/Util.h	/^llvm::ConstantInt *CreateConstantInt(int width, uint64_t val);$/;"	p	signature:(int width, uint64_t val)
CreateInstAnnotation	BC/Lift.cpp	/^static llvm::MDNode *CreateInstAnnotation(llvm::Function *F, VA addr) {$/;"	f	file:	signature:(llvm::Function *F, VA addr)
CreateInstrBreakpoint	BC/Lift.cpp	/^static void CreateInstrBreakpoint(llvm::BasicBlock *B, VA pc) {$/;"	f	file:	signature:(llvm::BasicBlock *B, VA pc)
CreateModule	BC/Util.cpp	/^llvm::Module *CreateModule(llvm::LLVMContext *context) {$/;"	f	signature:(llvm::LLVMContext *context)
CreateModule	BC/Util.h	/^llvm::Module *CreateModule(llvm::LLVMContext *context);$/;"	p	signature:(llvm::LLVMContext *context)
DO_REPE_CALL	Arch/X86/Semantics/String.cpp	562;"	d	file:
DO_REPNE_CALL	Arch/X86/Semantics/String.cpp	577;"	d	file:
DO_REP_CALL	Arch/X86/Semantics/String.cpp	547;"	d	file:
DO_SETCC_OP_MEM	Arch/X86/Semantics/SETcc.cpp	266;"	d	file:
DO_SETCC_OP_REG	Arch/X86/Semantics/SETcc.cpp	258;"	d	file:
DataSection	CFG/CFG.cpp	/^DataSection::DataSection(void)$/;"	f	class:DataSection	signature:(void)
DataSection	CFG/CFG.h	/^  DataSection(void);$/;"	p	class:DataSection	access:public	signature:(void)
DataSection	CFG/CFG.h	/^class DataSection {$/;"	c
DataSection::DataSection	CFG/CFG.cpp	/^DataSection::DataSection(void)$/;"	f	class:DataSection	signature:(void)
DataSection::DataSection	CFG/CFG.h	/^  DataSection(void);$/;"	p	class:DataSection	access:public	signature:(void)
DataSection::NO_BASE	CFG/CFG.h	/^  static const uint64_t NO_BASE = (uint64_t) ( -1);$/;"	m	class:DataSection	access:public
DataSection::addEntry	CFG/CFG.cpp	/^void DataSection::addEntry(const DataSectionEntry &dse) {$/;"	f	class:DataSection	signature:(const DataSectionEntry &dse)
DataSection::addEntry	CFG/CFG.h	/^  void addEntry(const DataSectionEntry &dse);$/;"	p	class:DataSection	access:public	signature:(const DataSectionEntry &dse)
DataSection::base	CFG/CFG.h	/^  uint64_t base;$/;"	m	class:DataSection	access:protected
DataSection::entries	CFG/CFG.h	/^  std::list<DataSectionEntry> entries;$/;"	m	class:DataSection	access:protected
DataSection::getBase	CFG/CFG.cpp	/^uint64_t DataSection::getBase(void) const {$/;"	f	class:DataSection	signature:(void) const
DataSection::getBase	CFG/CFG.h	/^  uint64_t getBase(void) const;$/;"	p	class:DataSection	access:public	signature:(void) const
DataSection::getBytes	CFG/CFG.cpp	/^std::vector<uint8_t> DataSection::getBytes(void) const {$/;"	f	class:DataSection	signature:(void) const
DataSection::getBytes	CFG/CFG.h	/^  std::vector<uint8_t> getBytes(void) const;$/;"	p	class:DataSection	access:public	signature:(void) const
DataSection::getEntries	CFG/CFG.cpp	/^const std::list<DataSectionEntry> &DataSection::getEntries(void) const {$/;"	f	class:DataSection	signature:(void) const
DataSection::getEntries	CFG/CFG.h	/^  const std::list<DataSectionEntry> &getEntries(void) const;$/;"	p	class:DataSection	access:public	signature:(void) const
DataSection::getSize	CFG/CFG.cpp	/^uint64_t DataSection::getSize(void) const {$/;"	f	class:DataSection	signature:(void) const
DataSection::getSize	CFG/CFG.h	/^  uint64_t getSize(void) const;$/;"	p	class:DataSection	access:public	signature:(void) const
DataSection::isReadOnly	CFG/CFG.cpp	/^bool DataSection::isReadOnly(void) const {$/;"	f	class:DataSection	signature:(void) const
DataSection::isReadOnly	CFG/CFG.h	/^  bool isReadOnly(void) const;$/;"	p	class:DataSection	access:public	signature:(void) const
DataSection::read_only	CFG/CFG.h	/^  bool read_only;$/;"	m	class:DataSection	access:protected
DataSection::setReadOnly	CFG/CFG.cpp	/^void DataSection::setReadOnly(bool isro) {$/;"	f	class:DataSection	signature:(bool isro)
DataSection::setReadOnly	CFG/CFG.h	/^  void setReadOnly(bool isro);$/;"	p	class:DataSection	access:public	signature:(bool isro)
DataSection::~DataSection	CFG/CFG.cpp	/^DataSection::~DataSection(void) {}$/;"	f	class:DataSection	signature:(void)
DataSection::~DataSection	CFG/CFG.h	/^  virtual ~DataSection(void);$/;"	p	class:DataSection	access:public	signature:(void)
DataSectionEntry	CFG/CFG.cpp	/^DataSectionEntry::DataSectionEntry(uint64_t base, const std::string &sname)$/;"	f	class:DataSectionEntry	signature:(uint64_t base, const std::string &sname)
DataSectionEntry	CFG/CFG.cpp	/^DataSectionEntry::DataSectionEntry(uint64_t base, const std::string &sname,$/;"	f	class:DataSectionEntry	signature:(uint64_t base, const std::string &sname, uint64_t symbol_size)
DataSectionEntry	CFG/CFG.cpp	/^DataSectionEntry::DataSectionEntry(uint64_t base, const std::vector<uint8_t> &b)$/;"	f	class:DataSectionEntry	signature:(uint64_t base, const std::vector<uint8_t> &b)
DataSectionEntry	CFG/CFG.h	/^  DataSectionEntry(uint64_t base, const std::string &sname);$/;"	p	class:DataSectionEntry	access:public	signature:(uint64_t base, const std::string &sname)
DataSectionEntry	CFG/CFG.h	/^  DataSectionEntry(uint64_t base, const std::string &sname,$/;"	p	class:DataSectionEntry	access:public	signature:(uint64_t base, const std::string &sname, uint64_t symbol_size)
DataSectionEntry	CFG/CFG.h	/^  DataSectionEntry(uint64_t base, const std::vector<uint8_t> &b);$/;"	p	class:DataSectionEntry	access:public	signature:(uint64_t base, const std::vector<uint8_t> &b)
DataSectionEntry	CFG/CFG.h	/^  DataSectionEntry(void) = delete;$/;"	p	class:DataSectionEntry	access:private	signature:(void)
DataSectionEntry	CFG/CFG.h	/^class DataSectionEntry {$/;"	c
DataSectionEntry::DataSectionEntry	CFG/CFG.cpp	/^DataSectionEntry::DataSectionEntry(uint64_t base, const std::string &sname)$/;"	f	class:DataSectionEntry	signature:(uint64_t base, const std::string &sname)
DataSectionEntry::DataSectionEntry	CFG/CFG.cpp	/^DataSectionEntry::DataSectionEntry(uint64_t base, const std::string &sname,$/;"	f	class:DataSectionEntry	signature:(uint64_t base, const std::string &sname, uint64_t symbol_size)
DataSectionEntry::DataSectionEntry	CFG/CFG.cpp	/^DataSectionEntry::DataSectionEntry(uint64_t base, const std::vector<uint8_t> &b)$/;"	f	class:DataSectionEntry	signature:(uint64_t base, const std::vector<uint8_t> &b)
DataSectionEntry::DataSectionEntry	CFG/CFG.h	/^  DataSectionEntry(uint64_t base, const std::string &sname);$/;"	p	class:DataSectionEntry	access:public	signature:(uint64_t base, const std::string &sname)
DataSectionEntry::DataSectionEntry	CFG/CFG.h	/^  DataSectionEntry(uint64_t base, const std::string &sname,$/;"	p	class:DataSectionEntry	access:public	signature:(uint64_t base, const std::string &sname, uint64_t symbol_size)
DataSectionEntry::DataSectionEntry	CFG/CFG.h	/^  DataSectionEntry(uint64_t base, const std::vector<uint8_t> &b);$/;"	p	class:DataSectionEntry	access:public	signature:(uint64_t base, const std::vector<uint8_t> &b)
DataSectionEntry::DataSectionEntry	CFG/CFG.h	/^  DataSectionEntry(void) = delete;$/;"	p	class:DataSectionEntry	access:private	signature:(void)
DataSectionEntry::base	CFG/CFG.h	/^  uint64_t base;$/;"	m	class:DataSectionEntry	access:protected
DataSectionEntry::bytes	CFG/CFG.h	/^  std::vector<uint8_t> bytes;$/;"	m	class:DataSectionEntry	access:protected
DataSectionEntry::getBase	CFG/CFG.cpp	/^uint64_t DataSectionEntry::getBase(void) const {$/;"	f	class:DataSectionEntry	signature:(void) const
DataSectionEntry::getBase	CFG/CFG.h	/^  uint64_t getBase(void) const;$/;"	p	class:DataSectionEntry	access:public	signature:(void) const
DataSectionEntry::getBytes	CFG/CFG.cpp	/^const std::vector<uint8_t> &DataSectionEntry::getBytes(void) const {$/;"	f	class:DataSectionEntry	signature:(void) const
DataSectionEntry::getBytes	CFG/CFG.h	/^  const std::vector<uint8_t> &getBytes(void) const;$/;"	p	class:DataSectionEntry	access:public	signature:(void) const
DataSectionEntry::getSize	CFG/CFG.cpp	/^uint64_t DataSectionEntry::getSize(void) const {$/;"	f	class:DataSectionEntry	signature:(void) const
DataSectionEntry::getSize	CFG/CFG.h	/^  uint64_t getSize(void) const;$/;"	p	class:DataSectionEntry	access:public	signature:(void) const
DataSectionEntry::getSymbol	CFG/CFG.cpp	/^bool DataSectionEntry::getSymbol(std::string &sname) const {$/;"	f	class:DataSectionEntry	signature:(std::string &sname) const
DataSectionEntry::getSymbol	CFG/CFG.h	/^  bool getSymbol(std::string &sname) const;$/;"	p	class:DataSectionEntry	access:public	signature:(std::string &sname) const
DataSectionEntry::is_symbol	CFG/CFG.h	/^  bool is_symbol;$/;"	m	class:DataSectionEntry	access:protected
DataSectionEntry::sym_name	CFG/CFG.h	/^  std::string sym_name;$/;"	m	class:DataSectionEntry	access:protected
DataSectionEntry::~DataSectionEntry	CFG/CFG.cpp	/^DataSectionEntry::~DataSectionEntry(void) {}$/;"	f	class:DataSectionEntry	signature:(void)
DataSectionEntry::~DataSectionEntry	CFG/CFG.h	/^  virtual ~DataSectionEntry(void);$/;"	p	class:DataSectionEntry	access:public	signature:(void)
DataSectionVar	BC/Lift.cpp	/^struct DataSectionVar {$/;"	s	file:
DataSectionVar::opaque_type	BC/Lift.cpp	/^  llvm::StructType *opaque_type;$/;"	m	struct:DataSectionVar	file:	access:public
DataSectionVar::section	BC/Lift.cpp	/^  const DataSection *section;$/;"	m	struct:DataSectionVar	file:	access:public
DataSectionVar::var	BC/Lift.cpp	/^  llvm::GlobalVariable *var;$/;"	m	struct:DataSectionVar	file:	access:public
DecodeInst	CFG/CFG.cpp	/^static NativeInstPtr DecodeInst($/;"	f	file:	signature:( uintptr_t addr, const std::vector<uint8_t> &bytes)
DeserializeBlock	CFG/CFG.cpp	/^static NativeBlockPtr DeserializeBlock($/;"	f	file:	signature:( const ::Block &block, const std::list<ExternalCodeRefPtr> &extcode)
DeserializeCallingConvention	CFG/CFG.cpp	/^static ExternalCodeRef::CallingConvention DeserializeCallingConvention($/;"	f	file:	signature:( ::ExternalFunction::CallingConvention k)
DeserializeData	CFG/CFG.cpp	/^static void DeserializeData(const ::Data &d, DataSection &ds) {$/;"	f	file:	signature:(const ::Data &d, DataSection &ds)
DeserializeDataSymbol	CFG/CFG.cpp	/^static DataSectionEntry DeserializeDataSymbol(const ::DataSymbol &ds) {$/;"	f	file:	signature:(const ::DataSymbol &ds)
DeserializeExternData	CFG/CFG.cpp	/^static ExternalDataRefPtr DeserializeExternData(const ::ExternalData &ed) {$/;"	f	file:	signature:(const ::ExternalData &ed)
DeserializeExternFunc	CFG/CFG.cpp	/^static ExternalCodeRefPtr DeserializeExternFunc(const ::ExternalFunction &f) {$/;"	f	file:	signature:(const ::ExternalFunction &f)
DeserializeInst	CFG/CFG.cpp	/^static NativeInstPtr DeserializeInst($/;"	f	file:	signature:( const ::Instruction &inst, const std::list<ExternalCodeRefPtr> &extcode)
DeserializeNativeFunc	CFG/CFG.cpp	/^static NativeFunctionPtr DeserializeNativeFunc($/;"	f	file:	signature:( const ::Function &func, const std::list<ExternalCodeRefPtr> &extcode)
DispatchMap	Arch/Dispatch.h	/^class DispatchMap : public std::map<unsigned, InstructionLifter *> {};$/;"	c	inherits:std::map
EMIT_CMOV	Arch/X86/Semantics/CMOV.cpp	129;"	d	file:
EMIT_CMOV_RM	Arch/X86/Semantics/CMOV.cpp	110;"	d	file:
EMIT_CMOV_RR	Arch/X86/Semantics/CMOV.cpp	122;"	d	file:
EMIT_SHL_OR	Arch/X86/Semantics/Stack.cpp	622;"	d	file:
EMIT_SHR_AND	Arch/X86/Semantics/Stack.cpp	627;"	d	file:
EQ	Arch/X86/Semantics/CMOV.cpp	/^static Value *EQ(BasicBlock *b, MCSemaRegs f1, MCSemaRegs f2) {$/;"	f	file:	signature:(BasicBlock *b, MCSemaRegs f1, MCSemaRegs f2)
EXT16_AND_SHL	Arch/X86/Semantics/fpu.cpp	/^static llvm::Value *EXT16_AND_SHL(llvm::BasicBlock *&b, MCSemaRegs reg, int shift, int mask) {$/;"	f	file:	signature:(llvm::BasicBlock *&b, MCSemaRegs reg, int shift, int mask)
Exchanges_populateDispatchMap	Arch/X86/Semantics/Exchanges.cpp	/^void Exchanges_populateDispatchMap(DispatchMap &m) {$/;"	f	signature:(DispatchMap &m)
Exchanges_populateDispatchMap	Arch/X86/Semantics/Exchanges.h	/^void Exchanges_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
ExtendOp	Arch/X86/Semantics/SSE.cpp	/^enum ExtendOp {$/;"	g	file:
ExternalCodeRef	CFG/Externals.h	/^  ExternalCodeRef(const std::string &fn)$/;"	f	class:ExternalCodeRef	access:public	signature:(const std::string &fn)
ExternalCodeRef	CFG/Externals.h	/^  ExternalCodeRef(const std::string &fn, int d)$/;"	f	class:ExternalCodeRef	access:public	signature:(const std::string &fn, int d)
ExternalCodeRef	CFG/Externals.h	/^  ExternalCodeRef(const std::string &fn, int d, CallingConvention c)$/;"	f	class:ExternalCodeRef	access:public	signature:(const std::string &fn, int d, CallingConvention c)
ExternalCodeRef	CFG/Externals.h	/^  ExternalCodeRef(const std::string &fn, int d, CallingConvention c,$/;"	f	class:ExternalCodeRef	access:public	signature:(const std::string &fn, int d, CallingConvention c, ReturnType r)
ExternalCodeRef	CFG/Externals.h	/^  ExternalCodeRef(const std::string &fn, int d, CallingConvention c,$/;"	f	class:ExternalCodeRef	access:public	signature:(const std::string &fn, int d, CallingConvention c, ReturnType r, const std::string &sign)
ExternalCodeRef	CFG/Externals.h	/^class ExternalCodeRef : public ExternalRef {$/;"	c	inherits:ExternalRef
ExternalCodeRef::CalleeCleanup	CFG/Externals.h	/^    CalleeCleanup,$/;"	e	enum:ExternalCodeRef::CallingConvention
ExternalCodeRef::CallerCleanup	CFG/Externals.h	/^    CallerCleanup,$/;"	e	enum:ExternalCodeRef::CallingConvention
ExternalCodeRef::CallingConvention	CFG/Externals.h	/^  enum CallingConvention {$/;"	g	class:ExternalCodeRef	access:public
ExternalCodeRef::ExternalCodeRef	CFG/Externals.h	/^  ExternalCodeRef(const std::string &fn)$/;"	f	class:ExternalCodeRef	access:public	signature:(const std::string &fn)
ExternalCodeRef::ExternalCodeRef	CFG/Externals.h	/^  ExternalCodeRef(const std::string &fn, int d)$/;"	f	class:ExternalCodeRef	access:public	signature:(const std::string &fn, int d)
ExternalCodeRef::ExternalCodeRef	CFG/Externals.h	/^  ExternalCodeRef(const std::string &fn, int d, CallingConvention c)$/;"	f	class:ExternalCodeRef	access:public	signature:(const std::string &fn, int d, CallingConvention c)
ExternalCodeRef::ExternalCodeRef	CFG/Externals.h	/^  ExternalCodeRef(const std::string &fn, int d, CallingConvention c,$/;"	f	class:ExternalCodeRef	access:public	signature:(const std::string &fn, int d, CallingConvention c, ReturnType r)
ExternalCodeRef::ExternalCodeRef	CFG/Externals.h	/^  ExternalCodeRef(const std::string &fn, int d, CallingConvention c,$/;"	f	class:ExternalCodeRef	access:public	signature:(const std::string &fn, int d, CallingConvention c, ReturnType r, const std::string &sign)
ExternalCodeRef::FastCall	CFG/Externals.h	/^    FastCall,$/;"	e	enum:ExternalCodeRef::CallingConvention
ExternalCodeRef::IntTy	CFG/Externals.h	/^    IntTy,$/;"	e	enum:ExternalCodeRef::ReturnType
ExternalCodeRef::McsemaCall	CFG/Externals.h	/^    McsemaCall$/;"	e	enum:ExternalCodeRef::CallingConvention
ExternalCodeRef::NoReturn	CFG/Externals.h	/^    NoReturn$/;"	e	enum:ExternalCodeRef::ReturnType
ExternalCodeRef::ReturnType	CFG/Externals.h	/^  enum ReturnType {$/;"	g	class:ExternalCodeRef	access:public
ExternalCodeRef::Unknown	CFG/Externals.h	/^    Unknown,$/;"	e	enum:ExternalCodeRef::ReturnType
ExternalCodeRef::VoidTy	CFG/Externals.h	/^    VoidTy,$/;"	e	enum:ExternalCodeRef::ReturnType
ExternalCodeRef::X86_64_SysV	CFG/Externals.h	/^    X86_64_SysV,$/;"	e	enum:ExternalCodeRef::CallingConvention
ExternalCodeRef::X86_64_Win64	CFG/Externals.h	/^    X86_64_Win64,$/;"	e	enum:ExternalCodeRef::CallingConvention
ExternalCodeRef::conv	CFG/Externals.h	/^  CallingConvention conv;$/;"	m	class:ExternalCodeRef	access:protected
ExternalCodeRef::funcSign	CFG/Externals.h	/^  std::string funcSign;$/;"	m	class:ExternalCodeRef	access:protected
ExternalCodeRef::getCallingConvention	CFG/Externals.h	/^  CallingConvention getCallingConvention(void) {$/;"	f	class:ExternalCodeRef	access:public	signature:(void)
ExternalCodeRef::getFunctionSignature	CFG/Externals.h	/^  const std::string &getFunctionSignature(void) {$/;"	f	class:ExternalCodeRef	access:public	signature:(void)
ExternalCodeRef::getNumArgs	CFG/Externals.h	/^  int8_t getNumArgs(void) {$/;"	f	class:ExternalCodeRef	access:public	signature:(void)
ExternalCodeRef::getReturnType	CFG/Externals.h	/^  ReturnType getReturnType(void) {$/;"	f	class:ExternalCodeRef	access:public	signature:(void)
ExternalCodeRef::numArgs	CFG/Externals.h	/^  int numArgs;$/;"	m	class:ExternalCodeRef	access:protected
ExternalCodeRef::ret	CFG/Externals.h	/^  ReturnType ret;$/;"	m	class:ExternalCodeRef	access:protected
ExternalCodeRef::setReturnType	CFG/Externals.h	/^  void setReturnType(ReturnType r) {$/;"	f	class:ExternalCodeRef	access:public	signature:(ReturnType r)
ExternalCodeRefPtr	CFG/CFG.h	/^typedef ExternalCodeRef *ExternalCodeRefPtr;$/;"	t
ExternalCodeRefPtr	CFG/Externals.h	/^typedef ExternalCodeRef *ExternalCodeRefPtr;$/;"	t
ExternalDataRef	CFG/Externals.h	/^  ExternalDataRef(const std::string &name)$/;"	f	class:ExternalDataRef	access:public	signature:(const std::string &name)
ExternalDataRef	CFG/Externals.h	/^  ExternalDataRef(const std::string &name, size_t dtsz)$/;"	f	class:ExternalDataRef	access:public	signature:(const std::string &name, size_t dtsz)
ExternalDataRef	CFG/Externals.h	/^class ExternalDataRef : public ExternalRef {$/;"	c	inherits:ExternalRef
ExternalDataRef::ExternalDataRef	CFG/Externals.h	/^  ExternalDataRef(const std::string &name)$/;"	f	class:ExternalDataRef	access:public	signature:(const std::string &name)
ExternalDataRef::ExternalDataRef	CFG/Externals.h	/^  ExternalDataRef(const std::string &name, size_t dtsz)$/;"	f	class:ExternalDataRef	access:public	signature:(const std::string &name, size_t dtsz)
ExternalDataRef::dataSize	CFG/Externals.h	/^  size_t dataSize;$/;"	m	class:ExternalDataRef	access:protected
ExternalDataRef::getDataSize	CFG/Externals.h	/^  size_t getDataSize() {$/;"	f	class:ExternalDataRef	access:public	signature:()
ExternalDataRef::setDataSize	CFG/Externals.h	/^  void setDataSize(size_t newsize) {$/;"	f	class:ExternalDataRef	access:public	signature:(size_t newsize)
ExternalDataRefPtr	CFG/CFG.h	/^typedef ExternalDataRef *ExternalDataRefPtr;$/;"	t
ExternalDataRefPtr	CFG/Externals.h	/^typedef ExternalDataRef *ExternalDataRefPtr;$/;"	t
ExternalRef	CFG/Externals.h	/^  ExternalRef(const std::string &sn)$/;"	f	class:ExternalRef	access:public	signature:(const std::string &sn)
ExternalRef	CFG/Externals.h	/^class ExternalRef {$/;"	c
ExternalRef::ExternalRef	CFG/Externals.h	/^  ExternalRef(const std::string &sn)$/;"	f	class:ExternalRef	access:public	signature:(const std::string &sn)
ExternalRef::getSymbolName	CFG/Externals.h	/^  virtual const std::string &getSymbolName(void) {$/;"	f	class:ExternalRef	access:public	signature:(void)
ExternalRef::isWeak	CFG/Externals.h	/^  virtual bool isWeak(void) {$/;"	f	class:ExternalRef	access:public	signature:(void)
ExternalRef::setWeak	CFG/Externals.h	/^  virtual void setWeak(bool w) {$/;"	f	class:ExternalRef	access:public	signature:(bool w)
ExternalRef::symbolName	CFG/Externals.h	/^  std::string symbolName;$/;"	m	class:ExternalRef	access:protected
ExternalRef::weak	CFG/Externals.h	/^  bool weak;$/;"	m	class:ExternalRef	access:protected
ExternalRef::~ExternalRef	CFG/Externals.h	/^  virtual ~ExternalRef() {}$/;"	f	class:ExternalRef	access:public	signature:()
F	Arch/Dispatch.h	/^  llvm::Function *F;$/;"	m	struct:TranslationContext	access:public
FPUM_READ	Arch/X86/Semantics/fpu.cpp	/^static llvm::Value *FPUM_READ(NativeInstPtr ip, int memwidth,$/;"	f	file:	signature:(NativeInstPtr ip, int memwidth, llvm::BasicBlock *&b, llvm::Value *addr)
FPUR_READ	Arch/X86/Semantics/fpu.cpp	/^static llvm::Value *FPUR_READ(llvm::BasicBlock *&b, MCSemaRegs fpreg) {$/;"	f	file:	signature:(llvm::BasicBlock *&b, MCSemaRegs fpreg)
FPUR_WRITE	Arch/X86/Semantics/fpu.cpp	/^static void FPUR_WRITE(llvm::BasicBlock *&b, MCSemaRegs fpreg, llvm::Value *val) {$/;"	f	file:	signature:(llvm::BasicBlock *&b, MCSemaRegs fpreg, llvm::Value *val)
FPU_POP	Arch/X86/Semantics/fpu.cpp	/^static void FPU_POP(llvm::BasicBlock *&b) {$/;"	f	file:	signature:(llvm::BasicBlock *&b)
FPU_PUSHV	Arch/X86/Semantics/fpu.cpp	/^static void FPU_PUSHV(llvm::BasicBlock *&b, llvm::Value *fpuval) {$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::Value *fpuval)
FPU_TAG_EMPTY	Arch/X86/Semantics/fpu.h	/^    FPU_TAG_EMPTY = 3$/;"	e	enum:fputag_vals
FPU_TAG_SPECIAL	Arch/X86/Semantics/fpu.h	/^    FPU_TAG_SPECIAL = 2,$/;"	e	enum:fputag_vals
FPU_TAG_VALID	Arch/X86/Semantics/fpu.h	/^    FPU_TAG_VALID = 0,$/;"	e	enum:fputag_vals
FPU_TAG_ZERO	Arch/X86/Semantics/fpu.h	/^    FPU_TAG_ZERO = 1,$/;"	e	enum:fputag_vals
FPU_TRANSLATION	Arch/X86/Semantics/fpu.cpp	1040;"	d	file:
FPU_populateDispatchMap	Arch/X86/Semantics/fpu.cpp	/^void FPU_populateDispatchMap(DispatchMap &m) {$/;"	f	signature:(DispatchMap &m)
FPU_populateDispatchMap	Arch/X86/Semantics/fpu.h	/^void FPU_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
FP_AS_INT	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value *FP_AS_INT(llvm::BasicBlock *&block, llvm::Value *in) {$/;"	f	file:	signature:(llvm::BasicBlock *&block, llvm::Value *in)
FSPrefix	CFG/CFG.h	/^    FSPrefix,$/;"	e	enum:NativeInst::Prefix
F_CLEAR	BC/Util.cpp	/^void F_CLEAR(llvm::BasicBlock *b, MCSemaRegs flag) {$/;"	f	signature:(llvm::BasicBlock *b, MCSemaRegs flag)
F_CLEAR	BC/Util.h	/^void F_CLEAR(llvm::BasicBlock *b, MCSemaRegs flag);$/;"	p	signature:(llvm::BasicBlock *b, MCSemaRegs flag)
F_READ	BC/Util.cpp	/^llvm::Value *F_READ(llvm::BasicBlock *b, MCSemaRegs flag) {$/;"	f	signature:(llvm::BasicBlock *b, MCSemaRegs flag)
F_READ	BC/Util.cpp	/^llvm::Value *F_READ(llvm::BasicBlock *b, MCSemaRegs flag, int size) {$/;"	f	signature:(llvm::BasicBlock *b, MCSemaRegs flag, int size)
F_READ	BC/Util.h	/^llvm::Value *F_READ(llvm::BasicBlock *b, MCSemaRegs flag);$/;"	p	signature:(llvm::BasicBlock *b, MCSemaRegs flag)
F_READ	BC/Util.h	/^llvm::Value *F_READ(llvm::BasicBlock *b, MCSemaRegs flag, int size);$/;"	p	signature:(llvm::BasicBlock *b, MCSemaRegs flag, int size)
F_SET	BC/Util.cpp	/^void F_SET(llvm::BasicBlock *b, MCSemaRegs flag) {$/;"	f	signature:(llvm::BasicBlock *b, MCSemaRegs flag)
F_SET	BC/Util.h	/^void F_SET(llvm::BasicBlock *b, MCSemaRegs flag);$/;"	p	signature:(llvm::BasicBlock *b, MCSemaRegs flag)
F_WRITE	BC/Util.cpp	/^void F_WRITE(llvm::BasicBlock *b, MCSemaRegs flag, llvm::Value *v) {$/;"	f	signature:(llvm::BasicBlock *b, MCSemaRegs flag, llvm::Value *v)
F_WRITE	BC/Util.h	/^void F_WRITE(llvm::BasicBlock *b, MCSemaRegs flag, llvm::Value *v);$/;"	p	signature:(llvm::BasicBlock *b, MCSemaRegs flag, llvm::Value *v)
F_ZAP	BC/Util.cpp	/^void F_ZAP(llvm::BasicBlock *, MCSemaRegs) {$/;"	f	signature:(llvm::BasicBlock *, MCSemaRegs)
F_ZAP	BC/Util.h	/^void F_ZAP(llvm::BasicBlock *b, MCSemaRegs flag);$/;"	p	signature:(llvm::BasicBlock *b, MCSemaRegs flag)
FastCall	CFG/Externals.h	/^    FastCall,$/;"	e	enum:ExternalCodeRef::CallingConvention
FindSymbolInModule	Lift.cpp	/^static VA FindSymbolInModule(NativeModulePtr mod, const std::string &sym_name) {$/;"	f	file:	signature:(NativeModulePtr mod, const std::string &sym_name)
FixupInstruction	Arch/Arch.cpp	/^static void FixupInstruction($/;"	f	namespace:__anon2	signature:( llvm::MCInst &inst, const std::unordered_set<unsigned> &prefixes)
GENERIC_MC_READREG	BC/Util.cpp	/^llvm::Value *GENERIC_MC_READREG(llvm::BasicBlock *B, MCSemaRegs mc_reg,$/;"	f	signature:(llvm::BasicBlock *B, MCSemaRegs mc_reg, int desired_size)
GENERIC_MC_READREG	BC/Util.h	/^llvm::Value *GENERIC_MC_READREG(llvm::BasicBlock *b, MCSemaRegs reg,$/;"	p	signature:(llvm::BasicBlock *b, MCSemaRegs reg, int desired_size)
GENERIC_MC_WRITEREG	BC/Util.cpp	/^void GENERIC_MC_WRITEREG(llvm::BasicBlock *B, MCSemaRegs mc_reg,$/;"	f	signature:(llvm::BasicBlock *B, MCSemaRegs mc_reg, llvm::Value *val)
GENERIC_MC_WRITEREG	BC/Util.h	/^void GENERIC_MC_WRITEREG(llvm::BasicBlock *b, MCSemaRegs reg, llvm::Value *v);$/;"	p	signature:(llvm::BasicBlock *b, MCSemaRegs reg, llvm::Value *v)
GENERIC_READREG	BC/Util.cpp	/^llvm::Value *GENERIC_READREG(llvm::BasicBlock *b, MCSemaRegs reg) {$/;"	f	signature:(llvm::BasicBlock *b, MCSemaRegs reg)
GENERIC_READREG	BC/Util.h	/^llvm::Value *GENERIC_READREG(llvm::BasicBlock *b, MCSemaRegs reg);$/;"	p	signature:(llvm::BasicBlock *b, MCSemaRegs reg)
GENERIC_TRANSLATION	BC/Util.h	260;"	d
GENERIC_TRANSLATION_MI	BC/Util.h	222;"	d
GENERIC_TRANSLATION_REF	BC/Util.h	243;"	d
GENERIC_WRITEREG	BC/Util.cpp	/^void GENERIC_WRITEREG(llvm::BasicBlock *b, MCSemaRegs reg, llvm::Value *v) {$/;"	f	signature:(llvm::BasicBlock *b, MCSemaRegs reg, llvm::Value *v)
GENERIC_WRITEREG	BC/Util.h	/^void GENERIC_WRITEREG(llvm::BasicBlock *b, MCSemaRegs reg, llvm::Value *v);$/;"	p	signature:(llvm::BasicBlock *b, MCSemaRegs reg, llvm::Value *v)
GET_XAX	Arch/X86/Semantics/MOV.cpp	/^static int GET_XAX() {$/;"	f	file:	signature:()
GSPrefix	CFG/CFG.h	/^    GSPrefix$/;"	e	enum:NativeInst::Prefix
GetPointerSizedValue	BC/Util.cpp	/^static llvm::Constant *GetPointerSizedValue(llvm::Module *M, llvm::Constant *v,$/;"	f	file:	signature:(llvm::Module *M, llvm::Constant *v, int valsize)
GetPrefix	CFG/CFG.cpp	/^static NativeInst::Prefix GetPrefix(const llvm::MCInst &inst) {$/;"	f	file:	signature:(const llvm::MCInst &inst)
GetPrintf	Arch/Mips/Register.cpp	/^static llvm::Function *GetPrintf(llvm::Module *M) {$/;"	f	file:	signature:(llvm::Module *M)
GetPrintf	Arch/X86/Register.cpp	/^static llvm::Function *GetPrintf(llvm::Module *M) {$/;"	f	file:	signature:(llvm::Module *M)
GetReadReg	BC/Util.cpp	/^static llvm::Value *GetReadReg(llvm::Function *F, MCSemaRegs reg) {$/;"	f	file:	signature:(llvm::Function *F, MCSemaRegs reg)
GetSectionForDataAddr	BC/Util.cpp	/^static llvm::GlobalVariable *GetSectionForDataAddr($/;"	f	file:	signature:( const std::list<DataSection> &dataSecs, llvm::Module *M, VA data_addr, VA &section_base)
GetWriteReg	BC/Util.cpp	/^static llvm::Value *GetWriteReg(llvm::Function *F, MCSemaRegs reg) {$/;"	f	file:	signature:(llvm::Function *F, MCSemaRegs reg)
IMMRef	CFG/CFG.h	/^    IMMRef,$/;"	e	enum:NativeInst::CFGOpType
IMM_AS_DATA_REF	Arch/X86/Util.h	/^static llvm::Value *IMM_AS_DATA_REF(llvm::BasicBlock *B, NativeModulePtr mod,$/;"	f	signature:(llvm::BasicBlock *B, NativeModulePtr mod, NativeInstPtr ip)
IMM_AS_DATA_REF	Arch/X86/Util.h	/^static llvm::Value* IMM_AS_DATA_REF(llvm::BasicBlock *b, NativeModulePtr mod,$/;"	f	signature:(llvm::BasicBlock *b, NativeModulePtr mod, NativeInstPtr ip)
IMulRes	Arch/X86/Semantics/MULDIV.cpp	/^struct IMulRes {$/;"	s	file:
IMulRes::full	Arch/X86/Semantics/MULDIV.cpp	/^  llvm::Value *full;$/;"	m	struct:IMulRes	file:	access:public
IMulRes::trunc	Arch/X86/Semantics/MULDIV.cpp	/^  llvm::Value *trunc;$/;"	m	struct:IMulRes	file:	access:public
INCDECNEG_populateDispatchMap	Arch/X86/Semantics/INCDECNEG.cpp	/^void INCDECNEG_populateDispatchMap(DispatchMap &m) {$/;"	f	signature:(DispatchMap &m)
INCDECNEG_populateDispatchMap	Arch/X86/Semantics/INCDECNEG.h	/^void INCDECNEG_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
INTERNAL_M_READ	BC/Util.cpp	/^llvm::Value *INTERNAL_M_READ(unsigned width, unsigned addrspace,$/;"	f	signature:(unsigned width, unsigned addrspace, llvm::BasicBlock *b, llvm::Value *addr)
INTERNAL_M_WRITE	BC/Util.cpp	/^void INTERNAL_M_WRITE(int width, unsigned addrspace, llvm::BasicBlock *b,$/;"	f	signature:(int width, unsigned addrspace, llvm::BasicBlock *b, llvm::Value *addr, llvm::Value *data)
INTERNAL_M_WRITE	BC/Util.h	/^void INTERNAL_M_WRITE(int width, unsigned addrspace, llvm::BasicBlock *b,$/;"	p	signature:(int width, unsigned addrspace, llvm::BasicBlock *b, llvm::Value *addr, llvm::Value *data)
INT_AS_FP	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value *INT_AS_FP(llvm::BasicBlock *&block, llvm::Value *in) {$/;"	f	file:	signature:(llvm::BasicBlock *&block, llvm::Value *in)
INT_AS_FPVECTOR	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value *INT_AS_FPVECTOR(llvm::BasicBlock *b, llvm::Value *input) {$/;"	f	file:	signature:(llvm::BasicBlock *b, llvm::Value *input)
INT_AS_VECTOR	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value *INT_AS_VECTOR(llvm::BasicBlock *b, llvm::Value *input) {$/;"	f	file:	signature:(llvm::BasicBlock *b, llvm::Value *input)
INT_TO_FP_TO_INT	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value *INT_TO_FP_TO_INT(llvm::BasicBlock *&block,$/;"	f	file:	signature:(llvm::BasicBlock *&block, llvm::Value *in)
InitADFeatues	Arch/Arch.cpp	/^static void InitADFeatues(llvm::Module *M, const char *name,$/;"	f	file:	signature:(llvm::Module *M, const char *name, llvm::FunctionType *EPTy)
InitArch	Arch/Arch.cpp	/^bool InitArch(llvm::LLVMContext *context, const std::string &os, const std::string &arch) {$/;"	f	signature:(llvm::LLVMContext *context, const std::string &os, const std::string &arch)
InitArch	Arch/Arch.h	/^bool InitArch(llvm::LLVMContext *context,$/;"	p	signature:(llvm::LLVMContext *context, const std::string &os, const std::string &arch)
InitExternalCode	BC/Lift.cpp	/^static void InitExternalCode(NativeModulePtr natMod, llvm::Module *M) {$/;"	f	file:	signature:(NativeModulePtr natMod, llvm::Module *M)
InitExternalData	BC/Lift.cpp	/^static void InitExternalData(NativeModulePtr natMod, llvm::Module *M) {$/;"	f	file:	signature:(NativeModulePtr natMod, llvm::Module *M)
InitInstructionDecoder	Arch/Arch.cpp	/^static bool InitInstructionDecoder(void) {$/;"	f	namespace:__anon1	signature:(void)
InitLiftedFunctions	BC/Lift.cpp	/^static void InitLiftedFunctions(NativeModulePtr natMod, llvm::Module *M) {$/;"	f	file:	signature:(NativeModulePtr natMod, llvm::Module *M)
InsertDataSections	BC/Lift.cpp	/^static bool InsertDataSections(NativeModulePtr natMod, llvm::Module *M) {$/;"	f	file:	signature:(NativeModulePtr natMod, llvm::Module *M)
InsertFunctionIntoModule	BC/Lift.cpp	/^static bool InsertFunctionIntoModule(NativeModulePtr mod,$/;"	f	file:	signature:(NativeModulePtr mod, NativeFunctionPtr func, llvm::Module *M)
InstructionLifter	Arch/Dispatch.h	/^typedef InstTransResult (InstructionLifter)($/;"	t
IntTy	CFG/Externals.h	/^    IntTy,$/;"	e	enum:ExternalCodeRef::ReturnType
JALR_populateDispatchMap	Arch/Mips/Semantics/JALR.cpp	/^void JALR_populateDispatchMap(DispatchMap &m)$/;"	f	signature:(DispatchMap &m)
JALR_populateDispatchMap	Arch/Mips/Semantics/JALR.h	/^void JALR_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
JAL_populateDispatchMap	Arch/Mips/Semantics/JAL.cpp	/^void JAL_populateDispatchMap(DispatchMap &m)$/;"	f	signature:(DispatchMap &m)
JAL_populateDispatchMap	Arch/Mips/Semantics/JAL.h	/^void JAL_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
JR_populateDispatchMap	Arch/Mips/Semantics/JR.cpp	/^void JR_populateDispatchMap(DispatchMap &m)$/;"	f	signature:(DispatchMap &m)
JR_populateDispatchMap	Arch/Mips/Semantics/JR.h	/^void JR_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
Jcc_populateDispatchMap	Arch/X86/Semantics/Jcc.cpp	/^void Jcc_populateDispatchMap(DispatchMap &m) {$/;"	f	signature:(DispatchMap &m)
Jcc_populateDispatchMap	Arch/X86/Semantics/Jcc.h	/^void Jcc_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
JumpIndexTable	cfgToLLVM/JumpTables.h	/^  JumpIndexTable(const std::vector<uint8_t> &table, int entry)$/;"	f	class:JumpIndexTable	access:public	signature:(const std::vector<uint8_t> &table, int entry)
JumpIndexTable	cfgToLLVM/JumpTables.h	/^class JumpIndexTable : public Table<uint8_t> {$/;"	c	inherits:Table
JumpIndexTable::JumpIndexTable	cfgToLLVM/JumpTables.h	/^  JumpIndexTable(const std::vector<uint8_t> &table, int entry)$/;"	f	class:JumpIndexTable	access:public	signature:(const std::vector<uint8_t> &table, int entry)
JumpIndexTable::getJumpIndexTable	cfgToLLVM/JumpTables.h	/^  virtual const std::vector<uint8_t> &getJumpIndexTable(void) const {$/;"	f	class:JumpIndexTable	access:public	signature:(void) const
JumpIndexTable::getJumpIndexTable	cfgToLLVM/JumpTables.h	/^  virtual std::vector<uint8_t> &getJumpIndexTable(void) {$/;"	f	class:JumpIndexTable	access:public	signature:(void)
JumpIndexTable::~JumpIndexTable	cfgToLLVM/JumpTables.h	/^  virtual ~JumpIndexTable() {}$/;"	f	class:JumpIndexTable	access:public	signature:()
JumpIndexTablePtr	CFG/CFG.h	/^typedef JumpIndexTable *JumpIndexTablePtr;$/;"	t
JumpIndexTablePtr	cfgToLLVM/JumpTables.h	/^typedef JumpIndexTable *JumpIndexTablePtr;$/;"	t
LDOUBLE	Arch/X86/Runtime/State.h	/^typedef long double LDOUBLE;$/;"	t
LDOUBLE	Arch/X86/Runtime/State.h	/^typedef union { double d; char pad[16];} PACKED LDOUBLE;$/;"	t	typeref:union:__anon5
LUi_populateDispatchMap	Arch/Mips/Semantics/LUi.cpp	/^void LUi_populateDispatchMap(DispatchMap &m)$/;"	f	signature:(DispatchMap &m)
LUi_populateDispatchMap	Arch/Mips/Semantics/LUi.h	/^void LUi_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
LW_populateDispatchMap	Arch/Mips/Semantics/LW.cpp	/^void LW_populateDispatchMap(DispatchMap &m)$/;"	f	signature:(DispatchMap &m)
LW_populateDispatchMap	Arch/Mips/Semantics/LW.h	/^void LW_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
LiftBlockIntoFunction	BC/Lift.cpp	/^static bool LiftBlockIntoFunction(TranslationContext &ctx) {$/;"	f	file:	signature:(TranslationContext &ctx)
LiftCodeIntoModule	BC/Lift.cpp	/^bool LiftCodeIntoModule(NativeModulePtr natMod, llvm::Module *M) {$/;"	f	signature:(NativeModulePtr natMod, llvm::Module *M)
LiftCodeIntoModule	BC/Lift.h	/^bool LiftCodeIntoModule(NativeModulePtr, llvm::Module *);$/;"	p	signature:(NativeModulePtr, llvm::Module *)
LiftFunctionsIntoModule	BC/Lift.cpp	/^static bool LiftFunctionsIntoModule(NativeModulePtr natMod, llvm::Module *M) {$/;"	f	file:	signature:(NativeModulePtr natMod, llvm::Module *M)
LiftInstIntoBlock	BC/Lift.cpp	/^static InstTransResult LiftInstIntoBlock(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block, bool doAnnotation)
LiftInstIntoBlockImpl	BC/Lift.cpp	/^static InstTransResult LiftInstIntoBlockImpl(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
LiftedFunctionType	BC/Util.cpp	/^llvm::FunctionType *LiftedFunctionType(void) {$/;"	f	signature:(void)
LiftedFunctionType	BC/Util.h	/^llvm::FunctionType *LiftedFunctionType(void);$/;"	p	signature:(void)
LinuxAddPushJumpStub	Arch/Arch.cpp	/^static void LinuxAddPushJumpStub(llvm::Module *M, llvm::Function *F,$/;"	f	file:	signature:(llvm::Module *M, llvm::Function *F, llvm::Function *W, const char *stub_handler)
ListArchSupportedInstructions	Arch/Arch.cpp	/^bool ListArchSupportedInstructions(const std::string &triple, llvm::raw_ostream &s, bool ListSupported, bool ListUnsupported) {$/;"	f	signature:(const std::string &triple, llvm::raw_ostream &s, bool ListSupported, bool ListUnsupported)
ListArchSupportedInstructions	Arch/Arch.h	/^bool ListArchSupportedInstructions(const std::string &triple, llvm::raw_ostream &s, bool ListSupported, bool ListUnsupported);$/;"	p	signature:(const std::string &triple, llvm::raw_ostream &s, bool ListSupported, bool ListUnsupported)
M	Arch/Dispatch.h	/^  llvm::Module *M;$/;"	m	struct:TranslationContext	access:public
MAKEWORD	Arch/X86/Semantics/fpu.cpp	68;"	d	file:
MAKE_FOPCODE	Arch/X86/Semantics/fpu.cpp	69;"	d	file:
MCSEMA_BC_LIFT_H_	BC/Lift.h	31;"	d
MCSEMA_BC_UTIL_H_	BC/Util.h	32;"	d
MCSEMA_CFG_EXTERNALS_H_	CFG/Externals.h	30;"	d
MCSJumpTable	cfgToLLVM/JumpTables.h	/^  MCSJumpTable(const std::vector<VA> &table, int entry, VA data_offset)$/;"	f	class:MCSJumpTable	access:public	signature:(const std::vector<VA> &table, int entry, VA data_offset)
MCSJumpTable	cfgToLLVM/JumpTables.h	/^class MCSJumpTable : public Table<VA> {$/;"	c	inherits:Table
MCSJumpTable::MCSJumpTable	cfgToLLVM/JumpTables.h	/^  MCSJumpTable(const std::vector<VA> &table, int entry, VA data_offset)$/;"	f	class:MCSJumpTable	access:public	signature:(const std::vector<VA> &table, int entry, VA data_offset)
MCSJumpTable::getJumpTable	cfgToLLVM/JumpTables.h	/^  virtual const std::vector<VA> &getJumpTable(void) const {$/;"	f	class:MCSJumpTable	access:public	signature:(void) const
MCSJumpTable::getJumpTable	cfgToLLVM/JumpTables.h	/^  virtual std::vector<VA> &getJumpTable(void) {$/;"	f	class:MCSJumpTable	access:public	signature:(void)
MCSJumpTable::getOffsetFromData	cfgToLLVM/JumpTables.h	/^  virtual VA getOffsetFromData(void) const {$/;"	f	class:MCSJumpTable	access:public	signature:(void) const
MCSJumpTable::m_offset_from_data	cfgToLLVM/JumpTables.h	/^  VA m_offset_from_data;$/;"	m	class:MCSJumpTable	access:protected
MCSJumpTable::~MCSJumpTable	cfgToLLVM/JumpTables.h	/^  virtual ~MCSJumpTable(void) {}$/;"	f	class:MCSJumpTable	access:public	signature:(void)
MCSJumpTablePtr	CFG/CFG.h	/^typedef MCSJumpTable *MCSJumpTablePtr;$/;"	t
MCSJumpTablePtr	cfgToLLVM/JumpTables.h	/^typedef MCSJumpTable *MCSJumpTablePtr;$/;"	t
MCSOffsetTable	cfgToLLVM/JumpTables.h	/^  MCSOffsetTable(const std::vector<std::pair<VA, VA>> &table,$/;"	f	class:MCSOffsetTable	access:public	signature:(const std::vector<std::pair<VA, VA>> &table, int entry, VA start)
MCSOffsetTable	cfgToLLVM/JumpTables.h	/^class MCSOffsetTable : public Table<std::pair<VA, VA>> {$/;"	c	inherits:Table
MCSOffsetTable::MCSOffsetTable	cfgToLLVM/JumpTables.h	/^  MCSOffsetTable(const std::vector<std::pair<VA, VA>> &table,$/;"	f	class:MCSOffsetTable	access:public	signature:(const std::vector<std::pair<VA, VA>> &table, int entry, VA start)
MCSOffsetTable::getStartAddr	cfgToLLVM/JumpTables.h	/^  virtual VA getStartAddr(void) const {$/;"	f	class:MCSOffsetTable	access:public	signature:(void) const
MCSOffsetTable::m_start_addr	cfgToLLVM/JumpTables.h	/^  VA m_start_addr;$/;"	m	class:MCSOffsetTable	access:protected
MCSOffsetTable::~MCSOffsetTable	cfgToLLVM/JumpTables.h	/^  virtual ~MCSOffsetTable(void) {}$/;"	f	class:MCSOffsetTable	access:public	signature:(void)
MCSOffsetTablePtr	CFG/CFG.h	/^typedef MCSOffsetTable *MCSOffsetTablePtr;$/;"	t
MC_SEMA_ARCH_ARCH_H_	Arch/Arch.h	4;"	d
MC_SEMA_ARCH_DISPATCH_H_	Arch/Dispatch.h	4;"	d
MC_SEMA_ARCH_REGISTER_H_	Arch/Register.h	4;"	d
MEMRef	CFG/CFG.h	/^    MEMRef$/;"	e	enum:NativeInst::CFGOpType
MEM_AS_DATA_REF	Arch/X86/Util.cpp	/^llvm::Value *MEM_AS_DATA_REF(llvm::BasicBlock *B, NativeModulePtr natM,$/;"	f	signature:(llvm::BasicBlock *B, NativeModulePtr natM, const llvm::MCInst &inst, NativeInstPtr ip, uint32_t which)
MEM_REFERENCE	BC/Util.h	220;"	d
MOVAndZextRM	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult MOVAndZextRM(NativeInstPtr ip, llvm::BasicBlock *& block,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *& block, const llvm::MCOperand &dst, llvm::Value *mem_val)
MOVAndZextRR	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult MOVAndZextRR(llvm::BasicBlock *& block,$/;"	f	file:	signature:(llvm::BasicBlock *& block, const llvm::MCOperand &dst, const llvm::MCOperand &src)
MOVAndZextRV	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult MOVAndZextRV(llvm::BasicBlock *& block,$/;"	f	file:	signature:(llvm::BasicBlock *& block, const llvm::MCOperand &dst, llvm::Value *src)
MOV_populateDispatchMap	Arch/X86/Semantics/MOV.cpp	/^void MOV_populateDispatchMap(DispatchMap &m) {$/;"	f	signature:(DispatchMap &m)
MOV_populateDispatchMap	Arch/X86/Semantics/MOV.h	/^void MOV_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
MULDIV_populateDispatchMap	Arch/X86/Semantics/MULDIV.cpp	/^void MULDIV_populateDispatchMap(DispatchMap &m) {$/;"	f	signature:(DispatchMap &m)
MULDIV_populateDispatchMap	Arch/X86/Semantics/MULDIV.h	/^void MULDIV_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
M_FLDLG2	Arch/X86/Semantics/fpu.cpp	64;"	d	file:
M_LN2l	Arch/X86/Semantics/fpu.cpp	59;"	d	file:
M_LOG10El	Arch/X86/Semantics/fpu.cpp	61;"	d	file:
M_LOG2El	Arch/X86/Semantics/fpu.cpp	60;"	d	file:
M_PIl	Arch/X86/Semantics/fpu.cpp	58;"	d	file:
M_READ	BC/Util.h	/^inline static llvm::Value *M_READ(NativeInstPtr ip, llvm::BasicBlock *b,$/;"	f	signature:(NativeInstPtr ip, llvm::BasicBlock *b, llvm::Value *addr)
M_READ_0	BC/Util.h	/^inline static llvm::Value *M_READ_0(llvm::BasicBlock *b, llvm::Value *addr) {$/;"	f	signature:(llvm::BasicBlock *b, llvm::Value *addr)
M_WRITE	BC/Util.h	/^inline static void M_WRITE(NativeInstPtr ip, llvm::BasicBlock *b,$/;"	f	signature:(NativeInstPtr ip, llvm::BasicBlock *b, llvm::Value *addr, llvm::Value *data)
M_WRITE_0	BC/Util.h	/^inline static void M_WRITE_0(llvm::BasicBlock *b, llvm::Value *addr,$/;"	f	signature:(llvm::BasicBlock *b, llvm::Value *addr, llvm::Value *data)
M_WRITE_T	BC/Util.cpp	/^void M_WRITE_T(NativeInstPtr ip, llvm::BasicBlock *b, llvm::Value *addr,$/;"	f	signature:(NativeInstPtr ip, llvm::BasicBlock *b, llvm::Value *addr, llvm::Value *data, llvm::Type *ptrtype)
M_WRITE_T	BC/Util.h	/^void M_WRITE_T(NativeInstPtr ip, llvm::BasicBlock *b, llvm::Value *addr,$/;"	p	signature:(NativeInstPtr ip, llvm::BasicBlock *b, llvm::Value *addr, llvm::Value *data, llvm::Type *ptrtype)
McsemaCall	CFG/Externals.h	/^    McsemaCall$/;"	e	enum:ExternalCodeRef::CallingConvention
Mips	Arch/Arch.h	/^namespace Mips$/;"	n	namespace:llvm
MipsAllocRegisterVars	Arch/Arch.cpp	/^void MipsAllocRegisterVars(llvm::BasicBlock *);$/;"	p	file:	signature:(llvm::BasicBlock *)
MipsAllocRegisterVars	Arch/Mips/Register.cpp	/^void MipsAllocRegisterVars(llvm::BasicBlock *b) {$/;"	f	signature:(llvm::BasicBlock *b)
MipsGetOrCreateRegStateTracer	Arch/Arch.cpp	/^llvm::Function *MipsGetOrCreateRegStateTracer(llvm::Module *);$/;"	p	file:	signature:(llvm::Module *)
MipsGetOrCreateRegStateTracer	Arch/Mips/Register.cpp	/^llvm::Function *MipsGetOrCreateRegStateTracer(llvm::Module *M) {$/;"	f	signature:(llvm::Module *M)
MipsInitInstructionDispatch	Arch/Arch.cpp	/^void MipsInitInstructionDispatch(DispatchMap &dispatcher);$/;"	p	file:	signature:(DispatchMap &dispatcher)
MipsInitInstructionDispatch	Arch/Mips/Dispatch.cpp	/^void MipsInitInstructionDispatch(DispatchMap &dispatcher) {$/;"	f	signature:(DispatchMap &dispatcher)
MipsInitRegisterState	Arch/Arch.cpp	/^void MipsInitRegisterState(llvm::LLVMContext *);$/;"	p	file:	signature:(llvm::LLVMContext *)
MipsInitRegisterState	Arch/Mips/Register.cpp	/^void MipsInitRegisterState(llvm::LLVMContext *context) {$/;"	f	signature:(llvm::LLVMContext *context)
MipsLiftInstruction	Arch/Arch.cpp	/^InstTransResult MipsLiftInstruction($/;"	p	file:	signature:( TranslationContext &, llvm::BasicBlock *&, InstructionLifter *)
MipsLiftInstruction	Arch/Mips/Lift.cpp	/^InstTransResult MipsLiftInstruction($/;"	f	signature:( TranslationContext &ctx, llvm::BasicBlock *&block, InstructionLifter *lifter)
MipsRegStateStructType	Arch/Arch.cpp	/^llvm::StructType *MipsRegStateStructType(void);$/;"	p	file:	signature:(void)
MipsRegStateStructType	Arch/Mips/Register.cpp	/^llvm::StructType *MipsRegStateStructType(void) {$/;"	f	signature:(void)
MipsRegisterName	Arch/Arch.cpp	/^const std::string &MipsRegisterName(MCSemaRegs reg);$/;"	p	file:	signature:(MCSemaRegs reg)
MipsRegisterName	Arch/Mips/Register.cpp	/^const std::string &MipsRegisterName(MCSemaRegs reg) {$/;"	f	signature:(MCSemaRegs reg)
MipsRegisterNumber	Arch/Arch.cpp	/^MCSemaRegs MipsRegisterNumber(const std::string &name);$/;"	p	file:	signature:(const std::string &name)
MipsRegisterNumber	Arch/Mips/Register.cpp	/^MCSemaRegs MipsRegisterNumber(const std::string &name) {$/;"	f	signature:(const std::string &name)
MipsRegisterOffset	Arch/Arch.cpp	/^unsigned MipsRegisterOffset(MCSemaRegs reg);$/;"	p	file:	signature:(MCSemaRegs reg)
MipsRegisterOffset	Arch/Mips/Register.cpp	/^unsigned MipsRegisterOffset(MCSemaRegs reg) {$/;"	f	signature:(MCSemaRegs reg)
MipsRegisterParent	Arch/Arch.cpp	/^MCSemaRegs MipsRegisterParent(MCSemaRegs reg);$/;"	p	file:	signature:(MCSemaRegs reg)
MipsRegisterParent	Arch/Mips/Register.cpp	/^MCSemaRegs MipsRegisterParent(MCSemaRegs reg) {$/;"	f	signature:(MCSemaRegs reg)
MipsRegisterSize	Arch/Arch.cpp	/^unsigned MipsRegisterSize(MCSemaRegs reg);$/;"	p	file:	signature:(MCSemaRegs reg)
MipsRegisterSize	Arch/Mips/Register.cpp	/^unsigned MipsRegisterSize(MCSemaRegs reg) {$/;"	f	signature:(MCSemaRegs reg)
Misc_populateDispatchMap	Arch/X86/Semantics/Misc.cpp	/^void Misc_populateDispatchMap(DispatchMap &m) {$/;"	f	signature:(DispatchMap &m)
Misc_populateDispatchMap	Arch/X86/Semantics/Misc.h	/^void Misc_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
ModuleInputFormat	CFG/CFG.h	/^enum ModuleInputFormat {$/;"	g
NASSERT	Arch/Mips/Semantics/BEQ.cpp	50;"	d	file:
NASSERT	Arch/Mips/Semantics/BNE.cpp	51;"	d	file:
NASSERT	Arch/X86/Semantics/CMOV.cpp	56;"	d	file:
NASSERT	Arch/X86/Semantics/CMPTEST.cpp	55;"	d	file:
NASSERT	Arch/X86/Semantics/Exchanges.cpp	55;"	d	file:
NASSERT	Arch/X86/Semantics/INCDECNEG.cpp	55;"	d	file:
NASSERT	Arch/X86/Semantics/Jcc.cpp	57;"	d	file:
NASSERT	Arch/X86/Semantics/MOV.cpp	58;"	d	file:
NASSERT	Arch/X86/Semantics/MULDIV.cpp	54;"	d	file:
NASSERT	Arch/X86/Semantics/SSE.cpp	57;"	d	file:
NASSERT	Arch/X86/Semantics/SUB.cpp	55;"	d	file:
NASSERT	Arch/X86/Semantics/Stack.cpp	61;"	d	file:
NASSERT	Arch/X86/Semantics/fpu.cpp	66;"	d	file:
NE	Arch/X86/Semantics/CMOV.cpp	/^static Value *NE(BasicBlock *b, MCSemaRegs f1, MCSemaRegs f2) {$/;"	f	file:	signature:(BasicBlock *b, MCSemaRegs f1, MCSemaRegs f2)
NIY	cfgToLLVM/TransExcn.h	47;"	d
NOT	Arch/X86/Semantics/CMOV.cpp	/^static Value *NOT(BasicBlock *b, MCSemaRegs flag) {$/;"	f	file:	signature:(BasicBlock *b, MCSemaRegs flag)
NO_BASE	CFG/CFG.h	/^  static const uint64_t NO_BASE = (uint64_t) ( -1);$/;"	m	class:DataSection	access:public
NUM_FPU_REGS	Arch/X86/Semantics/fpu.h	32;"	d
NativeBlock	CFG/CFG.cpp	/^NativeBlock::NativeBlock(VA b)$/;"	f	class:NativeBlock	signature:(VA b)
NativeBlock	CFG/CFG.h	/^  NativeBlock(void) = delete;$/;"	p	class:NativeBlock	access:private	signature:(void)
NativeBlock	CFG/CFG.h	/^  explicit NativeBlock(VA);$/;"	p	class:NativeBlock	access:public	signature:(VA)
NativeBlock	CFG/CFG.h	/^class NativeBlock {$/;"	c
NativeBlock::NativeBlock	CFG/CFG.cpp	/^NativeBlock::NativeBlock(VA b)$/;"	f	class:NativeBlock	signature:(VA b)
NativeBlock::NativeBlock	CFG/CFG.h	/^  NativeBlock(void) = delete;$/;"	p	class:NativeBlock	access:private	signature:(void)
NativeBlock::NativeBlock	CFG/CFG.h	/^  explicit NativeBlock(VA);$/;"	p	class:NativeBlock	access:public	signature:(VA)
NativeBlock::add_follow	CFG/CFG.cpp	/^void NativeBlock::add_follow(VA f) {$/;"	f	class:NativeBlock	signature:(VA f)
NativeBlock::add_follow	CFG/CFG.h	/^  void add_follow(VA f);$/;"	p	class:NativeBlock	access:public	signature:(VA f)
NativeBlock::add_inst	CFG/CFG.cpp	/^void NativeBlock::add_inst(NativeInstPtr p) {$/;"	f	class:NativeBlock	signature:(NativeInstPtr p)
NativeBlock::add_inst	CFG/CFG.h	/^  void add_inst(NativeInstPtr);$/;"	p	class:NativeBlock	access:public	signature:(NativeInstPtr)
NativeBlock::baseAddr	CFG/CFG.h	/^  VA baseAddr;$/;"	m	class:NativeBlock	access:private
NativeBlock::follows	CFG/CFG.h	/^  std::list<VA> follows;$/;"	m	class:NativeBlock	access:private
NativeBlock::get_base	CFG/CFG.cpp	/^VA NativeBlock::get_base(void) {$/;"	f	class:NativeBlock	signature:(void)
NativeBlock::get_base	CFG/CFG.h	/^  VA get_base(void);$/;"	p	class:NativeBlock	access:public	signature:(void)
NativeBlock::get_follows	CFG/CFG.cpp	/^std::list<VA> &NativeBlock::get_follows(void) {$/;"	f	class:NativeBlock	signature:(void)
NativeBlock::get_follows	CFG/CFG.h	/^  std::list<VA> &get_follows(void);$/;"	p	class:NativeBlock	access:public	signature:(void)
NativeBlock::get_insts	CFG/CFG.cpp	/^const std::list<NativeInstPtr> &NativeBlock::get_insts(void) {$/;"	f	class:NativeBlock	signature:(void)
NativeBlock::get_insts	CFG/CFG.h	/^  const std::list<NativeInstPtr> &get_insts(void);$/;"	p	class:NativeBlock	access:public	signature:(void)
NativeBlock::get_name	CFG/CFG.cpp	/^std::string NativeBlock::get_name(void) {$/;"	f	class:NativeBlock	signature:(void)
NativeBlock::get_name	CFG/CFG.h	/^  std::string get_name(void);$/;"	p	class:NativeBlock	access:public	signature:(void)
NativeBlock::instructions	CFG/CFG.h	/^  std::list<NativeInstPtr> instructions;$/;"	m	class:NativeBlock	access:private
NativeBlockPtr	CFG/CFG.h	/^typedef NativeBlock *NativeBlockPtr;$/;"	t
NativeEntrySymbol	CFG/CFG.cpp	/^NativeEntrySymbol::NativeEntrySymbol(VA addr_)$/;"	f	class:NativeEntrySymbol	signature:(VA addr_)
NativeEntrySymbol	CFG/CFG.cpp	/^NativeEntrySymbol::NativeEntrySymbol(const std::string &name_, VA addr_)$/;"	f	class:NativeEntrySymbol	signature:(const std::string &name_, VA addr_)
NativeEntrySymbol	CFG/CFG.h	/^  NativeEntrySymbol(const std::string &name_, VA addr_);$/;"	p	class:NativeEntrySymbol	access:public	signature:(const std::string &name_, VA addr_)
NativeEntrySymbol	CFG/CFG.h	/^  NativeEntrySymbol(void) = delete;$/;"	p	class:NativeEntrySymbol	access:private	signature:(void)
NativeEntrySymbol	CFG/CFG.h	/^  explicit NativeEntrySymbol(VA addr_);$/;"	p	class:NativeEntrySymbol	access:public	signature:(VA addr_)
NativeEntrySymbol	CFG/CFG.h	/^class NativeEntrySymbol {$/;"	c
NativeEntrySymbol::NativeEntrySymbol	CFG/CFG.cpp	/^NativeEntrySymbol::NativeEntrySymbol(VA addr_)$/;"	f	class:NativeEntrySymbol	signature:(VA addr_)
NativeEntrySymbol::NativeEntrySymbol	CFG/CFG.cpp	/^NativeEntrySymbol::NativeEntrySymbol(const std::string &name_, VA addr_)$/;"	f	class:NativeEntrySymbol	signature:(const std::string &name_, VA addr_)
NativeEntrySymbol::NativeEntrySymbol	CFG/CFG.h	/^  NativeEntrySymbol(const std::string &name_, VA addr_);$/;"	p	class:NativeEntrySymbol	access:public	signature:(const std::string &name_, VA addr_)
NativeEntrySymbol::NativeEntrySymbol	CFG/CFG.h	/^  NativeEntrySymbol(void) = delete;$/;"	p	class:NativeEntrySymbol	access:private	signature:(void)
NativeEntrySymbol::NativeEntrySymbol	CFG/CFG.h	/^  explicit NativeEntrySymbol(VA addr_);$/;"	p	class:NativeEntrySymbol	access:public	signature:(VA addr_)
NativeEntrySymbol::addr	CFG/CFG.h	/^  const VA addr;$/;"	m	class:NativeEntrySymbol	access:private
NativeEntrySymbol::calling_conv	CFG/CFG.h	/^  ExternalCodeRef::CallingConvention calling_conv;$/;"	m	class:NativeEntrySymbol	access:private
NativeEntrySymbol::doesReturn	CFG/CFG.cpp	/^bool NativeEntrySymbol::doesReturn(void) const {$/;"	f	class:NativeEntrySymbol	signature:(void) const
NativeEntrySymbol::doesReturn	CFG/CFG.h	/^  bool doesReturn(void) const;$/;"	p	class:NativeEntrySymbol	access:public	signature:(void) const
NativeEntrySymbol::does_return	CFG/CFG.h	/^  bool does_return;$/;"	m	class:NativeEntrySymbol	access:private
NativeEntrySymbol::getAddr	CFG/CFG.cpp	/^VA NativeEntrySymbol::getAddr(void) const {$/;"	f	class:NativeEntrySymbol	signature:(void) const
NativeEntrySymbol::getAddr	CFG/CFG.h	/^  VA getAddr(void) const;$/;"	p	class:NativeEntrySymbol	access:public	signature:(void) const
NativeEntrySymbol::getArgc	CFG/CFG.cpp	/^int NativeEntrySymbol::getArgc(void) const {$/;"	f	class:NativeEntrySymbol	signature:(void) const
NativeEntrySymbol::getArgc	CFG/CFG.h	/^  int getArgc(void) const;$/;"	p	class:NativeEntrySymbol	access:public	signature:(void) const
NativeEntrySymbol::getConv	CFG/CFG.cpp	/^ExternalCodeRef::CallingConvention NativeEntrySymbol::getConv(void) const {$/;"	f	class:NativeEntrySymbol	signature:(void) const
NativeEntrySymbol::getConv	CFG/CFG.h	/^  ExternalCodeRef::CallingConvention getConv(void) const;$/;"	p	class:NativeEntrySymbol	access:public	signature:(void) const
NativeEntrySymbol::getName	CFG/CFG.cpp	/^const std::string &NativeEntrySymbol::getName(void) const {$/;"	f	class:NativeEntrySymbol	signature:(void) const
NativeEntrySymbol::getName	CFG/CFG.h	/^  const std::string &getName(void) const;$/;"	p	class:NativeEntrySymbol	access:public	signature:(void) const
NativeEntrySymbol::hasExtra	CFG/CFG.cpp	/^bool NativeEntrySymbol::hasExtra(void) const {$/;"	f	class:NativeEntrySymbol	signature:(void) const
NativeEntrySymbol::hasExtra	CFG/CFG.h	/^  bool hasExtra(void) const;$/;"	p	class:NativeEntrySymbol	access:public	signature:(void) const
NativeEntrySymbol::has_extra	CFG/CFG.h	/^  bool has_extra;$/;"	m	class:NativeEntrySymbol	access:private
NativeEntrySymbol::name	CFG/CFG.h	/^  std::string name;$/;"	m	class:NativeEntrySymbol	access:private
NativeEntrySymbol::num_args	CFG/CFG.h	/^  int num_args;$/;"	m	class:NativeEntrySymbol	access:private
NativeEntrySymbol::setExtra	CFG/CFG.cpp	/^void NativeEntrySymbol::setExtra(int argc_, bool does_ret,$/;"	f	class:NativeEntrySymbol	signature:(int argc_, bool does_ret, ExternalCodeRef::CallingConvention conv)
NativeEntrySymbol::setExtra	CFG/CFG.h	/^  void setExtra(int argc_, bool does_ret,$/;"	p	class:NativeEntrySymbol	access:public	signature:(int argc_, bool does_ret, ExternalCodeRef::CallingConvention conv)
NativeFunction	CFG/CFG.h	/^  NativeFunction(VA b, const std::string &sym)$/;"	f	class:NativeFunction	access:public	signature:(VA b, const std::string &sym)
NativeFunction	CFG/CFG.h	/^  NativeFunction(void) = delete;$/;"	p	class:NativeFunction	access:private	signature:(void)
NativeFunction	CFG/CFG.h	/^  explicit NativeFunction(VA b)$/;"	f	class:NativeFunction	access:public	signature:(VA b)
NativeFunction	CFG/CFG.h	/^class NativeFunction {$/;"	c
NativeFunction::NativeFunction	CFG/CFG.h	/^  NativeFunction(VA b, const std::string &sym)$/;"	f	class:NativeFunction	access:public	signature:(VA b, const std::string &sym)
NativeFunction::NativeFunction	CFG/CFG.h	/^  NativeFunction(void) = delete;$/;"	p	class:NativeFunction	access:private	signature:(void)
NativeFunction::NativeFunction	CFG/CFG.h	/^  explicit NativeFunction(VA b)$/;"	f	class:NativeFunction	access:public	signature:(VA b)
NativeFunction::add_block	CFG/CFG.cpp	/^void NativeFunction::add_block(NativeBlockPtr b) {$/;"	f	class:NativeFunction	signature:(NativeBlockPtr b)
NativeFunction::add_block	CFG/CFG.h	/^  void add_block(NativeBlockPtr);$/;"	p	class:NativeFunction	access:public	signature:(NativeBlockPtr)
NativeFunction::block_from_base	CFG/CFG.cpp	/^NativeBlockPtr NativeFunction::block_from_base(VA base) {$/;"	f	class:NativeFunction	signature:(VA base)
NativeFunction::block_from_base	CFG/CFG.h	/^  NativeBlockPtr block_from_base(VA);$/;"	p	class:NativeFunction	access:public	signature:(VA)
NativeFunction::blocks	CFG/CFG.h	/^  std::map<VA, NativeBlockPtr> blocks;$/;"	m	class:NativeFunction	access:private
NativeFunction::funcEntryVA	CFG/CFG.h	/^  VA funcEntryVA;$/;"	m	class:NativeFunction	access:private
NativeFunction::funcSymName	CFG/CFG.h	/^  std::string funcSymName;$/;"	m	class:NativeFunction	access:private
NativeFunction::get_blocks	CFG/CFG.cpp	/^const std::map<VA, NativeBlockPtr> &NativeFunction::get_blocks(void) const {$/;"	f	class:NativeFunction	signature:(void) const
NativeFunction::get_blocks	CFG/CFG.h	/^  const std::map<VA, NativeBlockPtr> &get_blocks(void) const;$/;"	p	class:NativeFunction	access:public	signature:(void) const
NativeFunction::get_name	CFG/CFG.cpp	/^std::string NativeFunction::get_name(void) {$/;"	f	class:NativeFunction	signature:(void)
NativeFunction::get_name	CFG/CFG.h	/^  std::string get_name(void);$/;"	p	class:NativeFunction	access:public	signature:(void)
NativeFunction::get_start	CFG/CFG.cpp	/^VA NativeFunction::get_start(void) {$/;"	f	class:NativeFunction	signature:(void)
NativeFunction::get_start	CFG/CFG.h	/^  VA get_start(void);$/;"	p	class:NativeFunction	access:public	signature:(void)
NativeFunction::get_symbol_name	CFG/CFG.cpp	/^const std::string &NativeFunction::get_symbol_name(void) {$/;"	f	class:NativeFunction	signature:(void)
NativeFunction::get_symbol_name	CFG/CFG.h	/^  const std::string &get_symbol_name(void);$/;"	p	class:NativeFunction	access:public	signature:(void)
NativeFunction::num_blocks	CFG/CFG.cpp	/^uint64_t NativeFunction::num_blocks(void) {$/;"	f	class:NativeFunction	signature:(void)
NativeFunction::num_blocks	CFG/CFG.h	/^  uint64_t num_blocks(void);$/;"	p	class:NativeFunction	access:public	signature:(void)
NativeFunctionPtr	CFG/CFG.h	/^typedef NativeFunction *NativeFunctionPtr;$/;"	t
NativeInst	CFG/CFG.cpp	/^NativeInst::NativeInst(VA v, uint8_t l, const llvm::MCInst &inst, Prefix k)$/;"	f	class:NativeInst	signature:(VA v, uint8_t l, const llvm::MCInst &inst, Prefix k)
NativeInst	CFG/CFG.h	/^  NativeInst(VA v, uint8_t l, const llvm::MCInst &inst, Prefix k);$/;"	p	class:NativeInst	access:public	signature:(VA v, uint8_t l, const llvm::MCInst &inst, Prefix k)
NativeInst	CFG/CFG.h	/^class NativeInst {$/;"	c
NativeInst::CFGCodeRef	CFG/CFG.h	/^    CFGCodeRef,$/;"	e	enum:NativeInst::CFGRefType
NativeInst::CFGDataRef	CFG/CFG.h	/^    CFGDataRef$/;"	e	enum:NativeInst::CFGRefType
NativeInst::CFGOpType	CFG/CFG.h	/^  enum CFGOpType {$/;"	g	class:NativeInst	access:public
NativeInst::CFGRefType	CFG/CFG.h	/^  enum CFGRefType {$/;"	g	class:NativeInst	access:public
NativeInst::FSPrefix	CFG/CFG.h	/^    FSPrefix,$/;"	e	enum:NativeInst::Prefix
NativeInst::GSPrefix	CFG/CFG.h	/^    GSPrefix$/;"	e	enum:NativeInst::Prefix
NativeInst::IMMRef	CFG/CFG.h	/^    IMMRef,$/;"	e	enum:NativeInst::CFGOpType
NativeInst::MEMRef	CFG/CFG.h	/^    MEMRef$/;"	e	enum:NativeInst::CFGOpType
NativeInst::NativeInst	CFG/CFG.cpp	/^NativeInst::NativeInst(VA v, uint8_t l, const llvm::MCInst &inst, Prefix k)$/;"	f	class:NativeInst	signature:(VA v, uint8_t l, const llvm::MCInst &inst, Prefix k)
NativeInst::NativeInst	CFG/CFG.h	/^  NativeInst(VA v, uint8_t l, const llvm::MCInst &inst, Prefix k);$/;"	p	class:NativeInst	access:public	signature:(VA v, uint8_t l, const llvm::MCInst &inst, Prefix k)
NativeInst::NoPrefix	CFG/CFG.h	/^    NoPrefix,$/;"	e	enum:NativeInst::Prefix
NativeInst::Prefix	CFG/CFG.h	/^  enum Prefix {$/;"	g	class:NativeInst	access:public
NativeInst::RepNePrefix	CFG/CFG.h	/^    RepNePrefix,$/;"	e	enum:NativeInst::Prefix
NativeInst::RepPrefix	CFG/CFG.h	/^    RepPrefix,$/;"	e	enum:NativeInst::Prefix
NativeInst::arch	CFG/CFG.h	/^  uint32_t arch;$/;"	m	class:NativeInst	access:private
NativeInst::decoded_inst	CFG/CFG.h	/^  llvm::MCInst decoded_inst;$/;"	m	class:NativeInst	access:private
NativeInst::extCallTgt	CFG/CFG.h	/^  ExternalCodeRefPtr extCallTgt;$/;"	m	class:NativeInst	access:private
NativeInst::extDataRef	CFG/CFG.h	/^  ExternalDataRefPtr extDataRef;$/;"	m	class:NativeInst	access:private
NativeInst::ext_call_target	CFG/CFG.h	/^  bool ext_call_target;$/;"	m	class:NativeInst	access:private
NativeInst::ext_data_ref	CFG/CFG.h	/^  bool ext_data_ref;$/;"	m	class:NativeInst	access:private
NativeInst::get_addr_space	CFG/CFG.cpp	/^unsigned int NativeInst::get_addr_space(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::get_addr_space	CFG/CFG.h	/^  unsigned int get_addr_space(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::get_call_tgt	CFG/CFG.cpp	/^VA NativeInst::get_call_tgt(int index) const {$/;"	f	class:NativeInst	signature:(int index) const
NativeInst::get_call_tgt	CFG/CFG.h	/^  VA get_call_tgt(int index) const;$/;"	p	class:NativeInst	access:public	signature:(int index) const
NativeInst::get_ext_call_target	CFG/CFG.cpp	/^ExternalCodeRefPtr NativeInst::get_ext_call_target(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::get_ext_call_target	CFG/CFG.h	/^  ExternalCodeRefPtr get_ext_call_target(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::get_ext_data_ref	CFG/CFG.cpp	/^ExternalDataRefPtr NativeInst::get_ext_data_ref(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::get_ext_data_ref	CFG/CFG.h	/^  ExternalDataRefPtr get_ext_data_ref(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::get_fa	CFG/CFG.cpp	/^VA NativeInst::get_fa(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::get_fa	CFG/CFG.h	/^  VA get_fa(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::get_inst	CFG/CFG.cpp	/^llvm::MCInst &NativeInst::get_inst(void) {$/;"	f	class:NativeInst	signature:(void)
NativeInst::get_inst	CFG/CFG.h	/^  llvm::MCInst &get_inst(void);$/;"	p	class:NativeInst	access:public	signature:(void)
NativeInst::get_is_call_external	CFG/CFG.cpp	/^bool NativeInst::get_is_call_external(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::get_is_call_external	CFG/CFG.h	/^  bool get_is_call_external(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::get_jump_index_table	CFG/CFG.cpp	/^JumpIndexTablePtr NativeInst::get_jump_index_table(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::get_jump_index_table	CFG/CFG.h	/^  JumpIndexTablePtr get_jump_index_table(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::get_jump_table	CFG/CFG.cpp	/^MCSJumpTablePtr NativeInst::get_jump_table(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::get_jump_table	CFG/CFG.h	/^  MCSJumpTablePtr get_jump_table(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::get_len	CFG/CFG.cpp	/^uint8_t NativeInst::get_len(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::get_len	CFG/CFG.h	/^  uint8_t get_len(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::get_loc	CFG/CFG.cpp	/^VA NativeInst::get_loc(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::get_loc	CFG/CFG.h	/^  VA get_loc(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::get_opcode	CFG/CFG.cpp	/^unsigned int NativeInst::get_opcode(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::get_opcode	CFG/CFG.h	/^  unsigned int get_opcode(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::get_prefix	CFG/CFG.cpp	/^NativeInst::Prefix NativeInst::get_prefix(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::get_prefix	CFG/CFG.h	/^  Prefix get_prefix(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::get_ref_type	CFG/CFG.cpp	/^NativeInst::CFGRefType NativeInst::get_ref_type(CFGOpType op) const {$/;"	f	class:NativeInst	signature:(CFGOpType op) const
NativeInst::get_ref_type	CFG/CFG.h	/^  CFGRefType get_ref_type(CFGOpType op) const;$/;"	p	class:NativeInst	access:public	signature:(CFGOpType op) const
NativeInst::get_reference	CFG/CFG.cpp	/^uint64_t NativeInst::get_reference(CFGOpType op) const {$/;"	f	class:NativeInst	signature:(CFGOpType op) const
NativeInst::get_reference	CFG/CFG.h	/^  uint64_t get_reference(CFGOpType op) const;$/;"	p	class:NativeInst	access:public	signature:(CFGOpType op) const
NativeInst::get_reloc_offset	CFG/CFG.cpp	/^uint8_t NativeInst::get_reloc_offset(CFGOpType op) const {$/;"	f	class:NativeInst	signature:(CFGOpType op) const
NativeInst::get_reloc_offset	CFG/CFG.h	/^  uint8_t get_reloc_offset(CFGOpType op) const;$/;"	p	class:NativeInst	access:public	signature:(CFGOpType op) const
NativeInst::get_rip_relative	CFG/CFG.cpp	/^VA NativeInst::get_rip_relative(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::get_rip_relative	CFG/CFG.h	/^  VA get_rip_relative(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::get_system_call_number	CFG/CFG.cpp	/^int NativeInst::get_system_call_number(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::get_system_call_number	CFG/CFG.h	/^  int get_system_call_number(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::get_tr	CFG/CFG.cpp	/^VA NativeInst::get_tr(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::get_tr	CFG/CFG.h	/^  VA get_tr(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::hasRIP	CFG/CFG.h	/^  bool hasRIP;$/;"	m	class:NativeInst	access:private
NativeInst::has_call_tgt	CFG/CFG.cpp	/^bool NativeInst::has_call_tgt(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::has_call_tgt	CFG/CFG.h	/^  bool has_call_tgt(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::has_code_ref	CFG/CFG.cpp	/^bool NativeInst::has_code_ref(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::has_code_ref	CFG/CFG.h	/^  bool has_code_ref(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::has_ext_call_target	CFG/CFG.cpp	/^bool NativeInst::has_ext_call_target(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::has_ext_call_target	CFG/CFG.h	/^  bool has_ext_call_target(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::has_ext_data_ref	CFG/CFG.cpp	/^bool NativeInst::has_ext_data_ref(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::has_ext_data_ref	CFG/CFG.h	/^  bool has_ext_data_ref(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::has_external_ref	CFG/CFG.cpp	/^bool NativeInst::has_external_ref(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::has_external_ref	CFG/CFG.h	/^  bool has_external_ref(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::has_imm_reference	CFG/CFG.h	/^  bool has_imm_reference;$/;"	m	class:NativeInst	access:public
NativeInst::has_jump_index_table	CFG/CFG.cpp	/^bool NativeInst::has_jump_index_table(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::has_jump_index_table	CFG/CFG.h	/^  bool has_jump_index_table(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::has_jump_table	CFG/CFG.cpp	/^bool NativeInst::has_jump_table(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::has_jump_table	CFG/CFG.h	/^  bool has_jump_table(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::has_local_noreturn	CFG/CFG.cpp	/^bool NativeInst::has_local_noreturn(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::has_local_noreturn	CFG/CFG.h	/^  bool has_local_noreturn(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::has_mem_reference	CFG/CFG.h	/^  bool has_mem_reference;$/;"	m	class:NativeInst	access:public
NativeInst::has_reference	CFG/CFG.cpp	/^bool NativeInst::has_reference(CFGOpType op) const {$/;"	f	class:NativeInst	signature:(CFGOpType op) const
NativeInst::has_reference	CFG/CFG.h	/^  bool has_reference(CFGOpType op) const;$/;"	p	class:NativeInst	access:public	signature:(CFGOpType op) const
NativeInst::has_rip_relative	CFG/CFG.cpp	/^bool NativeInst::has_rip_relative(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::has_rip_relative	CFG/CFG.h	/^  bool has_rip_relative(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::has_system_call_number	CFG/CFG.cpp	/^bool NativeInst::has_system_call_number(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::has_system_call_number	CFG/CFG.h	/^  bool has_system_call_number(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::imm_ref_type	CFG/CFG.h	/^  CFGRefType imm_ref_type;$/;"	m	class:NativeInst	access:private
NativeInst::imm_reference	CFG/CFG.h	/^  uint64_t imm_reference;$/;"	m	class:NativeInst	access:private
NativeInst::imm_reloc_offset	CFG/CFG.h	/^  uint64_t imm_reloc_offset;$/;"	m	class:NativeInst	access:private
NativeInst::is_call_external	CFG/CFG.h	/^  bool is_call_external;$/;"	m	class:NativeInst	access:private
NativeInst::is_terminator	CFG/CFG.h	/^  bool is_terminator;$/;"	m	class:NativeInst	access:private
NativeInst::jumpIndexTable	CFG/CFG.h	/^  JumpIndexTablePtr jumpIndexTable;$/;"	m	class:NativeInst	access:private
NativeInst::jumpTable	CFG/CFG.h	/^  MCSJumpTablePtr jumpTable;$/;"	m	class:NativeInst	access:private
NativeInst::jump_index_table	CFG/CFG.h	/^  bool jump_index_table;$/;"	m	class:NativeInst	access:private
NativeInst::jump_table	CFG/CFG.h	/^  bool jump_table;$/;"	m	class:NativeInst	access:private
NativeInst::len	CFG/CFG.h	/^  uint8_t len;$/;"	m	class:NativeInst	access:private
NativeInst::loc	CFG/CFG.h	/^  VA loc;$/;"	m	class:NativeInst	access:private
NativeInst::local_noreturn	CFG/CFG.h	/^  bool local_noreturn;$/;"	m	class:NativeInst	access:private
NativeInst::mem_ref_type	CFG/CFG.h	/^  CFGRefType mem_ref_type;$/;"	m	class:NativeInst	access:private
NativeInst::mem_reference	CFG/CFG.h	/^  uint64_t mem_reference;$/;"	m	class:NativeInst	access:private
NativeInst::mem_reloc_offset	CFG/CFG.h	/^  uint64_t mem_reloc_offset;$/;"	m	class:NativeInst	access:private
NativeInst::offset_table	CFG/CFG.h	/^  VA offset_table;$/;"	m	class:NativeInst	access:public
NativeInst::pfx	CFG/CFG.h	/^  Prefix pfx;$/;"	m	class:NativeInst	access:private
NativeInst::rip_target	CFG/CFG.h	/^  VA rip_target;$/;"	m	class:NativeInst	access:private
NativeInst::set_call_tgt	CFG/CFG.cpp	/^void NativeInst::set_call_tgt(VA addr) {$/;"	f	class:NativeInst	signature:(VA addr)
NativeInst::set_call_tgt	CFG/CFG.h	/^  void set_call_tgt(VA addr);$/;"	p	class:NativeInst	access:public	signature:(VA addr)
NativeInst::set_ext_call_target	CFG/CFG.cpp	/^void NativeInst::set_ext_call_target(ExternalCodeRefPtr t) {$/;"	f	class:NativeInst	signature:(ExternalCodeRefPtr t)
NativeInst::set_ext_call_target	CFG/CFG.h	/^  void set_ext_call_target(ExternalCodeRefPtr t);$/;"	p	class:NativeInst	access:public	signature:(ExternalCodeRefPtr t)
NativeInst::set_ext_data_ref	CFG/CFG.cpp	/^void NativeInst::set_ext_data_ref(ExternalDataRefPtr t) {$/;"	f	class:NativeInst	signature:(ExternalDataRefPtr t)
NativeInst::set_ext_data_ref	CFG/CFG.h	/^  void set_ext_data_ref(ExternalDataRefPtr t);$/;"	p	class:NativeInst	access:public	signature:(ExternalDataRefPtr t)
NativeInst::set_fa	CFG/CFG.cpp	/^void NativeInst::set_fa(VA a) {$/;"	f	class:NativeInst	signature:(VA a)
NativeInst::set_fa	CFG/CFG.h	/^  void set_fa(VA a);$/;"	p	class:NativeInst	access:public	signature:(VA a)
NativeInst::set_inst	CFG/CFG.cpp	/^void NativeInst::set_inst(const llvm::MCInst &i) {$/;"	f	class:NativeInst	signature:(const llvm::MCInst &i)
NativeInst::set_inst	CFG/CFG.h	/^  void set_inst(const llvm::MCInst &i);$/;"	p	class:NativeInst	access:public	signature:(const llvm::MCInst &i)
NativeInst::set_is_call_external	CFG/CFG.cpp	/^void NativeInst::set_is_call_external(void) {$/;"	f	class:NativeInst	signature:(void)
NativeInst::set_is_call_external	CFG/CFG.h	/^  void set_is_call_external(void);$/;"	p	class:NativeInst	access:public	signature:(void)
NativeInst::set_jump_index_table	CFG/CFG.cpp	/^void NativeInst::set_jump_index_table(JumpIndexTablePtr p) {$/;"	f	class:NativeInst	signature:(JumpIndexTablePtr p)
NativeInst::set_jump_index_table	CFG/CFG.h	/^  void set_jump_index_table(JumpIndexTablePtr p);$/;"	p	class:NativeInst	access:public	signature:(JumpIndexTablePtr p)
NativeInst::set_jump_table	CFG/CFG.cpp	/^void NativeInst::set_jump_table(MCSJumpTablePtr p) {$/;"	f	class:NativeInst	signature:(MCSJumpTablePtr p)
NativeInst::set_jump_table	CFG/CFG.h	/^  void set_jump_table(MCSJumpTablePtr p);$/;"	p	class:NativeInst	access:public	signature:(MCSJumpTablePtr p)
NativeInst::set_local_noreturn	CFG/CFG.cpp	/^void NativeInst::set_local_noreturn(void) {$/;"	f	class:NativeInst	signature:(void)
NativeInst::set_local_noreturn	CFG/CFG.h	/^  void set_local_noreturn(void);$/;"	p	class:NativeInst	access:public	signature:(void)
NativeInst::set_ref_reloc_type	CFG/CFG.cpp	/^void NativeInst::set_ref_reloc_type(CFGOpType op, uint64_t ref, uint64_t ro,$/;"	f	class:NativeInst	signature:(CFGOpType op, uint64_t ref, uint64_t ro, CFGRefType rt)
NativeInst::set_ref_reloc_type	CFG/CFG.h	/^  void set_ref_reloc_type(CFGOpType op, uint64_t ref, uint64_t ro,$/;"	p	class:NativeInst	access:public	signature:(CFGOpType op, uint64_t ref, uint64_t ro, CFGRefType rt)
NativeInst::set_ref_type	CFG/CFG.cpp	/^void NativeInst::set_ref_type(CFGOpType op, CFGRefType rt) {$/;"	f	class:NativeInst	signature:(CFGOpType op, CFGRefType rt)
NativeInst::set_ref_type	CFG/CFG.h	/^  void set_ref_type(CFGOpType op, CFGRefType rt);$/;"	p	class:NativeInst	access:public	signature:(CFGOpType op, CFGRefType rt)
NativeInst::set_reference	CFG/CFG.cpp	/^void NativeInst::set_reference(CFGOpType op, uint64_t ref) {$/;"	f	class:NativeInst	signature:(CFGOpType op, uint64_t ref)
NativeInst::set_reference	CFG/CFG.h	/^  void set_reference(CFGOpType op, uint64_t ref);$/;"	p	class:NativeInst	access:public	signature:(CFGOpType op, uint64_t ref)
NativeInst::set_reloc_offset	CFG/CFG.cpp	/^void NativeInst::set_reloc_offset(CFGOpType op, uint8_t ro) {$/;"	f	class:NativeInst	signature:(CFGOpType op, uint8_t ro)
NativeInst::set_reloc_offset	CFG/CFG.h	/^  void set_reloc_offset(CFGOpType op, uint8_t ro);$/;"	p	class:NativeInst	access:public	signature:(CFGOpType op, uint8_t ro)
NativeInst::set_rip_relative	CFG/CFG.cpp	/^void NativeInst::set_rip_relative(unsigned i) {$/;"	f	class:NativeInst	signature:(unsigned i)
NativeInst::set_rip_relative	CFG/CFG.h	/^  void set_rip_relative(unsigned i);$/;"	p	class:NativeInst	access:public	signature:(unsigned i)
NativeInst::set_system_call_number	CFG/CFG.cpp	/^void NativeInst::set_system_call_number(int cn) {$/;"	f	class:NativeInst	signature:(int cn)
NativeInst::set_system_call_number	CFG/CFG.h	/^  void set_system_call_number(int cn);$/;"	p	class:NativeInst	access:public	signature:(int cn)
NativeInst::set_terminator	CFG/CFG.cpp	/^void NativeInst::set_terminator(void) {$/;"	f	class:NativeInst	signature:(void)
NativeInst::set_terminator	CFG/CFG.h	/^  void set_terminator(void);$/;"	p	class:NativeInst	access:public	signature:(void)
NativeInst::set_tr	CFG/CFG.cpp	/^void NativeInst::set_tr(VA a) {$/;"	f	class:NativeInst	signature:(VA a)
NativeInst::set_tr	CFG/CFG.h	/^  void set_tr(VA a);$/;"	p	class:NativeInst	access:public	signature:(VA a)
NativeInst::system_call_number	CFG/CFG.h	/^  int system_call_number;$/;"	m	class:NativeInst	access:private
NativeInst::targets	CFG/CFG.h	/^  std::vector<VA> targets;$/;"	m	class:NativeInst	access:private
NativeInst::terminator	CFG/CFG.cpp	/^bool NativeInst::terminator(void) const {$/;"	f	class:NativeInst	signature:(void) const
NativeInst::terminator	CFG/CFG.h	/^  bool terminator(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
NativeInst::tgtIfFalse	CFG/CFG.h	/^  VA tgtIfFalse;$/;"	m	class:NativeInst	access:private
NativeInst::tgtIfTrue	CFG/CFG.h	/^  VA tgtIfTrue;$/;"	m	class:NativeInst	access:private
NativeInstPtr	CFG/CFG.h	/^typedef NativeInst *NativeInstPtr;$/;"	t
NativeModule	CFG/CFG.cpp	/^NativeModule::NativeModule($/;"	f	class:NativeModule	signature:( const std::string &module_name_, const std::unordered_map<VA, NativeFunctionPtr> &funcs_, const std::string &triple_)
NativeModule	CFG/CFG.h	/^  NativeModule(const std::string &module_name_,$/;"	p	class:NativeModule	access:public	signature:(const std::string &module_name_, const std::unordered_map<VA, NativeFunctionPtr> &funcs_, const std::string &triple_)
NativeModule	CFG/CFG.h	/^  NativeModule(void) = delete;$/;"	p	class:NativeModule	access:private	signature:(void)
NativeModule	CFG/CFG.h	/^class NativeModule {$/;"	c
NativeModule::NativeModule	CFG/CFG.cpp	/^NativeModule::NativeModule($/;"	f	class:NativeModule	signature:( const std::string &module_name_, const std::unordered_map<VA, NativeFunctionPtr> &funcs_, const std::string &triple_)
NativeModule::NativeModule	CFG/CFG.h	/^  NativeModule(const std::string &module_name_,$/;"	p	class:NativeModule	access:public	signature:(const std::string &module_name_, const std::unordered_map<VA, NativeFunctionPtr> &funcs_, const std::string &triple_)
NativeModule::NativeModule	CFG/CFG.h	/^  NativeModule(void) = delete;$/;"	p	class:NativeModule	access:private	signature:(void)
NativeModule::addDataSection	CFG/CFG.cpp	/^void NativeModule::addDataSection(VA base, std::vector<uint8_t> &bytes) {$/;"	f	class:NativeModule	signature:(VA base, std::vector<uint8_t> &bytes)
NativeModule::addDataSection	CFG/CFG.cpp	/^void NativeModule::addDataSection(const DataSection &d) {$/;"	f	class:NativeModule	signature:(const DataSection &d)
NativeModule::addDataSection	CFG/CFG.h	/^  void addDataSection(VA, std::vector<uint8_t> &);$/;"	p	class:NativeModule	access:public	signature:(VA, std::vector<uint8_t> &)
NativeModule::addDataSection	CFG/CFG.h	/^  void addDataSection(const DataSection &d);$/;"	p	class:NativeModule	access:public	signature:(const DataSection &d)
NativeModule::addEntryPoint	CFG/CFG.cpp	/^void NativeModule::addEntryPoint(const NativeEntrySymbol &ep) {$/;"	f	class:NativeModule	signature:(const NativeEntrySymbol &ep)
NativeModule::addEntryPoint	CFG/CFG.h	/^  void addEntryPoint(const NativeEntrySymbol &ep);$/;"	p	class:NativeModule	access:public	signature:(const NativeEntrySymbol &ep)
NativeModule::addExtCall	CFG/CFG.cpp	/^void NativeModule::addExtCall(ExternalCodeRefPtr p) {$/;"	f	class:NativeModule	signature:(ExternalCodeRefPtr p)
NativeModule::addExtCall	CFG/CFG.h	/^  void addExtCall(ExternalCodeRefPtr p);$/;"	p	class:NativeModule	access:public	signature:(ExternalCodeRefPtr p)
NativeModule::addExtDataRef	CFG/CFG.cpp	/^void NativeModule::addExtDataRef(ExternalDataRefPtr p) {$/;"	f	class:NativeModule	signature:(ExternalDataRefPtr p)
NativeModule::addExtDataRef	CFG/CFG.h	/^  void addExtDataRef(ExternalDataRefPtr p);$/;"	p	class:NativeModule	access:public	signature:(ExternalDataRefPtr p)
NativeModule::addOffsetTables	CFG/CFG.cpp	/^void NativeModule::addOffsetTables($/;"	f	class:NativeModule	signature:( const std::list<MCSOffsetTablePtr> & tables)
NativeModule::addOffsetTables	CFG/CFG.h	/^  void addOffsetTables(const std::list<MCSOffsetTablePtr> &tables);$/;"	p	class:NativeModule	access:public	signature:(const std::list<MCSOffsetTablePtr> &tables)
NativeModule::add_func	CFG/CFG.cpp	/^void NativeModule::add_func(NativeFunctionPtr f) {$/;"	f	class:NativeModule	signature:(NativeFunctionPtr f)
NativeModule::add_func	CFG/CFG.h	/^  void add_func(NativeFunctionPtr f);$/;"	p	class:NativeModule	access:public	signature:(NativeFunctionPtr f)
NativeModule::data_sections	CFG/CFG.h	/^  std::list<DataSection> data_sections;$/;"	m	class:NativeModule	access:private
NativeModule::entries	CFG/CFG.h	/^  std::vector<NativeEntrySymbol> entries;$/;"	m	class:NativeModule	access:public
NativeModule::external_code_refs	CFG/CFG.h	/^  std::list<ExternalCodeRefPtr> external_code_refs;$/;"	m	class:NativeModule	access:private
NativeModule::external_data_refs	CFG/CFG.h	/^  std::list<ExternalDataRefPtr> external_data_refs;$/;"	m	class:NativeModule	access:private
NativeModule::funcs	CFG/CFG.h	/^  std::unordered_map<VA, NativeFunctionPtr> funcs;$/;"	m	class:NativeModule	access:private
NativeModule::getData	CFG/CFG.cpp	/^const std::list<DataSection> &NativeModule::getData(void) const {$/;"	f	class:NativeModule	signature:(void) const
NativeModule::getData	CFG/CFG.h	/^  const std::list<DataSection> &getData(void) const;$/;"	p	class:NativeModule	access:public	signature:(void) const
NativeModule::getEntryPoints	CFG/CFG.cpp	/^const std::vector<NativeEntrySymbol> &NativeModule::getEntryPoints(void) const {$/;"	f	class:NativeModule	signature:(void) const
NativeModule::getEntryPoints	CFG/CFG.h	/^  const std::vector<NativeEntrySymbol> &getEntryPoints(void) const;$/;"	p	class:NativeModule	access:public	signature:(void) const
NativeModule::getExtCalls	CFG/CFG.cpp	/^const std::list<ExternalCodeRefPtr> &NativeModule::getExtCalls(void) const {$/;"	f	class:NativeModule	signature:(void) const
NativeModule::getExtCalls	CFG/CFG.h	/^  const std::list<ExternalCodeRefPtr> &getExtCalls(void) const;$/;"	p	class:NativeModule	access:public	signature:(void) const
NativeModule::getExtDataRefs	CFG/CFG.cpp	/^const std::list<ExternalDataRefPtr> &NativeModule::getExtDataRefs(void) const {$/;"	f	class:NativeModule	signature:(void) const
NativeModule::getExtDataRefs	CFG/CFG.h	/^  const std::list<ExternalDataRefPtr> &getExtDataRefs(void) const;$/;"	p	class:NativeModule	access:public	signature:(void) const
NativeModule::get_funcs	CFG/CFG.cpp	/^const std::unordered_map<VA, NativeFunctionPtr> &NativeModule::get_funcs($/;"	f	class:NativeModule	signature:( void) const
NativeModule::get_funcs	CFG/CFG.h	/^  const std::unordered_map<VA, NativeFunctionPtr> &get_funcs(void) const;$/;"	p	class:NativeModule	access:public	signature:(void) const
NativeModule::is64Bit	CFG/CFG.cpp	/^bool NativeModule::is64Bit(void) const {$/;"	f	class:NativeModule	signature:(void) const
NativeModule::is64Bit	CFG/CFG.h	/^  bool is64Bit(void) const;$/;"	p	class:NativeModule	access:public	signature:(void) const
NativeModule::module_name	CFG/CFG.h	/^  const std::string module_name;$/;"	m	class:NativeModule	access:private
NativeModule::name	CFG/CFG.cpp	/^const std::string &NativeModule::name(void) const {$/;"	f	class:NativeModule	signature:(void) const
NativeModule::name	CFG/CFG.h	/^  const std::string &name(void) const;$/;"	p	class:NativeModule	access:public	signature:(void) const
NativeModule::offset_tables	CFG/CFG.h	/^  std::unordered_map<VA, MCSOffsetTablePtr> offset_tables;$/;"	m	class:NativeModule	access:public
NativeModule::triple	CFG/CFG.h	/^  const llvm::Triple triple;$/;"	m	class:NativeModule	access:private
NativeModulePtr	CFG/CFG.h	/^typedef NativeModule *NativeModulePtr;$/;"	t
NoPrefix	CFG/CFG.h	/^    NoPrefix,$/;"	e	enum:NativeInst::Prefix
NoReturn	CFG/Externals.h	/^    NoReturn$/;"	e	enum:ExternalCodeRef::ReturnType
OF_F	Arch/X86/Semantics/Jcc.cpp	200;"	d	file:
OF_F	Arch/X86/Semantics/Jcc.cpp	77;"	d	file:
ONE	Arch/Mips/Semantics/BNE.cpp	63;"	d	file:
ONE	Arch/Mips/Semantics/BNE.cpp	76;"	d	file:
ONE	Arch/X86/Semantics/Jcc.cpp	198;"	d	file:
ONE	Arch/X86/Semantics/Jcc.cpp	75;"	d	file:
ONLY_STRUCT	Arch/X86/Runtime/print_ELF_32_linux.cpp	10;"	d	file:
ONLY_STRUCT	Arch/X86/Runtime/print_ELF_64_linux.cpp	10;"	d	file:
ONLY_STRUCT	Arch/X86/Runtime/print_PE_32_windows.cpp	10;"	d	file:
ONLY_STRUCT	Arch/X86/Runtime/print_PE_64_windows.cpp	10;"	d	file:
OP	BC/Util.h	209;"	d
OR	Arch/X86/Semantics/CMOV.cpp	/^static Value *OR(BasicBlock *b, Value *v1, Value *v2) {$/;"	f	file:	signature:(BasicBlock *b, Value *v1, Value *v2)
OR	Arch/X86/Semantics/Jcc.cpp	/^static llvm::Value *OR(llvm::BasicBlock *&b, llvm::Value *x, llvm::Value *y) {$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::Value *x, llvm::Value *y)
OR	Arch/X86/Semantics/fpu.cpp	/^static llvm::Value *OR(llvm::BasicBlock *&b, llvm::Value *x, llvm::Value *y) {$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::Value *x, llvm::Value *y)
OR_populateDispatchMap	Arch/Mips/Semantics/OR.cpp	/^void OR_populateDispatchMap(DispatchMap &m)$/;"	f	signature:(DispatchMap &m)
OR_populateDispatchMap	Arch/Mips/Semantics/OR.h	/^void OR_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
OSType	Arch/Arch.cpp	/^llvm::Triple::OSType OSType(void) {$/;"	f	signature:(void)
OSType	Arch/Arch.h	/^llvm::Triple::OSType OSType(void);$/;"	p	signature:(void)
PACKED	Arch/X86/Runtime/State.h	12;"	d
PACKED	Arch/X86/Runtime/State.h	15;"	d
PACKED	Arch/X86/Runtime/State.h	9;"	d
PEFile	CFG/CFG.h	/^  PEFile,$/;"	e	enum:ModuleInputFormat
PF_F	Arch/X86/Semantics/Jcc.cpp	202;"	d	file:
PF_F	Arch/X86/Semantics/Jcc.cpp	79;"	d	file:
Pointer32	Arch/Arch.h	/^  Pointer32 = 32,$/;"	e	enum:PointerSize
Pointer64	Arch/Arch.h	/^  Pointer64 = 64$/;"	e	enum:PointerSize
PointerSize	Arch/Arch.h	/^enum PointerSize {$/;"	g
PreProcessInst	Arch/Mips/Lift.cpp	/^static void PreProcessInst(TranslationContext &ctx, llvm::BasicBlock *&block) {$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
PreProcessInst	Arch/X86/Lift.cpp	/^static void PreProcessInst(TranslationContext &ctx, llvm::BasicBlock *&block) {$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
Prefix	CFG/CFG.h	/^  enum Prefix {$/;"	g	class:NativeInst	access:public
PrintVersion	Lift.cpp	/^static void PrintVersion(void) {$/;"	f	file:	signature:(void)
ProtoBuff	CFG/CFG.h	/^  ProtoBuff$/;"	e	enum:ModuleInputFormat
R_READ	BC/Util.h	/^inline static llvm::Value *R_READ(llvm::BasicBlock *b, MCSemaRegs reg) {$/;"	f	namespace:x86	signature:(llvm::BasicBlock *b, MCSemaRegs reg)
R_READ	BC/Util.h	/^inline static llvm::Value *R_READ(llvm::BasicBlock *b, MCSemaRegs reg) {$/;"	f	namespace:x86_64	signature:(llvm::BasicBlock *b, MCSemaRegs reg)
R_READ	BC/Util.h	/^inline static llvm::Value *R_READ(llvm::BasicBlock *b, MCSemaRegs reg) {$/;"	f	signature:(llvm::BasicBlock *b, MCSemaRegs reg)
R_WRITE	BC/Util.h	/^inline static void R_WRITE(llvm::BasicBlock *b, MCSemaRegs reg,$/;"	f	namespace:x86	signature:(llvm::BasicBlock *b, MCSemaRegs reg, llvm::Value *write)
R_WRITE	BC/Util.h	/^inline static void R_WRITE(llvm::BasicBlock *b, MCSemaRegs reg,$/;"	f	namespace:x86_64	signature:(llvm::BasicBlock *b, MCSemaRegs reg, llvm::Value *write)
R_WRITE	BC/Util.h	/^inline static void R_WRITE(llvm::BasicBlock *b, MCSemaRegs reg,$/;"	f	signature:(llvm::BasicBlock *b, MCSemaRegs reg, llvm::Value *write)
ReadProtoBuf	CFG/CFG.cpp	/^NativeModulePtr ReadProtoBuf(const std::string &file_name) {$/;"	f	signature:(const std::string &file_name)
ReadProtoBuf	CFG/CFG.h	/^NativeModulePtr ReadProtoBuf(const std::string &file_name);$/;"	p	signature:(const std::string &file_name)
RegInfo	Arch/Mips/Register.cpp	/^struct RegInfo {$/;"	s	namespace:__anon3	file:
RegInfo	Arch/X86/Register.cpp	/^struct RegInfo {$/;"	s	namespace:__anon4	file:
RenameLiftedFunctions	BC/Lift.cpp	/^void RenameLiftedFunctions(NativeModulePtr natMod, llvm::Module *M,$/;"	f	signature:(NativeModulePtr natMod, llvm::Module *M, const std::set<VA> &entry_point_pcs)
RenameLiftedFunctions	BC/Lift.h	/^void RenameLiftedFunctions(NativeModulePtr mod, llvm::Module *M,$/;"	p	signature:(NativeModulePtr mod, llvm::Module *M, const std::set<VA> &entry_point_pcs)
RepNePrefix	CFG/CFG.h	/^    RepNePrefix,$/;"	e	enum:NativeInst::Prefix
RepPrefix	CFG/CFG.h	/^    RepPrefix,$/;"	e	enum:NativeInst::Prefix
ReturnType	CFG/Externals.h	/^  enum ReturnType {$/;"	g	class:ExternalCodeRef	access:public
SB_populateDispatchMap	Arch/Mips/Semantics/SB.cpp	/^void SB_populateDispatchMap(DispatchMap &m)$/;"	f	signature:(DispatchMap &m)
SB_populateDispatchMap	Arch/Mips/Semantics/SB.h	/^void SB_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
SCAS_TRANSLATION	Arch/X86/Semantics/String.cpp	731;"	d	file:
SET_STRUCT_MEMBER	Arch/X86/Semantics/fpu.cpp	221;"	d	file:
SETcc_populateDispatchMap	Arch/X86/Semantics/SETcc.cpp	/^void SETcc_populateDispatchMap(DispatchMap &m) {$/;"	f	signature:(DispatchMap &m)
SETcc_populateDispatchMap	Arch/X86/Semantics/SETcc.h	/^void SETcc_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
SEXT	Arch/X86/Semantics/SSE.cpp	/^  SEXT,$/;"	e	enum:ExtendOp	file:
SF_F	Arch/X86/Semantics/Jcc.cpp	205;"	d	file:
SF_F	Arch/X86/Semantics/Jcc.cpp	82;"	d	file:
SHL_NOTXOR_FLAG	Arch/X86/Semantics/fpu.cpp	/^static llvm::Value *SHL_NOTXOR_FLAG(llvm::BasicBlock *block, llvm::Value *val,$/;"	f	file:	signature:(llvm::BasicBlock *block, llvm::Value *val, MCSemaRegs flag, int shlbits)
SHL_NOTXOR_V	Arch/X86/Semantics/fpu.cpp	/^static llvm::Value *SHL_NOTXOR_V(llvm::BasicBlock *block, llvm::Value *val,$/;"	f	file:	signature:(llvm::BasicBlock *block, llvm::Value *val, llvm::Value *val_to_shift, int shlbits)
SHR_SET_FLAG	Arch/X86/Util.h	/^static void SHR_SET_FLAG(llvm::BasicBlock *block, llvm::Value *val,$/;"	f	signature:(llvm::BasicBlock *block, llvm::Value *val, MCSemaRegs flag, int shrbits)
SHR_SET_FLAG_V	Arch/X86/Util.h	/^static void SHR_SET_FLAG_V(llvm::BasicBlock *block, llvm::Value *val,$/;"	f	signature:(llvm::BasicBlock *block, llvm::Value *val, MCSemaRegs flag, llvm::Value *shrbit_val)
SSE_populateDispatchMap	Arch/X86/Semantics/SSE.cpp	/^void SSE_populateDispatchMap(DispatchMap &m) {$/;"	f	signature:(DispatchMap &m)
SSE_populateDispatchMap	Arch/X86/Semantics/SSE.h	/^void SSE_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
STDCALL	Arch/X86/Runtime/State.h	11;"	d
STDCALL	Arch/X86/Runtime/State.h	14;"	d
STDCALL	Arch/X86/Runtime/State.h	8;"	d
SUB_populateDispatchMap	Arch/X86/Semantics/SUB.cpp	/^void SUB_populateDispatchMap(DispatchMap &m) {$/;"	f	signature:(DispatchMap &m)
SUB_populateDispatchMap	Arch/X86/Semantics/SUB.h	/^void SUB_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
SW_populateDispatchMap	Arch/Mips/Semantics/SW.cpp	/^void SW_populateDispatchMap(DispatchMap &m)$/;"	f	signature:(DispatchMap &m)
SW_populateDispatchMap	Arch/Mips/Semantics/SW.h	/^void SW_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
ShiftRoll_populateDispatchMap	Arch/X86/Semantics/ShiftRoll.cpp	/^void ShiftRoll_populateDispatchMap(DispatchMap &m) {$/;"	f	signature:(DispatchMap &m)
ShiftRoll_populateDispatchMap	Arch/X86/Semantics/ShiftRoll.h	/^void ShiftRoll_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
ShrdVV32	Arch/X86/Semantics/ShiftRoll.cpp	/^llvm::Value *ShrdVV32(llvm::BasicBlock *&b, unsigned dstReg, unsigned srcReg1,$/;"	f	signature:(llvm::BasicBlock *&b, unsigned dstReg, unsigned srcReg1, llvm::Value* shiftBy)
ShrdVV32	Arch/X86/Semantics/ShiftRoll.h	/^llvm::Value *ShrdVV32(llvm::BasicBlock *&b, unsigned dstReg, unsigned srcReg1,$/;"	p	signature:(llvm::BasicBlock *&b, unsigned dstReg, unsigned srcReg1, llvm::Value *shiftBy)
Stack_populateDispatchMap	Arch/X86/Semantics/Stack.cpp	/^void Stack_populateDispatchMap(DispatchMap &m) {$/;"	f	signature:(DispatchMap &m)
Stack_populateDispatchMap	Arch/X86/Semantics/Stack.h	/^void Stack_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
StoreSpillType	BC/Util.h	/^enum StoreSpillType {$/;"	g
String_populateDispatchMap	Arch/X86/Semantics/String.cpp	/^void String_populateDispatchMap(DispatchMap &m) {$/;"	f	signature:(DispatchMap &m)
String_populateDispatchMap	Arch/X86/Semantics/String.h	/^void String_populateDispatchMap(DispatchMap &m);$/;"	p	signature:(DispatchMap &m)
SystemArch	Arch/Arch.cpp	/^SystemArchType SystemArch(llvm::Module *) {$/;"	f	signature:(llvm::Module *)
SystemArch	Arch/Arch.h	/^SystemArchType SystemArch(llvm::Module *M);$/;"	p	signature:(llvm::Module *M)
SystemArchType	Arch/Arch.h	/^enum SystemArchType {$/;"	g
SystemOS	Arch/Arch.h	185;"	d
TASSERT	cfgToLLVM/TransExcn.h	46;"	d
TErr	cfgToLLVM/TransExcn.cpp	/^TErr::TErr(unsigned int line, const char *file, std::string message) {$/;"	f	class:TErr	signature:(unsigned int line, const char *file, std::string message)
TErr	cfgToLLVM/TransExcn.h	/^  TErr(unsigned int, const char *, std::string);$/;"	p	class:TErr	access:public	signature:(unsigned int, const char *, std::string)
TErr	cfgToLLVM/TransExcn.h	/^class TErr : public std::exception {$/;"	c	inherits:std::exception
TErr::TErr	cfgToLLVM/TransExcn.cpp	/^TErr::TErr(unsigned int line, const char *file, std::string message) {$/;"	f	class:TErr	signature:(unsigned int line, const char *file, std::string message)
TErr::TErr	cfgToLLVM/TransExcn.h	/^  TErr(unsigned int, const char *, std::string);$/;"	p	class:TErr	access:public	signature:(unsigned int, const char *, std::string)
TErr::message	cfgToLLVM/TransExcn.h	/^  std::string message;$/;"	m	class:TErr	access:private
TErr::what	cfgToLLVM/TransExcn.cpp	/^const char *TErr::what() const throw() {$/;"	f	class:TErr	signature:() const
TErr::what	cfgToLLVM/TransExcn.h	/^  virtual const char *what() const throw();$/;"	p	class:TErr	access:public	signature:() const
TErr::~TErr	cfgToLLVM/TransExcn.h	/^  virtual ~TErr(void) throw() { }$/;"	f	class:TErr	access:public	signature:(void)
Table	cfgToLLVM/JumpTables.h	/^  Table(const std::vector<T> &table, int entry)$/;"	f	class:Table	access:public	signature:(const std::vector<T> &table, int entry)
Table	cfgToLLVM/JumpTables.h	/^class Table {$/;"	c
Table::Table	cfgToLLVM/JumpTables.h	/^  Table(const std::vector<T> &table, int entry)$/;"	f	class:Table	access:public	signature:(const std::vector<T> &table, int entry)
Table::getConstTable	cfgToLLVM/JumpTables.h	/^  virtual const std::vector<T> &getConstTable(void) const {$/;"	f	class:Table	access:public	signature:(void) const
Table::getInitialEntry	cfgToLLVM/JumpTables.h	/^  virtual int getInitialEntry(void) const {$/;"	f	class:Table	access:public	signature:(void) const
Table::getTable	cfgToLLVM/JumpTables.h	/^  virtual const std::vector<T> &getTable(void) const {$/;"	f	class:Table	access:public	signature:(void) const
Table::getTable	cfgToLLVM/JumpTables.h	/^  virtual std::vector<T> &getTable(void) {$/;"	f	class:Table	access:protected	signature:(void)
Table::m_entry	cfgToLLVM/JumpTables.h	/^  int m_entry;$/;"	m	class:Table	access:protected
Table::m_table	cfgToLLVM/JumpTables.h	/^  std::vector<T> m_table;$/;"	m	class:Table	access:protected
Table::~Table	cfgToLLVM/JumpTables.h	/^  virtual ~Table(void) {}$/;"	f	class:Table	access:public	signature:(void)
TranslationContext	Arch/Dispatch.h	/^struct TranslationContext {$/;"	s
TranslationContext::F	Arch/Dispatch.h	/^  llvm::Function *F;$/;"	m	struct:TranslationContext	access:public
TranslationContext::M	Arch/Dispatch.h	/^  llvm::Module *M;$/;"	m	struct:TranslationContext	access:public
TranslationContext::natB	Arch/Dispatch.h	/^  NativeBlock *natB;$/;"	m	struct:TranslationContext	access:public
TranslationContext::natF	Arch/Dispatch.h	/^  NativeFunction *natF;$/;"	m	struct:TranslationContext	access:public
TranslationContext::natI	Arch/Dispatch.h	/^  NativeInst *natI;$/;"	m	struct:TranslationContext	access:public
TranslationContext::natM	Arch/Dispatch.h	/^  NativeModule *natM;$/;"	m	struct:TranslationContext	access:public
TranslationContext::va_to_bb	Arch/Dispatch.h	/^  std::map<VA, llvm::BasicBlock *> va_to_bb;$/;"	m	struct:TranslationContext	access:public
UNPACK_HIGH	Arch/X86/Semantics/SSE.cpp	/^  UNPACK_HIGH$/;"	e	enum:UnpackType	file:
UNPACK_LOW	Arch/X86/Semantics/SSE.cpp	/^  UNPACK_LOW,$/;"	e	enum:UnpackType	file:
Unknown	CFG/Externals.h	/^    Unknown,$/;"	e	enum:ExternalCodeRef::ReturnType
UnpackType	Arch/X86/Semantics/SSE.cpp	/^enum UnpackType {$/;"	g	file:
VA	Arch/Arch.h	/^typedef uint64_t VA;$/;"	t
VA	CFG/CFG.h	/^typedef uint64_t VA;$/;"	t
VECTOR_AS_INT	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value *VECTOR_AS_INT(llvm::BasicBlock *b, llvm::Value *vector) {$/;"	f	file:	signature:(llvm::BasicBlock *b, llvm::Value *vector)
VoidTy	CFG/Externals.h	/^    VoidTy,$/;"	e	enum:ExternalCodeRef::ReturnType
WindowsAddPushJumpStub	Arch/Arch.cpp	/^static void WindowsAddPushJumpStub(bool decorateStub, llvm::Module *M,$/;"	f	file:	signature:(bool decorateStub, llvm::Module *M, llvm::Function *F, llvm::Function *W, const char *stub_handler)
WindowsDecorateName	Arch/Arch.cpp	/^static std::string WindowsDecorateName(llvm::Function *F,$/;"	f	file:	signature:(llvm::Function *F, const std::string &name)
WriteAF2	Arch/X86/Semantics/flagops.h	/^static void WriteAF2(llvm::BasicBlock *b, llvm::Value *r, llvm::Value *lhs,$/;"	f	signature:(llvm::BasicBlock *b, llvm::Value *r, llvm::Value *lhs, llvm::Value *rhs)
WriteAFAddSub	Arch/X86/Semantics/flagops.h	/^static void WriteAFAddSub(llvm::BasicBlock *b, llvm::Value *res,$/;"	f	signature:(llvm::BasicBlock *b, llvm::Value *res, llvm::Value *o1, llvm::Value *o2)
WriteCFAdd	Arch/X86/Semantics/flagops.h	/^static void WriteCFAdd(llvm::BasicBlock *b, llvm::Value *res,$/;"	f	signature:(llvm::BasicBlock *b, llvm::Value *res, llvm::Value *argL)
WriteCFShiftR	Arch/X86/Semantics/flagops.h	/^static void WriteCFShiftR(llvm::BasicBlock *b, llvm::Value *val,$/;"	f	signature:(llvm::BasicBlock *b, llvm::Value *val, llvm::Value *shiftAmt)
WriteCFSub	Arch/X86/Semantics/flagops.h	/^static void WriteCFSub(llvm::BasicBlock *b, llvm::Value *argL,$/;"	f	signature:(llvm::BasicBlock *b, llvm::Value *argL, llvm::Value *argR)
WriteOFAdd	Arch/X86/Semantics/flagops.h	/^static void WriteOFAdd(llvm::BasicBlock *b, llvm::Value *res, llvm::Value *lhs,$/;"	f	signature:(llvm::BasicBlock *b, llvm::Value *res, llvm::Value *lhs, llvm::Value *rhs)
WriteOFSub	Arch/X86/Semantics/flagops.h	/^static void WriteOFSub(llvm::BasicBlock *b, llvm::Value *res, llvm::Value *lhs,$/;"	f	signature:(llvm::BasicBlock *b, llvm::Value *res, llvm::Value *lhs, llvm::Value *rhs)
WritePF	Arch/X86/Semantics/flagops.h	/^static void WritePF(llvm::BasicBlock *b, llvm::Value *written) {$/;"	f	signature:(llvm::BasicBlock *b, llvm::Value *written)
WriteSF	Arch/X86/Semantics/flagops.h	/^static void WriteSF(llvm::BasicBlock *b, llvm::Value *written) {$/;"	f	signature:(llvm::BasicBlock *b, llvm::Value *written)
WriteZF	Arch/X86/Semantics/flagops.h	/^static void WriteZF(llvm::BasicBlock *b, llvm::Value *w) {$/;"	f	signature:(llvm::BasicBlock *b, llvm::Value *w)
X86	Arch/Arch.h	/^namespace X86 {$/;"	n	namespace:llvm
X86	Arch/Register.h	/^namespace X86 {$/;"	n	namespace:llvm
X86AllocRegisterVars	Arch/Arch.cpp	/^void X86AllocRegisterVars(llvm::BasicBlock *);$/;"	p	file:	signature:(llvm::BasicBlock *)
X86AllocRegisterVars	Arch/X86/Register.cpp	/^void X86AllocRegisterVars(llvm::BasicBlock *b) {$/;"	f	signature:(llvm::BasicBlock *b)
X86GetOrCreateRegStateTracer	Arch/Arch.cpp	/^llvm::Function *X86GetOrCreateRegStateTracer(llvm::Module *);$/;"	p	file:	signature:(llvm::Module *)
X86GetOrCreateRegStateTracer	Arch/X86/Register.cpp	/^llvm::Function *X86GetOrCreateRegStateTracer(llvm::Module *M) {$/;"	f	signature:(llvm::Module *M)
X86InitInstructionDispatch	Arch/Arch.cpp	/^void X86InitInstructionDispatch(DispatchMap &dispatcher);$/;"	p	file:	signature:(DispatchMap &dispatcher)
X86InitInstructionDispatch	Arch/X86/Dispatch.cpp	/^void X86InitInstructionDispatch(DispatchMap &dispatcher) {$/;"	f	signature:(DispatchMap &dispatcher)
X86InitRegisterState	Arch/Arch.cpp	/^void X86InitRegisterState(llvm::LLVMContext *);$/;"	p	file:	signature:(llvm::LLVMContext *)
X86InitRegisterState	Arch/X86/Register.cpp	/^void X86InitRegisterState(llvm::LLVMContext *context) {$/;"	f	signature:(llvm::LLVMContext *context)
X86LiftInstruction	Arch/Arch.cpp	/^InstTransResult X86LiftInstruction($/;"	p	file:	signature:( TranslationContext &, llvm::BasicBlock *&, InstructionLifter *)
X86LiftInstruction	Arch/X86/Lift.cpp	/^InstTransResult X86LiftInstruction($/;"	f	signature:( TranslationContext &ctx, llvm::BasicBlock *&block, InstructionLifter *lifter)
X86RegStateStructType	Arch/Arch.cpp	/^llvm::StructType *X86RegStateStructType(void);$/;"	p	file:	signature:(void)
X86RegStateStructType	Arch/X86/Register.cpp	/^llvm::StructType *X86RegStateStructType(void) {$/;"	f	signature:(void)
X86RegisterName	Arch/Arch.cpp	/^const std::string &X86RegisterName(MCSemaRegs reg);$/;"	p	file:	signature:(MCSemaRegs reg)
X86RegisterName	Arch/X86/Register.cpp	/^const std::string &X86RegisterName(MCSemaRegs reg) {$/;"	f	signature:(MCSemaRegs reg)
X86RegisterNumber	Arch/Arch.cpp	/^MCSemaRegs X86RegisterNumber(const std::string &name);$/;"	p	file:	signature:(const std::string &name)
X86RegisterNumber	Arch/X86/Register.cpp	/^MCSemaRegs X86RegisterNumber(const std::string &name) {$/;"	f	signature:(const std::string &name)
X86RegisterOffset	Arch/Arch.cpp	/^unsigned X86RegisterOffset(MCSemaRegs reg);$/;"	p	file:	signature:(MCSemaRegs reg)
X86RegisterOffset	Arch/X86/Register.cpp	/^unsigned X86RegisterOffset(MCSemaRegs reg) {$/;"	f	signature:(MCSemaRegs reg)
X86RegisterParent	Arch/Arch.cpp	/^MCSemaRegs X86RegisterParent(MCSemaRegs reg);$/;"	p	file:	signature:(MCSemaRegs reg)
X86RegisterParent	Arch/X86/Register.cpp	/^MCSemaRegs X86RegisterParent(MCSemaRegs reg) {$/;"	f	signature:(MCSemaRegs reg)
X86RegisterSize	Arch/Arch.cpp	/^unsigned X86RegisterSize(MCSemaRegs reg);$/;"	p	file:	signature:(MCSemaRegs reg)
X86RegisterSize	Arch/X86/Register.cpp	/^unsigned X86RegisterSize(MCSemaRegs reg) {$/;"	f	signature:(MCSemaRegs reg)
X86_64_SysV	CFG/Externals.h	/^    X86_64_SysV,$/;"	e	enum:ExternalCodeRef::CallingConvention
X86_64_Win64	CFG/Externals.h	/^    X86_64_Win64,$/;"	e	enum:ExternalCodeRef::CallingConvention
ZERO	Arch/Mips/Semantics/BNE.cpp	64;"	d	file:
ZERO	Arch/Mips/Semantics/BNE.cpp	77;"	d	file:
ZERO	Arch/X86/Semantics/Jcc.cpp	199;"	d	file:
ZERO	Arch/X86/Semantics/Jcc.cpp	76;"	d	file:
ZEXT	Arch/X86/Semantics/SSE.cpp	/^  ZEXT$/;"	e	enum:ExtendOp	file:
ZF_F	Arch/X86/Semantics/Jcc.cpp	204;"	d	file:
ZF_F	Arch/X86/Semantics/Jcc.cpp	81;"	d	file:
_JUMPTABLES_H	cfgToLLVM/JumpTables.h	31;"	d
_Mips_	Arch/Arch.h	/^  _Mips_$/;"	e	enum:SystemArchType
_TRANS_EXCN_H	cfgToLLVM/TransExcn.h	30;"	d
_X86_	Arch/Arch.h	/^  _X86_,$/;"	e	enum:SystemArchType
_X86_64_	Arch/Arch.h	/^  _X86_64_,$/;"	e	enum:SystemArchType
__USE_GNU	Arch/X86/Semantics/fpu.cpp	31;"	d	file:
__anon1::InitInstructionDecoder	Arch/Arch.cpp	/^static bool InitInstructionDecoder(void) {$/;"	f	namespace:__anon1	signature:(void)
__anon1::gAddressSize	Arch/Arch.cpp	/^static int gAddressSize = 0;$/;"	m	namespace:__anon1	file:
__anon1::gArchType	Arch/Arch.cpp	/^static llvm::Triple::ArchType gArchType;$/;"	m	namespace:__anon1	file:
__anon1::gCallingConv	Arch/Arch.cpp	/^static llvm::CallingConv::ID gCallingConv;$/;"	m	namespace:__anon1	file:
__anon1::gDataLayout	Arch/Arch.cpp	/^static std::string gDataLayout;$/;"	m	namespace:__anon1	file:
__anon1::gDisassembler	Arch/Arch.cpp	/^static const llvm::MCDisassembler *gDisassembler = nullptr;$/;"	m	namespace:__anon1	file:
__anon1::gDispatcher	Arch/Arch.cpp	/^static DispatchMap gDispatcher;$/;"	m	namespace:__anon1	file:
__anon1::gOSType	Arch/Arch.cpp	/^static llvm::Triple::OSType gOSType;$/;"	m	namespace:__anon1	file:
__anon1::gTriple	Arch/Arch.cpp	/^static std::string gTriple;$/;"	m	namespace:__anon1	file:
__anon2::FixupInstruction	Arch/Arch.cpp	/^static void FixupInstruction($/;"	f	namespace:__anon2	signature:( llvm::MCInst &inst, const std::unordered_set<unsigned> &prefixes)
__anon3::AddPadding	Arch/Mips/Register.cpp	/^static void AddPadding(llvm::Type *type, int num_elements) {$/;"	f	namespace:__anon3	signature:(llvm::Type *type, int num_elements)
__anon3::AddReg	Arch/Mips/Register.cpp	/^static void AddReg(MCSemaRegs reg, const char *name, llvm::Type *type) {$/;"	f	namespace:__anon3	signature:(MCSemaRegs reg, const char *name, llvm::Type *type)
__anon3::AddSubReg	Arch/Mips/Register.cpp	/^static void AddSubReg(MCSemaRegs reg, const char *name,$/;"	f	namespace:__anon3	signature:(MCSemaRegs reg, const char *name, llvm::Type *read_type, llvm::Type *write_type, size_t parent_offset)
__anon3::RegInfo	Arch/Mips/Register.cpp	/^struct RegInfo {$/;"	s	namespace:__anon3	file:
__anon3::RegInfo::is_sub_reg	Arch/Mips/Register.cpp	/^  bool is_sub_reg;$/;"	m	struct:__anon3::RegInfo	file:	access:public
__anon3::RegInfo::name	Arch/Mips/Register.cpp	/^  std::string name;$/;"	m	struct:__anon3::RegInfo	file:	access:public
__anon3::RegInfo::parent_offset	Arch/Mips/Register.cpp	/^  size_t parent_offset;$/;"	m	struct:__anon3::RegInfo	file:	access:public
__anon3::RegInfo::parent_reg	Arch/Mips/Register.cpp	/^  MCSemaRegs parent_reg;$/;"	m	struct:__anon3::RegInfo	file:	access:public
__anon3::RegInfo::read_type	Arch/Mips/Register.cpp	/^  llvm::Type *read_type;$/;"	m	struct:__anon3::RegInfo	file:	access:public
__anon3::RegInfo::reg	Arch/Mips/Register.cpp	/^  MCSemaRegs reg;$/;"	m	struct:__anon3::RegInfo	file:	access:public
__anon3::RegInfo::state_offset	Arch/Mips/Register.cpp	/^  size_t state_offset;$/;"	m	struct:__anon3::RegInfo	file:	access:public
__anon3::RegInfo::write_type	Arch/Mips/Register.cpp	/^  llvm::Type *write_type;$/;"	m	struct:__anon3::RegInfo	file:	access:public
__anon3::gBadReg	Arch/Mips/Register.cpp	/^static const std::string gBadReg = "MISSING_REG";$/;"	m	namespace:__anon3	file:
__anon3::gLastAddedReg	Arch/Mips/Register.cpp	/^static MCSemaRegs gLastAddedReg = llvm::Mips::NoRegister;$/;"	m	namespace:__anon3	file:
__anon3::gNumRegs	Arch/Mips/Register.cpp	/^static unsigned gNumRegs = 0;$/;"	m	namespace:__anon3	file:
__anon3::gOrderedRegInfo	Arch/Mips/Register.cpp	/^static std::vector<RegInfo> gOrderedRegInfo;$/;"	m	namespace:__anon3	file:
__anon3::gRegFields	Arch/Mips/Register.cpp	/^static std::vector<llvm::Type *> gRegFields;$/;"	m	namespace:__anon3	file:
__anon3::gRegInfo	Arch/Mips/Register.cpp	/^static std::unordered_map<MCSemaRegs, RegInfo> gRegInfo;$/;"	m	namespace:__anon3	file:
__anon3::gRegNum	Arch/Mips/Register.cpp	/^static std::unordered_map<std::string, MCSemaRegs> gRegNum;$/;"	m	namespace:__anon3	file:
__anon3::gRegStateStruct	Arch/Mips/Register.cpp	/^static llvm::StructType *gRegStateStruct = nullptr;$/;"	m	namespace:__anon3	file:
__anon4::AddPadding	Arch/X86/Register.cpp	/^static void AddPadding(llvm::Type *type, int num_elements) {$/;"	f	namespace:__anon4	signature:(llvm::Type *type, int num_elements)
__anon4::AddReg	Arch/X86/Register.cpp	/^static void AddReg(MCSemaRegs reg, const char *name, llvm::Type *type) {$/;"	f	namespace:__anon4	signature:(MCSemaRegs reg, const char *name, llvm::Type *type)
__anon4::AddSubReg	Arch/X86/Register.cpp	/^static void AddSubReg(MCSemaRegs reg, const char *name,$/;"	f	namespace:__anon4	signature:(MCSemaRegs reg, const char *name, llvm::Type *read_type, llvm::Type *write_type, size_t parent_offset)
__anon4::RegInfo	Arch/X86/Register.cpp	/^struct RegInfo {$/;"	s	namespace:__anon4	file:
__anon4::RegInfo::is_sub_reg	Arch/X86/Register.cpp	/^  bool is_sub_reg;$/;"	m	struct:__anon4::RegInfo	file:	access:public
__anon4::RegInfo::name	Arch/X86/Register.cpp	/^  std::string name;$/;"	m	struct:__anon4::RegInfo	file:	access:public
__anon4::RegInfo::parent_offset	Arch/X86/Register.cpp	/^  size_t parent_offset;$/;"	m	struct:__anon4::RegInfo	file:	access:public
__anon4::RegInfo::parent_reg	Arch/X86/Register.cpp	/^  MCSemaRegs parent_reg;$/;"	m	struct:__anon4::RegInfo	file:	access:public
__anon4::RegInfo::read_type	Arch/X86/Register.cpp	/^  llvm::Type *read_type;$/;"	m	struct:__anon4::RegInfo	file:	access:public
__anon4::RegInfo::reg	Arch/X86/Register.cpp	/^  MCSemaRegs reg;$/;"	m	struct:__anon4::RegInfo	file:	access:public
__anon4::RegInfo::state_offset	Arch/X86/Register.cpp	/^  size_t state_offset;$/;"	m	struct:__anon4::RegInfo	file:	access:public
__anon4::RegInfo::write_type	Arch/X86/Register.cpp	/^  llvm::Type *write_type;$/;"	m	struct:__anon4::RegInfo	file:	access:public
__anon4::gBadReg	Arch/X86/Register.cpp	/^static const std::string gBadReg = "MISSING_REG";$/;"	m	namespace:__anon4	file:
__anon4::gLastAddedReg	Arch/X86/Register.cpp	/^static MCSemaRegs gLastAddedReg = llvm::X86::NoRegister;$/;"	m	namespace:__anon4	file:
__anon4::gNumRegs	Arch/X86/Register.cpp	/^static unsigned gNumRegs = 0;$/;"	m	namespace:__anon4	file:
__anon4::gOrderedRegInfo	Arch/X86/Register.cpp	/^static std::vector<RegInfo> gOrderedRegInfo;$/;"	m	namespace:__anon4	file:
__anon4::gRegFields	Arch/X86/Register.cpp	/^static std::vector<llvm::Type *> gRegFields;$/;"	m	namespace:__anon4	file:
__anon4::gRegInfo	Arch/X86/Register.cpp	/^static std::unordered_map<MCSemaRegs, RegInfo> gRegInfo;$/;"	m	namespace:__anon4	file:
__anon4::gRegNum	Arch/X86/Register.cpp	/^static std::unordered_map<std::string, MCSemaRegs> gRegNum;$/;"	m	namespace:__anon4	file:
__anon4::gRegStateStruct	Arch/X86/Register.cpp	/^static llvm::StructType *gRegStateStruct = nullptr;$/;"	m	namespace:__anon4	file:
__anon5::d	Arch/X86/Runtime/State.h	/^typedef union { double d; char pad[16];} PACKED LDOUBLE;$/;"	m	union:__anon5	access:public
__anon5::pad	Arch/X86/Runtime/State.h	/^typedef union { double d; char pad[16];} PACKED LDOUBLE;$/;"	m	union:__anon5	access:public
__builtin_offsetof	Arch/X86/Runtime/print_ELF_32_linux.cpp	7;"	d	file:
__builtin_offsetof	Arch/X86/Runtime/print_ELF_64_linux.cpp	7;"	d	file:
__builtin_offsetof	Arch/X86/Runtime/print_PE_32_windows.cpp	7;"	d	file:
__builtin_offsetof	Arch/X86/Runtime/print_PE_64_windows.cpp	7;"	d	file:
__x86_64__	Arch/X86/Runtime/State.h	19;"	d
addDataSection	CFG/CFG.cpp	/^void NativeModule::addDataSection(VA base, std::vector<uint8_t> &bytes) {$/;"	f	class:NativeModule	signature:(VA base, std::vector<uint8_t> &bytes)
addDataSection	CFG/CFG.cpp	/^void NativeModule::addDataSection(const DataSection &d) {$/;"	f	class:NativeModule	signature:(const DataSection &d)
addDataSection	CFG/CFG.h	/^  void addDataSection(VA, std::vector<uint8_t> &);$/;"	p	class:NativeModule	access:public	signature:(VA, std::vector<uint8_t> &)
addDataSection	CFG/CFG.h	/^  void addDataSection(const DataSection &d);$/;"	p	class:NativeModule	access:public	signature:(const DataSection &d)
addEntry	CFG/CFG.cpp	/^void DataSection::addEntry(const DataSectionEntry &dse) {$/;"	f	class:DataSection	signature:(const DataSectionEntry &dse)
addEntry	CFG/CFG.h	/^  void addEntry(const DataSectionEntry &dse);$/;"	p	class:DataSection	access:public	signature:(const DataSectionEntry &dse)
addEntryPoint	CFG/CFG.cpp	/^void NativeModule::addEntryPoint(const NativeEntrySymbol &ep) {$/;"	f	class:NativeModule	signature:(const NativeEntrySymbol &ep)
addEntryPoint	CFG/CFG.h	/^  void addEntryPoint(const NativeEntrySymbol &ep);$/;"	p	class:NativeModule	access:public	signature:(const NativeEntrySymbol &ep)
addExtCall	CFG/CFG.cpp	/^void NativeModule::addExtCall(ExternalCodeRefPtr p) {$/;"	f	class:NativeModule	signature:(ExternalCodeRefPtr p)
addExtCall	CFG/CFG.h	/^  void addExtCall(ExternalCodeRefPtr p);$/;"	p	class:NativeModule	access:public	signature:(ExternalCodeRefPtr p)
addExtDataRef	CFG/CFG.cpp	/^void NativeModule::addExtDataRef(ExternalDataRefPtr p) {$/;"	f	class:NativeModule	signature:(ExternalDataRefPtr p)
addExtDataRef	CFG/CFG.h	/^  void addExtDataRef(ExternalDataRefPtr p);$/;"	p	class:NativeModule	access:public	signature:(ExternalDataRefPtr p)
addJumpIndexTableDataSection	cfgToLLVM/JumpTables.cpp	/^bool addJumpIndexTableDataSection(TranslationContext &ctx, VA &newVA,$/;"	f	signature:(TranslationContext &ctx, VA &newVA, const JumpIndexTable &table)
addJumpIndexTableDataSection	cfgToLLVM/JumpTables.h	/^bool addJumpIndexTableDataSection(TranslationContext &ctx,$/;"	p	signature:(TranslationContext &ctx, VA &newVA, const JumpIndexTable &table)
addJumpTableDataSection	cfgToLLVM/JumpTables.cpp	/^bool addJumpTableDataSection(TranslationContext &ctx, VA &newVA,$/;"	f	signature:(TranslationContext &ctx, VA &newVA, const MCSJumpTable &table)
addJumpTableDataSection	cfgToLLVM/JumpTables.h	/^bool addJumpTableDataSection(TranslationContext &ctx, VA &newVA,$/;"	p	signature:(TranslationContext &ctx, VA &newVA, const MCSJumpTable &table)
addOffsetTables	CFG/CFG.cpp	/^void NativeModule::addOffsetTables($/;"	f	class:NativeModule	signature:( const std::list<MCSOffsetTablePtr> & tables)
addOffsetTables	CFG/CFG.h	/^  void addOffsetTables(const std::list<MCSOffsetTablePtr> &tables);$/;"	p	class:NativeModule	access:public	signature:(const std::list<MCSOffsetTablePtr> &tables)
addTableDataSection	cfgToLLVM/JumpTables.cpp	/^static bool addTableDataSection(TranslationContext &ctx, VA &newVA,$/;"	f	file:	signature:(TranslationContext &ctx, VA &newVA, const T &table)
add_block	CFG/CFG.cpp	/^void NativeFunction::add_block(NativeBlockPtr b) {$/;"	f	class:NativeFunction	signature:(NativeBlockPtr b)
add_block	CFG/CFG.h	/^  void add_block(NativeBlockPtr);$/;"	p	class:NativeFunction	access:public	signature:(NativeBlockPtr)
add_follow	CFG/CFG.cpp	/^void NativeBlock::add_follow(VA f) {$/;"	f	class:NativeBlock	signature:(VA f)
add_follow	CFG/CFG.h	/^  void add_follow(VA f);$/;"	p	class:NativeBlock	access:public	signature:(VA f)
add_func	CFG/CFG.cpp	/^void NativeModule::add_func(NativeFunctionPtr f) {$/;"	f	class:NativeModule	signature:(NativeFunctionPtr f)
add_func	CFG/CFG.h	/^  void add_func(NativeFunctionPtr f);$/;"	p	class:NativeModule	access:public	signature:(NativeFunctionPtr f)
add_inst	CFG/CFG.cpp	/^void NativeBlock::add_inst(NativeInstPtr p) {$/;"	f	class:NativeBlock	signature:(NativeInstPtr p)
add_inst	CFG/CFG.h	/^  void add_inst(NativeInstPtr);$/;"	p	class:NativeBlock	access:public	signature:(NativeInstPtr)
addr	CFG/CFG.h	/^  const VA addr;$/;"	m	class:NativeEntrySymbol	access:private
addrIsInData	Arch/X86/Util.cpp	/^bool addrIsInData(VA addr, NativeModulePtr m, VA &base, VA minAddr = 0x0) {$/;"	f	signature:(VA addr, NativeModulePtr m, VA &base, VA minAddr = 0x0)
addrIsInData	Arch/X86/Util.h	/^bool addrIsInData(VA addr, NativeModulePtr m, VA &base, VA minAddr);$/;"	p	signature:(VA addr, NativeModulePtr m, VA &base, VA minAddr)
adjustFpuPrecision	Arch/X86/Semantics/fpu.cpp	/^static llvm::Value *adjustFpuPrecision(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::Value *fpuval)
aliasMCSemaScope	BC/Util.h	89;"	d
arch	CFG/CFG.h	/^  uint32_t arch;$/;"	m	class:NativeInst	access:private
archGetImageBase	Arch/Arch.cpp	/^llvm::GlobalVariable *archGetImageBase(llvm::Module *M) {$/;"	f	signature:(llvm::Module *M)
archGetImageBase	Arch/Arch.h	/^llvm::GlobalVariable *archGetImageBase(llvm::Module *M);$/;"	p	signature:(llvm::Module *M)
base	CFG/CFG.h	/^  uint64_t base;$/;"	m	class:DataSection	access:protected
base	CFG/CFG.h	/^  uint64_t base;$/;"	m	class:DataSectionEntry	access:protected
baseAddr	CFG/CFG.h	/^  VA baseAddr;$/;"	m	class:NativeBlock	access:private
block_from_base	CFG/CFG.cpp	/^NativeBlockPtr NativeFunction::block_from_base(VA base) {$/;"	f	class:NativeFunction	signature:(VA base)
block_from_base	CFG/CFG.h	/^  NativeBlockPtr block_from_base(VA);$/;"	p	class:NativeFunction	access:public	signature:(VA)
blocks	CFG/CFG.h	/^  std::map<VA, NativeBlockPtr> blocks;$/;"	m	class:NativeFunction	access:private
bytes	CFG/CFG.h	/^  std::vector<uint8_t> bytes;$/;"	m	class:DataSectionEntry	access:protected
callMemcpy	Arch/X86/Util.cpp	/^llvm::Instruction *callMemcpy(llvm::BasicBlock *B, llvm::Value *dest,$/;"	f	signature:(llvm::BasicBlock *B, llvm::Value *dest, llvm::Value *src, uint32_t size, uint32_t align, bool isVolatile)
calling_conv	CFG/CFG.h	/^  ExternalCodeRef::CallingConvention calling_conv;$/;"	m	class:NativeEntrySymbol	access:private
checkIfBitSet	Arch/X86/Semantics/Stack.cpp	/^static llvm::Value *checkIfBitSet(llvm::Value *field, int bit,$/;"	f	file:	signature:(llvm::Value *field, int bit, llvm::BasicBlock *b)
concatInts	Arch/X86/Util.h	/^static llvm::Value *concatInts(llvm::BasicBlock *b, llvm::Value *a1,$/;"	f	signature:(llvm::BasicBlock *b, llvm::Value *a1, llvm::Value *a2)
conv	CFG/Externals.h	/^  CallingConvention conv;$/;"	m	class:ExternalCodeRef	access:protected
createNewFpuBlock	Arch/X86/Semantics/fpu.cpp	/^static llvm::BasicBlock *createNewFpuBlock(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, std::string instName)
createNewFpuBlock	Arch/X86/Semantics/fpu.cpp	/^static llvm::BasicBlock *createNewFpuBlock(llvm::Function *F,$/;"	f	file:	signature:(llvm::Function *F, llvm::BasicBlock *&b, std::string instname)
d	Arch/X86/Runtime/State.h	/^typedef union { double d; char pad[16];} PACKED LDOUBLE;$/;"	m	union:__anon5	access:public
dataSectionToTypesContents	BC/Util.cpp	/^void dataSectionToTypesContents(const std::list<DataSection> &globaldata,$/;"	f	signature:(const std::list<DataSection> &globaldata, const DataSection &ds, llvm::Module *M, std::vector<llvm::Constant *> &secContents, std::vector<llvm::Type *> &data_section_types, bool convert_to_callback)
dataSectionToTypesContents	BC/Util.h	/^void dataSectionToTypesContents(const std::list<DataSection> &globaldata,$/;"	p	signature:(const std::list<DataSection> &globaldata, const DataSection &ds, llvm::Module *M, std::vector<llvm::Constant *>& secContents, std::vector<llvm::Type *>& data_section_types, bool convert_to_callback)
dataSize	CFG/Externals.h	/^  size_t dataSize;$/;"	m	class:ExternalDataRef	access:protected
data_sections	CFG/CFG.h	/^  std::list<DataSection> data_sections;$/;"	m	class:NativeModule	access:private
decoded_inst	CFG/CFG.h	/^  llvm::MCInst decoded_inst;$/;"	m	class:NativeInst	access:private
deserRefType	CFG/CFG.cpp	/^NativeInst::CFGRefType deserRefType(::Instruction::RefType k) {$/;"	f	signature:(::Instruction::RefType k)
doAAA	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doAAA(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doAAD	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doAAD(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doAAM	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doAAM(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doAAS	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doAAS(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doAdcI	Arch/X86/Semantics/ADD.cpp	/^static InstTransResult doAdcI(NativeInstPtr ip, BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, const MCOperand &src)
doAdcMI	Arch/X86/Semantics/ADD.cpp	/^static InstTransResult doAdcMI(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &src)
doAdcMI8	Arch/X86/Semantics/ADD.cpp	/^static InstTransResult doAdcMI8(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &src)
doAdcMR	Arch/X86/Semantics/ADD.cpp	/^static InstTransResult doAdcMR(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &reg)
doAdcMV	Arch/X86/Semantics/ADD.cpp	/^static InstTransResult doAdcMV(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, Value *rhs)
doAdcRI	Arch/X86/Semantics/ADD.cpp	/^static InstTransResult doAdcRI(NativeInstPtr ip, BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst, const MCOperand &o1, const MCOperand &o2)
doAdcRI8	Arch/X86/Semantics/ADD.cpp	/^static InstTransResult doAdcRI8(NativeInstPtr ip, BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst, const MCOperand &o1, const MCOperand &o2)
doAdcRM	Arch/X86/Semantics/ADD.cpp	/^static InstTransResult doAdcRM(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &o1, const MCOperand &o2)
doAdcRR	Arch/X86/Semantics/ADD.cpp	/^static InstTransResult doAdcRR(NativeInstPtr ip, BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst, const MCOperand &o1, const MCOperand &o2)
doAdcRV	Arch/X86/Semantics/ADD.cpp	/^static InstTransResult doAdcRV(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &o1, const MCOperand &o2)
doAdcVV	Arch/X86/Semantics/ADD.cpp	/^static Value * doAdcVV(NativeInstPtr ip, BasicBlock *&b, Value *dst,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *dst, Value *src)
doAddMI	Arch/X86/Semantics/ADD.cpp	/^static InstTransResult doAddMI(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &imm)
doAddMR	Arch/X86/Semantics/ADD.cpp	/^static InstTransResult doAddMR(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &reg)
doAddMV	Arch/X86/Semantics/ADD.cpp	/^static InstTransResult doAddMV(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, Value *rhs)
doAddRI	Arch/X86/Semantics/ADD.cpp	/^static InstTransResult doAddRI(NativeInstPtr ip, BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst, const MCOperand &src1, const MCOperand &src2)
doAddRM	Arch/X86/Semantics/ADD.cpp	/^static InstTransResult doAddRM(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &o1, const MCOperand &o2)
doAddRR	Arch/X86/Semantics/ADD.cpp	/^static InstTransResult doAddRR(NativeInstPtr ip, BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst, const MCOperand &o1, const MCOperand &o2)
doAddRV	Arch/X86/Semantics/ADD.cpp	/^static InstTransResult doAddRV(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &o1, const MCOperand &o2)
doAddVV	Arch/X86/Semantics/ADD.cpp	/^static Value * doAddVV(NativeInstPtr ip, BasicBlock *&b, Value *lhs,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *lhs, Value *rhs)
doAndMI	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doAndMI(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &imm)
doAndMR	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doAndMR(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &src)
doAndMV	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doAndMV(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, Value *rhs)
doAndRI	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doAndRI(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst, const MCOperand &o1, const MCOperand &o2)
doAndRM	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doAndRM(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &o1, const MCOperand &dst)
doAndRR	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doAndRR(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst, const MCOperand &o1, const MCOperand &o2)
doAndRV	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doAndRV(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &o1, const MCOperand &o2)
doAndVV	Arch/X86/Semantics/bitops.cpp	/^static Value * doAndVV(BasicBlock *&b, Value *o1, Value *o2) {$/;"	f	file:	signature:(BasicBlock *&b, Value *o1, Value *o2)
doAndVV	Arch/X86/Semantics/bitops.cpp	/^static Value * doAndVV(NativeInstPtr ip, BasicBlock *&b, Value *o1, Value *o2) {$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *o1, Value *o2)
doAndVV32	Arch/X86/Semantics/bitops.cpp	/^Value *doAndVV32(BasicBlock *&b, Value *o1, Value *o2) {$/;"	f	signature:(BasicBlock *&b, Value *o1, Value *o2)
doAndVV32	Arch/X86/Semantics/bitops.h	/^llvm::Value *doAndVV32(llvm::BasicBlock *&b, llvm::Value *o1, llvm::Value *o2);$/;"	p	signature:(llvm::BasicBlock *&b, llvm::Value *o1, llvm::Value *o2)
doBLENDVBrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doBLENDVBrm(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *memAddr)
doBLENDVBrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doBLENDVBrr(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src)
doBTRmi	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doBTRmi(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *base, const llvm::MCOperand &index)
doBTRmr	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doBTRmr(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *base, const llvm::MCOperand &index)
doBTSmi	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doBTSmi(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *base, const llvm::MCOperand &index)
doBTSmr	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doBTSmr(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *base, const llvm::MCOperand &index)
doBTSri	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doBTSri(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &base, const llvm::MCOperand &index)
doBlendVV	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value* doBlendVV(llvm::BasicBlock *&b, llvm::Value *input1,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::Value *input1, llvm::Value *input2, llvm::Value *order)
doBsfr	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doBsfr(llvm::BasicBlock *&b, const llvm::MCOperand &dst,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src)
doBsfrm	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doBsfrm(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *memAddr)
doBsrr	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doBsrr(llvm::BasicBlock *&b, const llvm::MCOperand &dst,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src)
doBswapR	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doBswapR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &reg)
doBtmi	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doBtmi(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *base, const llvm::MCOperand &index)
doBtmr	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doBtmr(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *base, const llvm::MCOperand &index)
doBtri	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doBtri(llvm::BasicBlock *&b, const llvm::MCOperand &base,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &base, const llvm::MCOperand &index)
doBtrr	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doBtrr(llvm::BasicBlock *&b, const llvm::MCOperand &base,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &base, const llvm::MCOperand &index)
doCHS	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doCHS(llvm::MCInst &inst, NativeInstPtr ip,$/;"	f	file:	signature:(llvm::MCInst &inst, NativeInstPtr ip, llvm::BasicBlock *&b)
doCMOV	Arch/X86/Semantics/CMOV.cpp	/^static InstTransResult doCMOV(BasicBlock *b, MCOperand &dst, Value *condition,$/;"	f	file:	signature:(BasicBlock *b, MCOperand &dst, Value *condition, Value *newval)
doCVTDQ2PSrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doCVTDQ2PSrr(llvm::BasicBlock *b,$/;"	f	file:	signature:(llvm::BasicBlock *b, const llvm::MCOperand &dest, const llvm::MCOperand &src)
doCVTDQ2PSvv	Arch/X86/Semantics/SSE.cpp	/^llvm::Value *doCVTDQ2PSvv(llvm::BasicBlock *&b, llvm::Value *dest,$/;"	f	signature:(llvm::BasicBlock *&b, llvm::Value *dest, llvm::Value *src)
doCVTPD2PSrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doCVTPD2PSrm(NativeInstPtr ip, llvm::BasicBlock *b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *b, const llvm::MCOperand &dest, llvm::Value *src)
doCVTPD2PSrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doCVTPD2PSrr(llvm::BasicBlock *b,$/;"	f	file:	signature:(llvm::BasicBlock *b, const llvm::MCOperand &dest, const llvm::MCOperand &src)
doCVTPD2PSvv	Arch/X86/Semantics/SSE.cpp	/^llvm::Value *doCVTPD2PSvv(llvm::BasicBlock *&b, llvm::Value *dest,$/;"	f	signature:(llvm::BasicBlock *&b, llvm::Value *dest, llvm::Value *src)
doCVTPS2PDrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doCVTPS2PDrm(NativeInstPtr ip, llvm::BasicBlock *b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *b, const llvm::MCOperand &dest, llvm::Value *src)
doCVTPS2PDrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doCVTPS2PDrr(llvm::BasicBlock *b,$/;"	f	file:	signature:(llvm::BasicBlock *b, const llvm::MCOperand &dest, const llvm::MCOperand &src)
doCVTPS2PDvv	Arch/X86/Semantics/SSE.cpp	/^llvm::Value *doCVTPS2PDvv(llvm::BasicBlock *&b, llvm::Value *dest,$/;"	f	signature:(llvm::BasicBlock *&b, llvm::Value *dest, llvm::Value *src)
doCVTSD2SSrV	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doCVTSD2SSrV(NativeModulePtr natM,$/;"	f	file:	signature:(NativeModulePtr natM, llvm::BasicBlock *&block, NativeInstPtr ip, llvm::MCInst &inst, llvm::Value *src, const llvm::MCOperand &dst)
doCVTSI2SrV	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doCVTSI2SrV(NativeModulePtr natM,$/;"	f	file:	signature:(NativeModulePtr natM, llvm::BasicBlock *&block, NativeInstPtr ip, llvm::MCInst &inst, llvm::Value *src, const llvm::MCOperand &dst)
doCVTSS2SDrV	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doCVTSS2SDrV(NativeModulePtr natM,$/;"	f	file:	signature:(NativeModulePtr natM, llvm::BasicBlock *& block, NativeInstPtr ip, llvm::MCInst &inst, llvm::Value *src, const llvm::MCOperand &dst)
doCVTTPS2DQrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doCVTTPS2DQrm(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *memAddr)
doCVTTPS2DQrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doCVTTPS2DQrr(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src)
doCVTTPS2DQvv	Arch/X86/Semantics/SSE.cpp	/^llvm::Value *doCVTTPS2DQvv(llvm::BasicBlock *&b, llvm::Value *in) {$/;"	f	signature:(llvm::BasicBlock *&b, llvm::Value *in)
doCVTTS2SIrV	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doCVTTS2SIrV(NativeModulePtr natM,$/;"	f	file:	signature:(NativeModulePtr natM, llvm::BasicBlock *& block, NativeInstPtr ip, llvm::MCInst &inst, llvm::Value *src, const llvm::MCOperand &dst)
doCVTT_to_SI_rm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doCVTT_to_SI_rm(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
doCVTT_to_SI_rr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doCVTT_to_SI_rr(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
doCallM	Arch/X86/Semantics/Branches.cpp	/^static void doCallM(llvm::BasicBlock *&block, NativeInstPtr ip,$/;"	f	file:	signature:(llvm::BasicBlock *&block, NativeInstPtr ip, llvm::Value *mem_addr, bool is_jump)
doCallPC	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult doCallPC(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, VA tgtAddr, bool is_jump)
doCallPCExtern	Arch/Mips/Semantics/JALR.cpp	/^static InstTransResult doCallPCExtern(BasicBlock *&b, std::string target, NativeInst ip, bool sp_adjust = false) {$/;"	f	file:	signature:(BasicBlock *&b, std::string target, NativeInst ip, bool sp_adjust = false)
doCallPCExtern	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult doCallPCExtern(llvm::BasicBlock *&b, std::string target,$/;"	f	namespace:x86	signature:(llvm::BasicBlock *&b, std::string target, bool is_jump)
doCallPCExtern	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult doCallPCExtern(llvm::BasicBlock *&b, std::string target,$/;"	f	namespace:x86_64	signature:(llvm::BasicBlock *&b, std::string target, bool is_jump)
doCallV	Arch/Mips/Semantics/JALR.cpp	/^static void doCallV(BasicBlock       *&block,$/;"	f	file:	signature:(BasicBlock *&block, NativeInst ip, Value *call_addr)
doCallV	Arch/X86/Semantics/Branches.cpp	/^static void doCallV(llvm::BasicBlock *&block, NativeInstPtr ip,$/;"	f	file:	signature:(llvm::BasicBlock *&block, NativeInstPtr ip, llvm::Value *call_addr, bool is_jump)
doCdq	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doCdq(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doClc	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doClc(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doCld	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doCld(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doCmpMI	Arch/X86/Semantics/CMPTEST.cpp	/^static InstTransResult doCmpMI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *r1, const llvm::MCOperand &r2)
doCmpMR	Arch/X86/Semantics/CMPTEST.cpp	/^static InstTransResult doCmpMR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *mem, const llvm::MCOperand &reg)
doCmpMV	Arch/X86/Semantics/CMPTEST.cpp	/^static InstTransResult doCmpMV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *r1, llvm::Value *rhs)
doCmpRI	Arch/X86/Semantics/CMPTEST.cpp	/^static InstTransResult doCmpRI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &lhs, const llvm::MCOperand &rhs)
doCmpRM	Arch/X86/Semantics/CMPTEST.cpp	/^static InstTransResult doCmpRM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &reg, llvm::Value *mem)
doCmpRR	Arch/X86/Semantics/CMPTEST.cpp	/^static InstTransResult doCmpRR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &lhs, const llvm::MCOperand &rhs)
doCmpRV	Arch/X86/Semantics/CMPTEST.cpp	/^static InstTransResult doCmpRV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &lhs, llvm::Value *rhs)
doCmpVV	Arch/X86/Semantics/CMPTEST.h	/^static void doCmpVV(NativeInstPtr ip, llvm::BasicBlock *b, llvm::Value *lhs,$/;"	f	signature:(NativeInstPtr ip, llvm::BasicBlock *b, llvm::Value *lhs, llvm::Value *rhs)
doCmps	Arch/X86/Semantics/String.cpp	/^DO_REPE_CALL(doCmps<opSize>(bodyBegin), Cmps)$/;"	p	file:	signature:(bodyBegin)
doCmps	Arch/X86/Semantics/String.cpp	/^DO_REPNE_CALL(doCmps<opSize>(bodyBegin), Cmps)$/;"	p	file:	signature:(bodyBegin)
doCmps	Arch/X86/Semantics/String.cpp	/^static llvm::BasicBlock *doCmps(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doCmpsV	Arch/X86/Semantics/String.cpp	/^static llvm::BasicBlock *doCmpsV(llvm::BasicBlock *pred) {$/;"	f	file:	signature:(llvm::BasicBlock *pred)
doCmpxchgRM	Arch/X86/Semantics/Exchanges.cpp	/^static InstTransResult doCmpxchgRM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *dstAddr, const llvm::MCOperand &srcReg)
doCmpxchgRR	Arch/X86/Semantics/Exchanges.cpp	/^static InstTransResult doCmpxchgRR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dstReg, const llvm::MCOperand &srcReg)
doCondBranch	Arch/X86/Semantics/Jcc.cpp	/^static InstTransResult doCondBranch(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::BasicBlock *ifTrue, llvm::BasicBlock *ifFalse, llvm::Value *cond)
doCwd	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doCwd(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doDecM	Arch/X86/Semantics/INCDECNEG.cpp	/^static InstTransResult doDecM(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *m) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *m)
doDecR	Arch/X86/Semantics/INCDECNEG.cpp	/^static InstTransResult doDecR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst)
doDecV	Arch/X86/Semantics/INCDECNEG.cpp	/^static llvm::Value *doDecV(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *val) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *val)
doDivM	Arch/X86/Semantics/MULDIV.cpp	/^static InstTransResult doDivM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *memLoc)
doDivR	Arch/X86/Semantics/MULDIV.cpp	/^static InstTransResult doDivR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &div)
doDivV	Arch/X86/Semantics/MULDIV.cpp	/^static InstTransResult doDivV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *divisor, llvm::Instruction::BinaryOps whichdiv)
doDoubleShuffle	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value* doDoubleShuffle(llvm::BasicBlock *&b, llvm::Value *input1,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::Value *input1, llvm::Value *input2, unsigned order)
doEnter	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult doEnter(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &frameSize, const llvm::MCOperand &nestingLevel)
doEnter	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult doEnter(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	namespace:x86	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &frameSize, const llvm::MCOperand &nestingLevel)
doEnter	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult doEnter(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	namespace:x86_64	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &frameSize, const llvm::MCOperand &nestingLevel)
doExtraction	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value* doExtraction(llvm::BasicBlock *&b, llvm::Value *input,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::Value *input, unsigned position)
doF2XM1	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doF2XM1(llvm::MCInst &inst, NativeInstPtr ip,$/;"	f	file:	signature:(llvm::MCInst &inst, NativeInstPtr ip, llvm::BasicBlock *&b)
doFABS	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFABS(llvm::MCInst &inst, NativeInstPtr ip,$/;"	f	file:	signature:(llvm::MCInst &inst, NativeInstPtr ip, llvm::BasicBlock *&b)
doFCOS	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFCOS(llvm::MCInst &inst, NativeInstPtr ip,$/;"	f	file:	signature:(llvm::MCInst &inst, NativeInstPtr ip, llvm::BasicBlock *&b)
doFDECSTP	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFDECSTP(llvm::MCInst &inst, NativeInstPtr ip,$/;"	f	file:	signature:(llvm::MCInst &inst, NativeInstPtr ip, llvm::BasicBlock *&b)
doFINCSTP	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFINCSTP(llvm::MCInst &inst, NativeInstPtr ip,$/;"	f	file:	signature:(llvm::MCInst &inst, NativeInstPtr ip, llvm::BasicBlock *&b)
doFOpMR	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFOpMR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, MCSemaRegs dstReg, llvm::Value *memAddr, unsigned opcode, llvm::Instruction::BinaryOps fpop)
doFOpPRR	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFOpPRR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, MCSemaRegs srcReg, MCSemaRegs dstReg, unsigned opcode, llvm::Instruction::BinaryOps fpop)
doFOpRR	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFOpRR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, MCSemaRegs srcReg, MCSemaRegs dstReg, unsigned opcode, llvm::Instruction::BinaryOps fpop)
doFPTAN	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFPTAN(llvm::MCInst &inst, NativeInstPtr ip,$/;"	f	file:	signature:(llvm::MCInst &inst, NativeInstPtr ip, llvm::BasicBlock *&b)
doFRNDINT	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFRNDINT(llvm::MCInst &inst, NativeInstPtr ip,$/;"	f	file:	signature:(llvm::MCInst &inst, NativeInstPtr ip, llvm::BasicBlock *&b)
doFSCALE	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFSCALE(llvm::MCInst &inst, NativeInstPtr ip,$/;"	f	file:	signature:(llvm::MCInst &inst, NativeInstPtr ip, llvm::BasicBlock *&b)
doFSINCOS	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFSINCOS(llvm::MCInst &inst, NativeInstPtr ip,$/;"	f	file:	signature:(llvm::MCInst &inst, NativeInstPtr ip, llvm::BasicBlock *&b)
doFSQRT	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFSQRT(llvm::MCInst &inst, NativeInstPtr ip,$/;"	f	file:	signature:(llvm::MCInst &inst, NativeInstPtr ip, llvm::BasicBlock *&b)
doFYL2Xx	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFYL2Xx(llvm::MCInst &inst, NativeInstPtr ip,$/;"	f	file:	signature:(llvm::MCInst &inst, NativeInstPtr ip, llvm::BasicBlock *&b)
doFiOpMR	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFiOpMR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, MCSemaRegs dstReg, llvm::Value *memAddr, unsigned opcode, llvm::Instruction::BinaryOps fpop)
doFildM	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFildM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *memAddr)
doFistM	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFistM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *memAddr)
doFistTpM	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFistTpM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *memAddr)
doFistpM	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFistpM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *memAddr)
doFldC	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFldC(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, long double constv)
doFldM	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFldM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *memAddr)
doFldR	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFldR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &r)
doFldcw	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFldcw(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *memAddr)
doFsin	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFsin(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, MCSemaRegs reg)
doFstM	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFstM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *memAddr)
doFstR	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFstR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &r)
doFstcw	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFstcw(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *memAddr)
doFstpM	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFstpM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *memAddr)
doFstpR	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFstpR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &r)
doFstsV	Arch/X86/Semantics/fpu.cpp	/^static llvm::Value *doFstsV(llvm::BasicBlock *&b) {$/;"	f	file:	signature:(llvm::BasicBlock *&b)
doFstswm	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFstswm(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *memAddr)
doFstswr	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFstswr(NativeInstPtr ip, llvm::BasicBlock *&b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b)
doFucom	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFucom(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, MCSemaRegs reg, unsigned int stackPops)
doFucomi	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFucomi(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, unsigned reg, unsigned int stackPops)
doFxch	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult doFxch(llvm::MCInst &inst, NativeInstPtr ip,$/;"	f	file:	signature:(llvm::MCInst &inst, NativeInstPtr ip, llvm::BasicBlock *&b)
doHlt	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doHlt(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doIDivM	Arch/X86/Semantics/MULDIV.cpp	/^static InstTransResult doIDivM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *memLoc)
doIDivR	Arch/X86/Semantics/MULDIV.cpp	/^static InstTransResult doIDivR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &div)
doIMulM	Arch/X86/Semantics/MULDIV.cpp	/^static InstTransResult doIMulM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *memAddr)
doIMulR	Arch/X86/Semantics/MULDIV.cpp	/^static InstTransResult doIMulR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &src)
doIMulRM	Arch/X86/Semantics/MULDIV.cpp	/^static InstTransResult doIMulRM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &lhs, llvm::Value *rhs)
doIMulRMI	Arch/X86/Semantics/MULDIV.cpp	/^static InstTransResult doIMulRMI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *lhs, const llvm::MCOperand &rhs)
doIMulRMI8	Arch/X86/Semantics/MULDIV.cpp	/^static InstTransResult doIMulRMI8(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *lhs, const llvm::MCOperand &rhs)
doIMulRMV	Arch/X86/Semantics/MULDIV.cpp	/^static InstTransResult doIMulRMV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *lhs, llvm::Value *rhs)
doIMulRR	Arch/X86/Semantics/MULDIV.cpp	/^static InstTransResult doIMulRR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &lhs, const llvm::MCOperand &rhs)
doIMulRRI	Arch/X86/Semantics/MULDIV.cpp	/^static InstTransResult doIMulRRI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &lhs, const llvm::MCOperand &rhs)
doIMulRRI8	Arch/X86/Semantics/MULDIV.cpp	/^static InstTransResult doIMulRRI8(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &lhs, const llvm::MCOperand &rhs)
doIMulRRV	Arch/X86/Semantics/MULDIV.cpp	/^static InstTransResult doIMulRRV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, const llvm::MCOperand &lhs, const llvm::MCOperand &dst)
doIMulV	Arch/X86/Semantics/MULDIV.cpp	/^static IMulRes doIMulV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *rhs)
doIMulVV	Arch/X86/Semantics/MULDIV.cpp	/^static IMulRes doIMulVV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *lhs, llvm::Value *rhs)
doIMulVVV	Arch/X86/Semantics/MULDIV.cpp	/^static llvm::Value *doIMulVVV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *lhs, llvm::Value *rhs)
doIncM	Arch/X86/Semantics/INCDECNEG.cpp	/^static InstTransResult doIncM(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr)
doIncR	Arch/X86/Semantics/INCDECNEG.cpp	/^static InstTransResult doIncR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst)
doIncV	Arch/X86/Semantics/INCDECNEG.cpp	/^static llvm::Value *doIncV(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *val) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *val)
doInsertion	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value* doInsertion(llvm::BasicBlock *&b, llvm::Value *input,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::Value *input, llvm::Value *what, unsigned position)
doInt	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doInt(llvm::BasicBlock *&b, const llvm::MCOperand &o) {$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &o)
doInt3	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doInt3(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doJumpIndexTableViaSwitch	cfgToLLVM/JumpTables.cpp	/^void doJumpIndexTableViaSwitch(llvm::BasicBlock *&block, NativeInstPtr ip) {$/;"	f	signature:(llvm::BasicBlock *&block, NativeInstPtr ip)
doJumpIndexTableViaSwitch	cfgToLLVM/JumpTables.h	/^void doJumpIndexTableViaSwitch(llvm::BasicBlock *& block, NativeInst *ip);$/;"	p	signature:(llvm::BasicBlock *& block, NativeInst *ip)
doJumpOffsetTableViaSwitchReg	cfgToLLVM/JumpTables.cpp	/^void doJumpOffsetTableViaSwitchReg(TranslationContext &ctx,$/;"	f	signature:(TranslationContext &ctx, llvm::BasicBlock *&block, llvm::Value *regVal, llvm::BasicBlock *&default_block, llvm::Value *data_location, MCSOffsetTablePtr ot_ptr)
doJumpOffsetTableViaSwitchReg	cfgToLLVM/JumpTables.h	/^void doJumpOffsetTableViaSwitchReg(TranslationContext &ctx, llvm::BasicBlock *&block,$/;"	p	signature:(TranslationContext &ctx, llvm::BasicBlock *&block, llvm::Value *regVal, llvm::BasicBlock *&default_block, llvm::Value *data_location, MCSOffsetTablePtr ot_ptr)
doJumpTableViaData	cfgToLLVM/JumpTables.cpp	/^void doJumpTableViaData(TranslationContext &ctx, llvm::BasicBlock *&block,$/;"	f	signature:(TranslationContext &ctx, llvm::BasicBlock *&block, const int bitness)
doJumpTableViaData	cfgToLLVM/JumpTables.cpp	/^void doJumpTableViaData(llvm::BasicBlock *&block, llvm::Value *fptr,$/;"	f	signature:(llvm::BasicBlock *&block, llvm::Value *fptr, const int bitness)
doJumpTableViaData	cfgToLLVM/JumpTables.h	/^void doJumpTableViaData(TranslationContext &ctx, llvm::BasicBlock *&block,$/;"	p	signature:(TranslationContext &ctx, llvm::BasicBlock *&block, const int bitness)
doJumpTableViaData	cfgToLLVM/JumpTables.h	/^void doJumpTableViaData(llvm::BasicBlock *&block, llvm::Value *val,$/;"	p	signature:(llvm::BasicBlock *&block, llvm::Value *val, const int bitness)
doJumpTableViaSwitch	cfgToLLVM/JumpTables.cpp	/^static void doJumpTableViaSwitch(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
doJumpTableViaSwitch	cfgToLLVM/JumpTables.cpp	/^void doJumpTableViaSwitch(TranslationContext &ctx, llvm::BasicBlock *&block,$/;"	f	signature:(TranslationContext &ctx, llvm::BasicBlock *&block, int bitness)
doJumpTableViaSwitch	cfgToLLVM/JumpTables.h	/^void doJumpTableViaSwitch(TranslationContext &ctx, llvm::BasicBlock *&block,$/;"	p	signature:(TranslationContext &ctx, llvm::BasicBlock *&block, const int bitness)
doJumpTableViaSwitchReg	cfgToLLVM/JumpTables.cpp	/^static void doJumpTableViaSwitchReg(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block, llvm::Value *regVal, llvm::BasicBlock *&default_block)
doJumpTableViaSwitchReg	cfgToLLVM/JumpTables.cpp	/^void doJumpTableViaSwitchReg(TranslationContext &ctx, llvm::BasicBlock *&block,$/;"	f	signature:(TranslationContext &ctx, llvm::BasicBlock *&block, llvm::Value *regVal, llvm::BasicBlock *&default_block, const int bitness)
doJumpTableViaSwitchReg	cfgToLLVM/JumpTables.h	/^void doJumpTableViaSwitchReg(TranslationContext &ctx, llvm::BasicBlock *& block,$/;"	p	signature:(TranslationContext &ctx, llvm::BasicBlock *& block, llvm::Value *regVal, llvm::BasicBlock *&default_block, const int bitness)
doLAHF	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doLAHF(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doLRet	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult doLRet(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doLea	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doLea(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, const llvm::MCOperand &dst)
doLeaRef	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doLeaRef(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
doLeaV	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doLeaV(llvm::BasicBlock *&b, const llvm::MCOperand &dst,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *addrInt)
doLeave	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult doLeave(NativeInstPtr ip, llvm::BasicBlock *b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *b)
doLeave64	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult doLeave64(NativeInstPtr ip, llvm::BasicBlock *b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *b)
doLods	Arch/X86/Semantics/String.cpp	/^static InstTransResult doLods(llvm::BasicBlock *&b, NativeInstPtr ip) {$/;"	f	file:	signature:(llvm::BasicBlock *&b, NativeInstPtr ip)
doLodsV	Arch/X86/Semantics/String.cpp	/^static llvm::BasicBlock *doLodsV(llvm::BasicBlock *pred) {$/;"	f	file:	signature:(llvm::BasicBlock *pred)
doLoop	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult doLoop(llvm::BasicBlock *&b, llvm::BasicBlock *T,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::BasicBlock *T, llvm::BasicBlock *F)
doLoopE	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult doLoopE(llvm::BasicBlock *&b, llvm::BasicBlock *T,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::BasicBlock *T, llvm::BasicBlock *F)
doLoopEIMPL	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult doLoopEIMPL(llvm::BasicBlock *&b, llvm::BasicBlock *T,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::BasicBlock *T, llvm::BasicBlock *F)
doLoopIMPL	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult doLoopIMPL(llvm::BasicBlock *&b, llvm::BasicBlock *T,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::BasicBlock *T, llvm::BasicBlock *F)
doLoopNE	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult doLoopNE(llvm::BasicBlock *&b, llvm::BasicBlock *T,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::BasicBlock *T, llvm::BasicBlock *F)
doLoopNEIMPL	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult doLoopNEIMPL(llvm::BasicBlock *&b, llvm::BasicBlock *T,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::BasicBlock *T, llvm::BasicBlock *F)
doMAXMIN_FP_VECTOR_rm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doMAXMIN_FP_VECTOR_rm(NativeInstPtr ip,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &op1, llvm::Value *memAddr)
doMAXMIN_FP_VECTOR_rr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doMAXMIN_FP_VECTOR_rr(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &op1, const llvm::MCOperand &op2)
doMAXMINrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doMAXMINrm(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &op1, llvm::Value *memAddr)
doMAXMINrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doMAXMINrr(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &op1, const llvm::MCOperand &op2)
doMAXMINvv	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value* doMAXMINvv(llvm::BasicBlock *&block, llvm::Value *op1,$/;"	f	file:	signature:(llvm::BasicBlock *&block, llvm::Value *op1, llvm::Value *op2)
doMIMov	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult doMIMov(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *dstAddr, const llvm::MCOperand &src)
doMIMovV	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult doMIMovV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *dstAddr, llvm::Value *src)
doMOVDDUPrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doMOVDDUPrr(llvm::BasicBlock *b,$/;"	f	file:	signature:(llvm::BasicBlock *b, const llvm::MCOperand &dest, const llvm::MCOperand &src)
doMOVHLPSrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doMOVHLPSrr(NativeInstPtr ip, llvm::BasicBlock *b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *b, const llvm::MCOperand &dest, const llvm::MCOperand &src)
doMOVHPDmr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doMOVHPDmr(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *memAddr, const llvm::MCOperand &src)
doMOVHPDrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doMOVHPDrm(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *memAddr)
doMOVLHPSrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doMOVLHPSrr(NativeInstPtr ip, llvm::BasicBlock *b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *b, const llvm::MCOperand &dest, const llvm::MCOperand &src)
doMOVLPDrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doMOVLPDrm(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *memAddr)
doMOVSmr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doMOVSmr(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
doMOVSrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doMOVSrm(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
doMOVSrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doMOVSrr(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
doMRMov	Arch/X86/Semantics/MOV.h	/^static InstTransResult doMRMov(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *dstAddr, const llvm::MCOperand &src)
doMRMovBE	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult doMRMovBE(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *dstAddr, const llvm::MCOperand &src)
doMSMov	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult doMSMov(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *dstAddr, const llvm::MCOperand &src)
doMovSXRM	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult doMovSXRM(NativeInstPtr ip, llvm::BasicBlock *&block,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&block, const llvm::MCOperand &dst, llvm::Value *src)
doMovSXRR	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult doMovSXRR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src)
doMovSXV	Arch/X86/Semantics/MOV.cpp	/^static llvm::Value *doMovSXV(NativeInstPtr ip, llvm::BasicBlock * b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock * b, llvm::Value *src)
doMovZXRM	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult doMovZXRM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *src)
doMovZXRR	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult doMovZXRR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src)
doMovs	Arch/X86/Semantics/String.cpp	/^static InstTransResult doMovs(llvm::BasicBlock *&b, NativeInstPtr ip) {$/;"	f	file:	signature:(llvm::BasicBlock *&b, NativeInstPtr ip)
doMovsV	Arch/X86/Semantics/String.cpp	/^static llvm::BasicBlock *doMovsV(llvm::BasicBlock *pred) {$/;"	f	file:	signature:(llvm::BasicBlock *pred)
doMulM	Arch/X86/Semantics/MULDIV.cpp	/^static InstTransResult doMulM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *memAddr)
doMulR	Arch/X86/Semantics/MULDIV.cpp	/^static InstTransResult doMulR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &src)
doMulV	Arch/X86/Semantics/MULDIV.cpp	/^static void doMulV(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *rhs) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *rhs)
doNegM	Arch/X86/Semantics/INCDECNEG.cpp	/^static InstTransResult doNegM(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *v) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *v)
doNegR	Arch/X86/Semantics/INCDECNEG.cpp	/^static InstTransResult doNegR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst)
doNegV	Arch/X86/Semantics/INCDECNEG.cpp	/^static llvm::Value *doNegV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *v)
doNewShift	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doNewShift(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *shift_count, llvm::Value *fallback = nullptr)
doNonCondBranch	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult doNonCondBranch(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::BasicBlock *tgt)
doNoop	Arch/X86/Semantics/ADD.cpp	/^static InstTransResult doNoop(BasicBlock *b) {$/;"	f	file:	signature:(BasicBlock *b)
doNoop	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doNoop(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doNotM	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doNotM(NativeInstPtr ip, BasicBlock *&b, Value *a) {$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *a)
doNotR	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doNotR(NativeInstPtr ip, BasicBlock *&b, const MCOperand &o) {$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, const MCOperand &o)
doNotV	Arch/X86/Semantics/bitops.cpp	/^static Value * doNotV(NativeInstPtr ip, BasicBlock *&b, Value *v) {$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *v)
doOrMI	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doOrMI(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &imm)
doOrMR	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doOrMR(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &src)
doOrMV	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doOrMV(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, Value *rhs)
doOrRI	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doOrRI(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst, const MCOperand &o1, const MCOperand &o2)
doOrRM	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doOrRM(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &o1, const MCOperand &dst)
doOrRR	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doOrRR(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst, const MCOperand &o1, const MCOperand &o2)
doOrRV	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doOrRV(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &o1, const MCOperand &o2)
doOrVV	Arch/X86/Semantics/bitops.cpp	/^static Value * doOrVV(NativeInstPtr ip, BasicBlock *&b, Value *o1, Value *o2) {$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *o1, Value *o2)
doPEXTRWmr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPEXTRWmr(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *memAddr, const llvm::MCOperand &src, const llvm::MCOperand &order)
doPEXTRWri	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPEXTRWri(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src, const llvm::MCOperand &order)
doPINSRWrmi	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPINSRWrmi(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *memAddr, const llvm::MCOperand &order)
doPINSRWrri	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPINSRWrri(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src, const llvm::MCOperand &order)
doPMULUDQVV	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value *doPMULUDQVV(llvm::BasicBlock *b, llvm::Value *dest,$/;"	f	file:	signature:(llvm::BasicBlock *b, llvm::Value *dest, llvm::Value *src)
doPMULUDQrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPMULUDQrm(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *memAddr)
doPMULUDQrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPMULUDQrr(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src)
doPSHUFBrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPSHUFBrm(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *memAddr)
doPSHUFBrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPSHUFBrr(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src)
doPSHUFDmi	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPSHUFDmi(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *mem_addr, const llvm::MCOperand &order)
doPSHUFDri	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPSHUFDri(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src, const llvm::MCOperand &order)
doPSHUFHWmi	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPSHUFHWmi(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *mem_addr, const llvm::MCOperand &order)
doPSHUFHWri	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPSHUFHWri(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src, const llvm::MCOperand &order)
doPSHUFHWvv	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value* doPSHUFHWvv(llvm::BasicBlock *&b, llvm::Value *in,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::Value *in, llvm::Value *dstVal, const llvm::MCOperand &order)
doPSHUFLWmi	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPSHUFLWmi(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *mem_addr, const llvm::MCOperand &order)
doPSHUFLWri	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPSHUFLWri(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src, const llvm::MCOperand &order)
doPSHUFLWvv	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value* doPSHUFLWvv(llvm::BasicBlock *&b, llvm::Value *in,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::Value *in, llvm::Value *dstVal, const llvm::MCOperand &order)
doPSLLri	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPSLLri(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src)
doPSLLrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPSLLrm(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *memAddr)
doPSLLrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPSLLrr(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src)
doPSRAri	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPSRAri(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src)
doPSRArm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPSRArm(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *memAddr)
doPSRArr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPSRArr(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src)
doPSRLri	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPSRLri(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src)
doPSRLrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPSRLrm(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *memAddr)
doPSRLrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPSRLrr(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src)
doPUNPCKVV	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPUNPCKVV(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *v1, llvm::Value *v2)
doPUNPCKrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPUNPCKrm(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *memAddr)
doPUNPCKrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doPUNPCKrr(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src)
doPopAV	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult doPopAV(NativeInstPtr ip, llvm::BasicBlock *b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *b)
doPopF	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult doPopF(NativeInstPtr ip, llvm::BasicBlock *b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *b)
doPopM	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult doPopM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr)
doPopR	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult doPopR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst)
doPopV	Arch/X86/Semantics/Stack.cpp	/^static llvm::Value *doPopV(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doPushAV	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult doPushAV(NativeInstPtr ip, llvm::BasicBlock *b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *b)
doPushF	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult doPushF(NativeInstPtr ip, llvm::BasicBlock *b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *b)
doPushI	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult doPushI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &src)
doPushR	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult doPushR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &src)
doPushRMM	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult doPushRMM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr)
doPushV	Arch/X86/Semantics/Stack.cpp	/^static void doPushV(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *v) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *v)
doPushVT	Arch/X86/Semantics/Stack.cpp	/^static void doPushVT(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *v) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *v)
doRIMov	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult doRIMov(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &src, const llvm::MCOperand &dst)
doRIMovV	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult doRIMovV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *src, const llvm::MCOperand &dst)
doRMMov	Arch/X86/Semantics/MOV.h	/^static InstTransResult doRMMov(NativeInstPtr ip, llvm::BasicBlock *b,$/;"	f	signature:(NativeInstPtr ip, llvm::BasicBlock *b, llvm::Value *srcAddr, const llvm::MCOperand &dst)
doRMMovBE	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult doRMMovBE(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *srcAddr, const llvm::MCOperand &dst)
doRRMov	Arch/X86/Semantics/MOV.h	/^static InstTransResult doRRMov(NativeInstPtr ip, llvm::BasicBlock *b,$/;"	f	signature:(NativeInstPtr ip, llvm::BasicBlock *b, const llvm::MCOperand &dst, const llvm::MCOperand &src)
doRRMovD	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult doRRMovD(NativeInstPtr ip, llvm::BasicBlock *b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *b, const llvm::MCOperand &dst, const llvm::MCOperand &src)
doRSMov	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult doRSMov(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src)
doRclM1	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRclM1(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr)
doRclMCL	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRclMCL(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr)
doRclMI	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRclMI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, const llvm::MCOperand &count)
doRclMV	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRclMV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, llvm::Value *rhs)
doRclR1	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRclR1(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &reg)
doRclRCL	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRclRCL(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &reg)
doRclRI	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRclRI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst1, const llvm::MCOperand &reg, const llvm::MCOperand &count)
doRclVV	Arch/X86/Semantics/ShiftRoll.cpp	/^static llvm::Value *doRclVV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *dst, llvm::Value *count)
doRcrM1	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRcrM1(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr)
doRcrMCL	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRcrMCL(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr)
doRcrMI	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRcrMI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, const llvm::MCOperand &count)
doRcrMV	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRcrMV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, llvm::Value *rhs)
doRcrR1	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRcrR1(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &reg)
doRcrRCL	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRcrRCL(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &reg)
doRcrRI	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRcrRI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst1, const llvm::MCOperand &reg, const llvm::MCOperand &count)
doRcrVV	Arch/X86/Semantics/ShiftRoll.cpp	/^static llvm::Value *doRcrVV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *dst, llvm::Value *count)
doRdtsc	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doRdtsc(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doRep	Arch/X86/Semantics/String.cpp	/^static llvm::BasicBlock *doRep(llvm::BasicBlock *b, llvm::BasicBlock *bodyB,$/;"	f	file:	signature:(llvm::BasicBlock *b, llvm::BasicBlock *bodyB, llvm::BasicBlock *bodyE, llvm::CmpInst::Predicate check_op)
doRepLods	Arch/X86/Semantics/String.cpp	/^static InstTransResult doRepLods(llvm::BasicBlock *&b) {$/;"	f	file:	signature:(llvm::BasicBlock *&b)
doRepMovs	Arch/X86/Semantics/String.cpp	/^static InstTransResult doRepMovs(llvm::BasicBlock *&b) {$/;"	f	file:	signature:(llvm::BasicBlock *&b)
doRepN	Arch/X86/Semantics/String.cpp	/^static llvm::BasicBlock *doRepN(llvm::BasicBlock *b, llvm::BasicBlock *bodyB,$/;"	f	file:	signature:(llvm::BasicBlock *b, llvm::BasicBlock *bodyB, llvm::BasicBlock *bodyE)
doRepNe	Arch/X86/Semantics/String.cpp	/^static llvm::BasicBlock *doRepNe(llvm::BasicBlock *b, llvm::BasicBlock *bodyB,$/;"	f	file:	signature:(llvm::BasicBlock *b, llvm::BasicBlock *bodyB, llvm::BasicBlock *bodyE)
doRepStos	Arch/X86/Semantics/String.cpp	/^static InstTransResult doRepStos(llvm::BasicBlock *&b) {$/;"	f	file:	signature:(llvm::BasicBlock *&b)
doRepe	Arch/X86/Semantics/String.cpp	/^static llvm::BasicBlock *doRepe(llvm::BasicBlock *b, llvm::BasicBlock *bodyB,$/;"	f	file:	signature:(llvm::BasicBlock *b, llvm::BasicBlock *bodyB, llvm::BasicBlock *bodyE)
doRet	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult doRet(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doRetI	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult doRetI(llvm::BasicBlock *&b, const llvm::MCOperand &o) {$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &o)
doRolM1	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRolM1(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr)
doRolMCL	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRolMCL(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr)
doRolMI	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRolMI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, const llvm::MCOperand &count)
doRolMV	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRolMV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, llvm::Value *rhs)
doRolR1	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRolR1(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &reg)
doRolRCL	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRolRCL(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &reg)
doRolRI	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRolRI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst1, const llvm::MCOperand &reg, const llvm::MCOperand &count)
doRolVV	Arch/X86/Semantics/ShiftRoll.cpp	/^static llvm::Value *doRolVV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *dst, llvm::Value *count)
doRorM1	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRorM1(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr)
doRorMCL	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRorMCL(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr)
doRorMI	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRorMI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, const llvm::MCOperand &count)
doRorMV	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRorMV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, llvm::Value *rhs)
doRorR1	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRorR1(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &reg)
doRorRCL	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRorRCL(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &reg)
doRorRI	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doRorRI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst1, const llvm::MCOperand &reg, const llvm::MCOperand &count)
doRorVV	Arch/X86/Semantics/ShiftRoll.cpp	/^static llvm::Value *doRorVV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *dst, llvm::Value *count)
doSHUFPDrmi	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doSHUFPDrmi(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *mem_addr, const llvm::MCOperand &order)
doSHUFPDrri	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doSHUFPDrri(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src, const llvm::MCOperand &order)
doSHUFPSrmi	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doSHUFPSrmi(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, llvm::Value *mem_addr, const llvm::MCOperand &order)
doSHUFPSrri	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doSHUFPSrri(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src, const llvm::MCOperand &order)
doSMMov	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult doSMMov(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *dstAddr, const llvm::MCOperand &src)
doSarM1	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doSarM1(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr)
doSarMCL	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doSarMCL(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr)
doSarMI	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doSarMI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, const llvm::MCOperand &imm)
doSarMV	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doSarMV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, llvm::Value *rhs)
doSarR1	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doSarR1(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &reg)
doSarRCL	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doSarRCL(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &reg)
doSarRI	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doSarRI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &src1, const llvm::MCOperand &src2, const llvm::MCOperand &dst)
doSbbMI	Arch/X86/Semantics/SUB.cpp	/^static InstTransResult doSbbMI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, const llvm::MCOperand &imm)
doSbbMR	Arch/X86/Semantics/SUB.cpp	/^static InstTransResult doSbbMR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, const llvm::MCOperand &src)
doSbbMV	Arch/X86/Semantics/SUB.cpp	/^static InstTransResult doSbbMV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, llvm::Value *rhs)
doSbbRI	Arch/X86/Semantics/SUB.cpp	/^static InstTransResult doSbbRI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &o1, const llvm::MCOperand &o2, const llvm::MCOperand &dst)
doSbbRM	Arch/X86/Semantics/SUB.cpp	/^static InstTransResult doSbbRM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &o1, llvm::Value *addr, const llvm::MCOperand &dst)
doSbbRR	Arch/X86/Semantics/SUB.cpp	/^static InstTransResult doSbbRR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &o1, const llvm::MCOperand &o2, const llvm::MCOperand &dst)
doSbbRV	Arch/X86/Semantics/SUB.cpp	/^static InstTransResult doSbbRV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, const llvm::MCOperand &dst, const llvm::MCOperand &src1)
doSbbVV	Arch/X86/Semantics/SUB.cpp	/^static llvm::Value *doSbbVV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *o1, llvm::Value *o2)
doScas	Arch/X86/Semantics/String.cpp	/^DO_REPNE_CALL(doScas<opSize>(bodyBegin), Scas)$/;"	p	file:	signature:(bodyBegin)
doScas	Arch/X86/Semantics/String.cpp	/^static llvm::BasicBlock *doScas(llvm::BasicBlock *B) {$/;"	f	file:	signature:(llvm::BasicBlock *B)
doScasV	Arch/X86/Semantics/String.cpp	/^static llvm::BasicBlock *doScasV(llvm::BasicBlock *pred) {$/;"	f	file:	signature:(llvm::BasicBlock *pred)
doSetaV	Arch/X86/Semantics/SETcc.cpp	/^static llvm::Value *doSetaV(NativeInstPtr ip, llvm::BasicBlock *&b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b)
doSetaeV	Arch/X86/Semantics/SETcc.cpp	/^static llvm::Value *doSetaeV(NativeInstPtr ip, llvm::BasicBlock *&b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b)
doSetbV	Arch/X86/Semantics/SETcc.cpp	/^static llvm::Value *doSetbV(NativeInstPtr ip, llvm::BasicBlock *&b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b)
doSetbeV	Arch/X86/Semantics/SETcc.cpp	/^static llvm::Value *doSetbeV(NativeInstPtr ip, llvm::BasicBlock *&b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b)
doSeteV	Arch/X86/Semantics/SETcc.cpp	/^static llvm::Value *doSeteV(NativeInstPtr ip, llvm::BasicBlock *&b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b)
doSetgV	Arch/X86/Semantics/SETcc.cpp	/^static llvm::Value *doSetgV(NativeInstPtr ip, llvm::BasicBlock *&b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b)
doSetgeV	Arch/X86/Semantics/SETcc.cpp	/^static llvm::Value *doSetgeV(NativeInstPtr ip, llvm::BasicBlock *&b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b)
doSetlV	Arch/X86/Semantics/SETcc.cpp	/^static llvm::Value *doSetlV(NativeInstPtr ip, llvm::BasicBlock *&b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b)
doSetleV	Arch/X86/Semantics/SETcc.cpp	/^static llvm::Value *doSetleV(NativeInstPtr ip, llvm::BasicBlock *&b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b)
doSetneV	Arch/X86/Semantics/SETcc.cpp	/^static llvm::Value *doSetneV(NativeInstPtr ip, llvm::BasicBlock *&b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b)
doSetnpV	Arch/X86/Semantics/SETcc.cpp	/^static llvm::Value *doSetnpV(NativeInstPtr ip, llvm::BasicBlock *&b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b)
doSetnsV	Arch/X86/Semantics/SETcc.cpp	/^static llvm::Value *doSetnsV(NativeInstPtr ip, llvm::BasicBlock *&b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b)
doSetpV	Arch/X86/Semantics/SETcc.cpp	/^static llvm::Value *doSetpV(NativeInstPtr ip, llvm::BasicBlock *&b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b)
doSetsV	Arch/X86/Semantics/SETcc.cpp	/^static llvm::Value *doSetsV(NativeInstPtr ip, llvm::BasicBlock *&b) {$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b)
doShiftOp	Arch/X86/Semantics/ShiftRoll.cpp	/^static llvm::Value *doShiftOp(NativeInstPtr ip, llvm::BasicBlock *b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *b, llvm::Value *src, llvm::Value *count)
doShlM1	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShlM1(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr)
doShlMCL	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShlMCL(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr)
doShlMI	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShlMI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, const llvm::MCOperand &imm)
doShlMV	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShlMV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, llvm::Value *rhs)
doShlR1	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShlR1(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &reg)
doShlRCL	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShlRCL(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &reg)
doShlRI	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShlRI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &src1, const llvm::MCOperand &src2, const llvm::MCOperand &dst)
doShldMCL	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShldMCL(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, const llvm::MCOperand &src1)
doShldMV	Arch/X86/Semantics/ShiftRoll.cpp	/^static llvm::Value *doShldMV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, unsigned srcReg1, llvm::Value *shiftBy)
doShldRCL	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShldRCL(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src1)
doShldRI	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShldRI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src1, const llvm::MCOperand &src2)
doShldRV	Arch/X86/Semantics/ShiftRoll.cpp	/^static llvm::Value *doShldRV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, unsigned dstReg, unsigned srcReg1, llvm::Value* shiftBy)
doShldVV	Arch/X86/Semantics/ShiftRoll.cpp	/^static llvm::Value *doShldVV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value* addr, unsigned srcReg1, llvm::Value* shiftBy)
doShrM1	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShrM1(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr)
doShrMCL	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShrMCL(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr)
doShrMI	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShrMI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, const llvm::MCOperand &imm)
doShrMV	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShrMV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, llvm::Value *rhs)
doShrR1	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShrR1(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &reg)
doShrRCL	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShrRCL(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &reg)
doShrRI	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShrRI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &src1, const llvm::MCOperand &src2, const llvm::MCOperand &dst)
doShrVV32	Arch/X86/Semantics/ShiftRoll.cpp	/^llvm::Value *doShrVV32(llvm::BasicBlock *&b, llvm::Value *src,$/;"	f	signature:(llvm::BasicBlock *&b, llvm::Value *src, llvm::Value *count)
doShrVV32	Arch/X86/Semantics/ShiftRoll.h	/^llvm::Value *doShrVV32(llvm::BasicBlock *&b, llvm::Value *src,$/;"	p	signature:(llvm::BasicBlock *&b, llvm::Value *src, llvm::Value *count)
doShrdRCL	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShrdRCL(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src1)
doShrdRI	Arch/X86/Semantics/ShiftRoll.cpp	/^static InstTransResult doShrdRI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src1, const llvm::MCOperand &src2)
doShrdVV	Arch/X86/Semantics/ShiftRoll.cpp	/^static llvm::Value *doShrdVV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, unsigned dstReg, unsigned srcReg1, llvm::Value* shiftBy)
doShuffle	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value* doShuffle(llvm::BasicBlock *&b, llvm::Value *input,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::Value *input, unsigned order)
doShuffleRR	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value* doShuffleRR(llvm::BasicBlock *&b, llvm::Value *input,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::Value *input, llvm::Value *order)
doStc	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doStc(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doStd	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doStd(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doStos	Arch/X86/Semantics/String.cpp	/^static InstTransResult doStos(llvm::BasicBlock *&b, NativeInstPtr ip) {$/;"	f	file:	signature:(llvm::BasicBlock *&b, NativeInstPtr ip)
doStosV	Arch/X86/Semantics/String.cpp	/^static llvm::BasicBlock *doStosV(llvm::BasicBlock *pred) {$/;"	f	file:	signature:(llvm::BasicBlock *pred)
doSubMI	Arch/X86/Semantics/SUB.cpp	/^static InstTransResult doSubMI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, const llvm::MCOperand &imm)
doSubMR	Arch/X86/Semantics/SUB.cpp	/^static InstTransResult doSubMR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, const llvm::MCOperand &o1)
doSubMV	Arch/X86/Semantics/SUB.cpp	/^static InstTransResult doSubMV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *lhs, llvm::Value *rhs)
doSubRI	Arch/X86/Semantics/SUB.cpp	/^static InstTransResult doSubRI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src1, const llvm::MCOperand &src2)
doSubRM	Arch/X86/Semantics/SUB.cpp	/^static InstTransResult doSubRM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, const llvm::MCOperand &o1, const llvm::MCOperand &o2)
doSubRR	Arch/X86/Semantics/SUB.cpp	/^static InstTransResult doSubRR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dst, const llvm::MCOperand &src1, const llvm::MCOperand &src2)
doSubRV	Arch/X86/Semantics/SUB.cpp	/^static InstTransResult doSubRV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *addr, const llvm::MCOperand &dst, const llvm::MCOperand &src1)
doSubVV	Arch/X86/Semantics/SUB.cpp	/^static llvm::Value *doSubVV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *lhs, llvm::Value *rhs)
doSubtractImageBase	Arch/Arch.cpp	/^llvm::Value *doSubtractImageBase(llvm::Value *original,$/;"	f	signature:(llvm::Value *original, llvm::BasicBlock *block, int width)
doSubtractImageBase	Arch/Arch.h	/^inline static llvm::Value *doSubtractImageBase($/;"	f	signature:( llvm::Value *original, llvm::BasicBlock *block)
doSubtractImageBase	Arch/Arch.h	/^llvm::Value *doSubtractImageBase(llvm::Value *original,$/;"	p	signature:(llvm::Value *original, llvm::BasicBlock *block, int width)
doSubtractImageBaseInt	Arch/Arch.cpp	/^llvm::Value *doSubtractImageBaseInt(llvm::Value *original,$/;"	f	signature:(llvm::Value *original, llvm::BasicBlock *block)
doSubtractImageBaseInt	Arch/Arch.h	/^llvm::Value *doSubtractImageBaseInt(llvm::Value *original,$/;"	p	signature:(llvm::Value *original, llvm::BasicBlock *block)
doTestMI	Arch/X86/Semantics/CMPTEST.cpp	/^static InstTransResult doTestMI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *lhs, const llvm::MCOperand &rhs)
doTestMV	Arch/X86/Semantics/CMPTEST.cpp	/^static InstTransResult doTestMV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *lhs, llvm::Value *rhs)
doTestRI	Arch/X86/Semantics/CMPTEST.cpp	/^static InstTransResult doTestRI(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &lhs, const llvm::MCOperand &rhs)
doTestRM	Arch/X86/Semantics/CMPTEST.cpp	/^static InstTransResult doTestRM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &lhs, llvm::Value *rhs)
doTestRR	Arch/X86/Semantics/CMPTEST.cpp	/^static InstTransResult doTestRR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &lhs, const llvm::MCOperand &rhs)
doTestRV	Arch/X86/Semantics/CMPTEST.cpp	/^static InstTransResult doTestRV(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &lhs, llvm::Value *rhs)
doTestVV	Arch/X86/Semantics/CMPTEST.cpp	/^static void doTestVV(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *lhs,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, llvm::Value *lhs, llvm::Value *rhs)
doTrap	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult doTrap(llvm::BasicBlock *b) {$/;"	f	file:	signature:(llvm::BasicBlock *b)
doUCOMISrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doUCOMISrm(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &op1, llvm::Value *memAddr)
doUCOMISrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doUCOMISrr(llvm::BasicBlock *&b,$/;"	f	file:	signature:(llvm::BasicBlock *&b, const llvm::MCOperand &op1, const llvm::MCOperand &op2)
doUCOMISvv	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doUCOMISvv(llvm::BasicBlock *& block, llvm::Value *op1,$/;"	f	file:	signature:(llvm::BasicBlock *& block, llvm::Value *op1, llvm::Value *op2)
doUNPCKHPDrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doUNPCKHPDrr(llvm::BasicBlock *b,$/;"	f	file:	signature:(llvm::BasicBlock *b, const llvm::MCOperand &dest, const llvm::MCOperand &src)
doUNPCKHPDvv	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value *doUNPCKHPDvv(llvm::BasicBlock *b, llvm::Value *dest,$/;"	f	file:	signature:(llvm::BasicBlock *b, llvm::Value *dest, llvm::Value *src)
doUNPCKLPDrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doUNPCKLPDrm(NativeInstPtr ip, llvm::BasicBlock *b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *b, const llvm::MCOperand &dest, llvm::Value *src)
doUNPCKLPDrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doUNPCKLPDrr(llvm::BasicBlock *b,$/;"	f	file:	signature:(llvm::BasicBlock *b, const llvm::MCOperand &dest, const llvm::MCOperand &src)
doUNPCKLPDvv	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value *doUNPCKLPDvv(llvm::BasicBlock *b, llvm::Value *dest,$/;"	f	file:	signature:(llvm::BasicBlock *b, llvm::Value *dest, llvm::Value *src)
doUNPCKLPSrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doUNPCKLPSrm(NativeInstPtr ip, llvm::BasicBlock *b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *b, const llvm::MCOperand &dest, llvm::Value *src)
doUNPCKLPSrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult doUNPCKLPSrr(llvm::BasicBlock *b,$/;"	f	file:	signature:(llvm::BasicBlock *b, const llvm::MCOperand &dest, const llvm::MCOperand &src)
doUNPCKLPSvv	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value *doUNPCKLPSvv(llvm::BasicBlock *b, llvm::Value *dest,$/;"	f	file:	signature:(llvm::BasicBlock *b, llvm::Value *dest, llvm::Value *src)
doUnpack	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value* doUnpack(llvm::BasicBlock *&b, llvm::Value *v1,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::Value *v1, llvm::Value *v2)
doXaddRM	Arch/X86/Semantics/Exchanges.cpp	/^static InstTransResult doXaddRM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &srcReg, llvm::Value *dstAddr)
doXaddRR	Arch/X86/Semantics/Exchanges.cpp	/^static InstTransResult doXaddRR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &dstReg, const llvm::MCOperand &srcReg)
doXchgRM	Arch/X86/Semantics/Exchanges.cpp	/^static InstTransResult doXchgRM(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &r, llvm::Value *mem)
doXchgRR	Arch/X86/Semantics/Exchanges.cpp	/^static InstTransResult doXchgRR(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &o1, const llvm::MCOperand &o2)
doXorMI	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doXorMI(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &imm)
doXorMR	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doXorMR(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &reg)
doXorMV	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doXorMV(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, Value *rhs)
doXorRI	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doXorRI(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst, const MCOperand &o1, const MCOperand &o2)
doXorRM	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doXorRM(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst, const MCOperand &src1, Value *mem)
doXorRR	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doXorRR(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, const MCOperand &dst, const MCOperand &o1, const MCOperand &o2)
doXorRV	Arch/X86/Semantics/bitops.cpp	/^static InstTransResult doXorRV(NativeInstPtr ip, BasicBlock *&b, Value *addr,$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *addr, const MCOperand &o1, const MCOperand &o2)
doXorVV	Arch/X86/Semantics/bitops.cpp	/^static Value * doXorVV(NativeInstPtr ip, BasicBlock *&b, Value *o1, Value *o2) {$/;"	f	file:	signature:(NativeInstPtr ip, BasicBlock *&b, Value *o1, Value *o2)
do_PANDNrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_PANDNrm(NativeInstPtr ip, llvm::BasicBlock *& block,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *& block, const llvm::MCOperand &o1, llvm::Value *addr)
do_PANDNrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_PANDNrr(NativeInstPtr ip, llvm::BasicBlock *& block,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *& block, const llvm::MCOperand &o1, const llvm::MCOperand &o2)
do_SATURATED_SUB	Arch/X86/Semantics/SSE.cpp	/^static llvm::Value* do_SATURATED_SUB(llvm::BasicBlock *&b, llvm::Value *v1,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::Value *v1, llvm::Value *v2)
do_SATURATED_SUB_RM	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SATURATED_SUB_RM(NativeInstPtr ip,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *& block, const llvm::MCOperand &o1, llvm::Value *addr)
do_SATURATED_SUB_RR	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SATURATED_SUB_RR(NativeInstPtr ip,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *& block, const llvm::MCOperand &o1, const llvm::MCOperand &o2)
do_SSE_COMPARE	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SSE_COMPARE(const llvm::MCOperand &dst,$/;"	f	file:	signature:(const llvm::MCOperand &dst, llvm::BasicBlock *&b, llvm::Value *v1, llvm::Value *v2)
do_SSE_COMPARE_RM	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SSE_COMPARE_RM(NativeInstPtr ip,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *& block, const llvm::MCOperand &o1, llvm::Value *addr)
do_SSE_COMPARE_RR	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SSE_COMPARE_RR(NativeInstPtr ip,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *& block, const llvm::MCOperand &o1, const llvm::MCOperand &o2)
do_SSE_EXTEND_OP	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SSE_EXTEND_OP(const llvm::MCOperand &dst,$/;"	f	file:	signature:(const llvm::MCOperand &dst, llvm::BasicBlock *&b, llvm::Value *v1)
do_SSE_EXTEND_RM	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SSE_EXTEND_RM(NativeInstPtr ip,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *& block, const llvm::MCOperand &o1, llvm::Value *addr)
do_SSE_EXTEND_RR	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SSE_EXTEND_RR(NativeInstPtr ip,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *& block, const llvm::MCOperand &o1, const llvm::MCOperand &o2)
do_SSE_FP_VECTOR_OP	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SSE_FP_VECTOR_OP(const llvm::MCOperand &dst,$/;"	f	file:	signature:(const llvm::MCOperand &dst, llvm::BasicBlock *&b, llvm::Value *v1, llvm::Value *v2)
do_SSE_FP_VECTOR_RM	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SSE_FP_VECTOR_RM(NativeInstPtr ip,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *& block, const llvm::MCOperand &o1, llvm::Value *addr)
do_SSE_FP_VECTOR_RR	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SSE_FP_VECTOR_RR(NativeInstPtr ip,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *& block, const llvm::MCOperand &o1, const llvm::MCOperand &o2)
do_SSE_INT_RM	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SSE_INT_RM(NativeInstPtr ip,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *& block, const llvm::MCOperand &o1, llvm::Value *addr)
do_SSE_INT_RR	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SSE_INT_RR(NativeInstPtr ip,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *& block, const llvm::MCOperand &o1, const llvm::MCOperand &o2)
do_SSE_INT_VV	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SSE_INT_VV(unsigned reg, llvm::BasicBlock *& block,$/;"	f	file:	signature:(unsigned reg, llvm::BasicBlock *& block, llvm::Value *o1, llvm::Value *o2)
do_SSE_RM	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SSE_RM(NativeInstPtr ip, llvm::BasicBlock *& block,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *& block, const llvm::MCOperand &o1, llvm::Value *addr)
do_SSE_RR	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SSE_RR(NativeInstPtr ip, llvm::BasicBlock *& block,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *& block, const llvm::MCOperand &o1, const llvm::MCOperand &o2)
do_SSE_VECTOR_OP	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SSE_VECTOR_OP(const llvm::MCOperand &dst,$/;"	f	file:	signature:(const llvm::MCOperand &dst, llvm::BasicBlock *&b, llvm::Value *v1, llvm::Value *v2)
do_SSE_VECTOR_RM	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SSE_VECTOR_RM(NativeInstPtr ip,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *& block, const llvm::MCOperand &o1, llvm::Value *addr)
do_SSE_VECTOR_RR	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SSE_VECTOR_RR(NativeInstPtr ip,$/;"	f	file:	signature:(NativeInstPtr ip, llvm::BasicBlock *& block, const llvm::MCOperand &o1, const llvm::MCOperand &o2)
do_SSE_VV	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult do_SSE_VV(unsigned reg, llvm::BasicBlock *& block,$/;"	f	file:	signature:(unsigned reg, llvm::BasicBlock *& block, llvm::Value *o1, llvm::Value *o2)
doesReturn	CFG/CFG.cpp	/^bool NativeEntrySymbol::doesReturn(void) const {$/;"	f	class:NativeEntrySymbol	signature:(void) const
doesReturn	CFG/CFG.h	/^  bool doesReturn(void) const;$/;"	p	class:NativeEntrySymbol	access:public	signature:(void) const
does_return	CFG/CFG.h	/^  bool does_return;$/;"	m	class:NativeEntrySymbol	access:private
emitFunctionDef	Arch/X86/Runtime/print_PE_64_windows.cpp	/^void emitFunctionDef(const char func_name[]) {$/;"	f	signature:(const char func_name[])
emitInternalCall	Arch/X86/Semantics/Branches.cpp	/^static llvm::CallInst *emitInternalCall(llvm::BasicBlock *&b, llvm::Module *M,$/;"	f	file:	signature:(llvm::BasicBlock *&b, llvm::Module *M, const std::string &target_fn, VA ret_addr, bool is_jmp)
emitJumpIndexWrite	cfgToLLVM/JumpTables.cpp	/^static llvm::BasicBlock *emitJumpIndexWrite(llvm::Function *F, uint8_t idx_val,$/;"	f	file:	signature:(llvm::Function *F, uint8_t idx_val, unsigned dest_reg, llvm::BasicBlock *contBlock)
emitTestCode	Arch/X86/Semantics/Jcc.cpp	/^llvm::Value *emitTestCode(llvm::BasicBlock *&b, unsigned opCode) {$/;"	f	signature:(llvm::BasicBlock *&b, unsigned opCode)
emitTestCodeMips	Arch/Mips/Semantics/BNE.cpp	/^Value *emitTestCodeMips(BasicBlock *&b, unsigned opCode, Value *r0, Value *r1) {$/;"	f	signature:(BasicBlock *&b, unsigned opCode, Value *r0, Value *r1)
entries	CFG/CFG.h	/^  std::list<DataSectionEntry> entries;$/;"	m	class:DataSection	access:protected
entries	CFG/CFG.h	/^  std::vector<NativeEntrySymbol> entries;$/;"	m	class:NativeModule	access:public
extCallTgt	CFG/CFG.h	/^  ExternalCodeRefPtr extCallTgt;$/;"	m	class:NativeInst	access:private
extDataRef	CFG/CFG.h	/^  ExternalDataRefPtr extDataRef;$/;"	m	class:NativeInst	access:private
ext_call_target	CFG/CFG.h	/^  bool ext_call_target;$/;"	m	class:NativeInst	access:private
ext_data_ref	CFG/CFG.h	/^  bool ext_data_ref;$/;"	m	class:NativeInst	access:private
external_code_refs	CFG/CFG.h	/^  std::list<ExternalCodeRefPtr> external_code_refs;$/;"	m	class:NativeModule	access:private
external_data_refs	CFG/CFG.h	/^  std::list<ExternalDataRefPtr> external_data_refs;$/;"	m	class:NativeModule	access:private
follows	CFG/CFG.h	/^  std::list<VA> follows;$/;"	m	class:NativeBlock	access:private
fputag_vals	Arch/X86/Semantics/fpu.h	/^enum fputag_vals {$/;"	g
full	Arch/X86/Semantics/MULDIV.cpp	/^  llvm::Value *full;$/;"	m	struct:IMulRes	file:	access:public
funcEntryVA	CFG/CFG.h	/^  VA funcEntryVA;$/;"	m	class:NativeFunction	access:private
funcSign	CFG/Externals.h	/^  std::string funcSign;$/;"	m	class:ExternalCodeRef	access:protected
funcSymName	CFG/CFG.h	/^  std::string funcSymName;$/;"	m	class:NativeFunction	access:private
funcs	CFG/CFG.h	/^  std::unordered_map<VA, NativeFunctionPtr> funcs;$/;"	m	class:NativeModule	access:private
gAddressSize	Arch/Arch.cpp	/^static int gAddressSize = 0;$/;"	m	namespace:__anon1	file:
gArchType	Arch/Arch.cpp	/^static llvm::Triple::ArchType gArchType;$/;"	m	namespace:__anon1	file:
gBadReg	Arch/Mips/Register.cpp	/^static const std::string gBadReg = "MISSING_REG";$/;"	m	namespace:__anon3	file:
gBadReg	Arch/X86/Register.cpp	/^static const std::string gBadReg = "MISSING_REG";$/;"	m	namespace:__anon4	file:
gCallingConv	Arch/Arch.cpp	/^static llvm::CallingConv::ID gCallingConv;$/;"	m	namespace:__anon1	file:
gContext	BC/Util.cpp	/^llvm::LLVMContext *gContext = nullptr;$/;"	v
gDataLayout	Arch/Arch.cpp	/^static std::string gDataLayout;$/;"	m	namespace:__anon1	file:
gDisassembler	Arch/Arch.cpp	/^static const llvm::MCDisassembler *gDisassembler = nullptr;$/;"	m	namespace:__anon1	file:
gDispatcher	Arch/Arch.cpp	/^static DispatchMap gDispatcher;$/;"	m	namespace:__anon1	file:
gExtendedOpcodeNames	Arch/Arch.h	/^static std::map<unsigned, std::string> gExtendedOpcodeNames = {$/;"	m	namespace:llvm::X86
gLastAddedReg	Arch/Mips/Register.cpp	/^static MCSemaRegs gLastAddedReg = llvm::Mips::NoRegister;$/;"	m	namespace:__anon3	file:
gLastAddedReg	Arch/X86/Register.cpp	/^static MCSemaRegs gLastAddedReg = llvm::X86::NoRegister;$/;"	m	namespace:__anon4	file:
gNumRegs	Arch/Mips/Register.cpp	/^static unsigned gNumRegs = 0;$/;"	m	namespace:__anon3	file:
gNumRegs	Arch/X86/Register.cpp	/^static unsigned gNumRegs = 0;$/;"	m	namespace:__anon4	file:
gOSType	Arch/Arch.cpp	/^static llvm::Triple::OSType gOSType;$/;"	m	namespace:__anon1	file:
gOrderedRegInfo	Arch/Mips/Register.cpp	/^static std::vector<RegInfo> gOrderedRegInfo;$/;"	m	namespace:__anon3	file:
gOrderedRegInfo	Arch/X86/Register.cpp	/^static std::vector<RegInfo> gOrderedRegInfo;$/;"	m	namespace:__anon4	file:
gRegFields	Arch/Mips/Register.cpp	/^static std::vector<llvm::Type *> gRegFields;$/;"	m	namespace:__anon3	file:
gRegFields	Arch/X86/Register.cpp	/^static std::vector<llvm::Type *> gRegFields;$/;"	m	namespace:__anon4	file:
gRegInfo	Arch/Mips/Register.cpp	/^static std::unordered_map<MCSemaRegs, RegInfo> gRegInfo;$/;"	m	namespace:__anon3	file:
gRegInfo	Arch/X86/Register.cpp	/^static std::unordered_map<MCSemaRegs, RegInfo> gRegInfo;$/;"	m	namespace:__anon4	file:
gRegNum	Arch/Mips/Register.cpp	/^static std::unordered_map<std::string, MCSemaRegs> gRegNum;$/;"	m	namespace:__anon3	file:
gRegNum	Arch/X86/Register.cpp	/^static std::unordered_map<std::string, MCSemaRegs> gRegNum;$/;"	m	namespace:__anon4	file:
gRegStateStruct	Arch/Mips/Register.cpp	/^static llvm::StructType *gRegStateStruct = nullptr;$/;"	m	namespace:__anon3	file:
gRegStateStruct	Arch/X86/Register.cpp	/^static llvm::StructType *gRegStateStruct = nullptr;$/;"	m	namespace:__anon4	file:
gTriple	Arch/Arch.cpp	/^static std::string gTriple;$/;"	m	namespace:__anon1	file:
getAddr	CFG/CFG.cpp	/^VA NativeEntrySymbol::getAddr(void) const {$/;"	f	class:NativeEntrySymbol	signature:(void) const
getAddr	CFG/CFG.h	/^  VA getAddr(void) const;$/;"	p	class:NativeEntrySymbol	access:public	signature:(void) const
getAddrFromExpr	Arch/X86/Util.cpp	/^llvm::Value *getAddrFromExpr(llvm::BasicBlock *b, NativeModulePtr mod,$/;"	f	namespace:mips	signature:(llvm::BasicBlock *b, NativeModulePtr mod, const llvm::MCOperand &Obase, const llvm::MCOperand &Oscale, const llvm::MCOperand &Oindex, const int64_t Odisp, const llvm::MCOperand &Oseg, bool dataOffset)
getAddrFromExpr	Arch/X86/Util.cpp	/^llvm::Value *getAddrFromExpr(llvm::BasicBlock *b, NativeModulePtr mod,$/;"	f	namespace:x86	signature:(llvm::BasicBlock *b, NativeModulePtr mod, const llvm::MCOperand &Obase, const llvm::MCOperand &Oscale, const llvm::MCOperand &Oindex, const int64_t Odisp, const llvm::MCOperand &Oseg, bool dataOffset)
getAddrFromExpr	Arch/X86/Util.cpp	/^llvm::Value *getAddrFromExpr(llvm::BasicBlock *b, NativeModulePtr mod,$/;"	f	namespace:x86_64	signature:(llvm::BasicBlock *b, NativeModulePtr mod, const llvm::MCOperand &Obase, const llvm::MCOperand &Oscale, const llvm::MCOperand &Oindex, const int64_t Odisp, const llvm::MCOperand &Oseg, bool dataOffset)
getAddrFromExpr	Arch/X86/Util.cpp	/^llvm::Value *getAddrFromExpr(llvm::BasicBlock *b, NativeModulePtr mod,$/;"	f	signature:(llvm::BasicBlock *b, NativeModulePtr mod, const llvm::MCInst &inst, NativeInstPtr ip, uint32_t which)
getAddrFromExpr	Arch/X86/Util.h	/^llvm::Value *getAddrFromExpr(llvm::BasicBlock *b, NativeModulePtr mod,$/;"	p	namespace:mips	signature:(llvm::BasicBlock *b, NativeModulePtr mod, const llvm::MCOperand &Obase, const llvm::MCOperand &Oscale, const llvm::MCOperand &Oindex, const int64_t Odisp, const llvm::MCOperand &Oseg, bool dataOffset)
getAddrFromExpr	Arch/X86/Util.h	/^llvm::Value *getAddrFromExpr(llvm::BasicBlock *b, NativeModulePtr mod,$/;"	p	namespace:x86	signature:(llvm::BasicBlock *b, NativeModulePtr mod, const llvm::MCOperand &Obase, const llvm::MCOperand &Oscale, const llvm::MCOperand &Oindex, const int64_t Odisp, const llvm::MCOperand &Oseg, bool dataOffset)
getAddrFromExpr	Arch/X86/Util.h	/^llvm::Value *getAddrFromExpr(llvm::BasicBlock *b, NativeModulePtr mod,$/;"	p	namespace:x86_64	signature:(llvm::BasicBlock *b, NativeModulePtr mod, const llvm::MCOperand &Obase, const llvm::MCOperand &Oscale, const llvm::MCOperand &Oindex, const int64_t Odisp, const llvm::MCOperand &Oseg, bool dataOffset)
getAddrFromExpr	Arch/X86/Util.h	/^llvm::Value *getAddrFromExpr(llvm::BasicBlock *b, NativeModulePtr mod,$/;"	p	signature:(llvm::BasicBlock *b, NativeModulePtr mod, const llvm::MCInst &inst, NativeInstPtr ip, uint32_t which)
getArgc	CFG/CFG.cpp	/^int NativeEntrySymbol::getArgc(void) const {$/;"	f	class:NativeEntrySymbol	signature:(void) const
getArgc	CFG/CFG.h	/^  int getArgc(void) const;$/;"	p	class:NativeEntrySymbol	access:public	signature:(void) const
getBase	CFG/CFG.cpp	/^uint64_t DataSection::getBase(void) const {$/;"	f	class:DataSection	signature:(void) const
getBase	CFG/CFG.cpp	/^uint64_t DataSectionEntry::getBase(void) const {$/;"	f	class:DataSectionEntry	signature:(void) const
getBase	CFG/CFG.h	/^  uint64_t getBase(void) const;$/;"	p	class:DataSection	access:public	signature:(void) const
getBase	CFG/CFG.h	/^  uint64_t getBase(void) const;$/;"	p	class:DataSectionEntry	access:public	signature:(void) const
getBit	Arch/X86/Semantics/ShiftRoll.cpp	/^static llvm::Value *getBit(llvm::BasicBlock *b, llvm::Value *val, int which) {$/;"	f	file:	signature:(llvm::BasicBlock *b, llvm::Value *val, int which)
getBytes	CFG/CFG.cpp	/^const std::vector<uint8_t> &DataSectionEntry::getBytes(void) const {$/;"	f	class:DataSectionEntry	signature:(void) const
getBytes	CFG/CFG.cpp	/^std::vector<uint8_t> DataSection::getBytes(void) const {$/;"	f	class:DataSection	signature:(void) const
getBytes	CFG/CFG.h	/^  const std::vector<uint8_t> &getBytes(void) const;$/;"	p	class:DataSectionEntry	access:public	signature:(void) const
getBytes	CFG/CFG.h	/^  std::vector<uint8_t> getBytes(void) const;$/;"	p	class:DataSection	access:public	signature:(void) const
getCallingConvention	CFG/Externals.h	/^  CallingConvention getCallingConvention(void) {$/;"	f	class:ExternalCodeRef	access:public	signature:(void)
getConstTable	cfgToLLVM/JumpTables.h	/^  virtual const std::vector<T> &getConstTable(void) const {$/;"	f	class:Table	access:public	signature:(void) const
getConv	CFG/CFG.cpp	/^ExternalCodeRef::CallingConvention NativeEntrySymbol::getConv(void) const {$/;"	f	class:NativeEntrySymbol	signature:(void) const
getConv	CFG/CFG.h	/^  ExternalCodeRef::CallingConvention getConv(void) const;$/;"	p	class:NativeEntrySymbol	access:public	signature:(void) const
getData	CFG/CFG.cpp	/^const std::list<DataSection> &NativeModule::getData(void) const {$/;"	f	class:NativeModule	signature:(void) const
getData	CFG/CFG.h	/^  const std::list<DataSection> &getData(void) const;$/;"	p	class:NativeModule	access:public	signature:(void) const
getDataSize	CFG/Externals.h	/^  size_t getDataSize() {$/;"	f	class:ExternalDataRef	access:public	signature:()
getEntries	CFG/CFG.cpp	/^const std::list<DataSectionEntry> &DataSection::getEntries(void) const {$/;"	f	class:DataSection	signature:(void) const
getEntries	CFG/CFG.h	/^  const std::list<DataSectionEntry> &getEntries(void) const;$/;"	p	class:DataSection	access:public	signature:(void) const
getEntryPoints	CFG/CFG.cpp	/^const std::vector<NativeEntrySymbol> &NativeModule::getEntryPoints(void) const {$/;"	f	class:NativeModule	signature:(void) const
getEntryPoints	CFG/CFG.h	/^  const std::vector<NativeEntrySymbol> &getEntryPoints(void) const;$/;"	p	class:NativeModule	access:public	signature:(void) const
getExtCalls	CFG/CFG.cpp	/^const std::list<ExternalCodeRefPtr> &NativeModule::getExtCalls(void) const {$/;"	f	class:NativeModule	signature:(void) const
getExtCalls	CFG/CFG.h	/^  const std::list<ExternalCodeRefPtr> &getExtCalls(void) const;$/;"	p	class:NativeModule	access:public	signature:(void) const
getExtDataRefs	CFG/CFG.cpp	/^const std::list<ExternalDataRefPtr> &NativeModule::getExtDataRefs(void) const {$/;"	f	class:NativeModule	signature:(void) const
getExtDataRefs	CFG/CFG.h	/^  const std::list<ExternalDataRefPtr> &getExtDataRefs(void) const;$/;"	p	class:NativeModule	access:public	signature:(void) const
getExternal	CFG/CFG.cpp	/^static ExternalCodeRefPtr getExternal($/;"	f	file:	signature:( const std::string &s, const std::list<ExternalCodeRefPtr> &extcode)
getFPVectorTypes	Arch/X86/Semantics/SSE.cpp	/^static std::tuple<llvm::VectorType *, llvm::Type *> getFPVectorTypes($/;"	f	file:	signature:( llvm::BasicBlock *b, int ewidth, int count)
getFpTypeForWidth	Arch/X86/Semantics/SSE.cpp	/^static llvm::Type *getFpTypeForWidth(const llvm::BasicBlock *block,$/;"	f	file:	signature:(const llvm::BasicBlock *block, int fpwidth)
getFunctionSignature	CFG/Externals.h	/^  const std::string &getFunctionSignature(void) {$/;"	f	class:ExternalCodeRef	access:public	signature:(void)
getGlobalFromOriginalAddr	Arch/X86/Util.h	/^static llvm::Value* getGlobalFromOriginalAddr(VA original_addr,$/;"	f	signature:(VA original_addr, NativeModulePtr mod, VA addr_start, llvm::BasicBlock *b)
getInitialEntry	cfgToLLVM/JumpTables.h	/^  virtual int getInitialEntry(void) const {$/;"	f	class:Table	access:public	signature:(void) const
getIntVectorTypes	Arch/X86/Semantics/SSE.cpp	/^static std::tuple<llvm::VectorType *, llvm::Type *> getIntVectorTypes($/;"	f	file:	signature:( llvm::BasicBlock *b, int ewidth, int count)
getJumpIndexTable	cfgToLLVM/JumpTables.h	/^  virtual const std::vector<uint8_t> &getJumpIndexTable(void) const {$/;"	f	class:JumpIndexTable	access:public	signature:(void) const
getJumpIndexTable	cfgToLLVM/JumpTables.h	/^  virtual std::vector<uint8_t> &getJumpIndexTable(void) {$/;"	f	class:JumpIndexTable	access:public	signature:(void)
getJumpTable	cfgToLLVM/JumpTables.h	/^  virtual const std::vector<VA> &getJumpTable(void) const {$/;"	f	class:MCSJumpTable	access:public	signature:(void) const
getJumpTable	cfgToLLVM/JumpTables.h	/^  virtual std::vector<VA> &getJumpTable(void) {$/;"	f	class:MCSJumpTable	access:public	signature:(void)
getLLVMCC	BC/Lift.cpp	/^llvm::CallingConv::ID getLLVMCC(ExternalCodeRef::CallingConvention cc) {$/;"	f	signature:(ExternalCodeRef::CallingConvention cc)
getLoadableValue	Arch/X86/Semantics/MOV.cpp	/^static llvm::Value* getLoadableValue(llvm::Value *ptr,$/;"	f	file:	signature:(llvm::Value *ptr, llvm::BasicBlock *block)
getName	CFG/CFG.cpp	/^const std::string &NativeEntrySymbol::getName(void) const {$/;"	f	class:NativeEntrySymbol	signature:(void) const
getName	CFG/CFG.h	/^  const std::string &getName(void) const;$/;"	p	class:NativeEntrySymbol	access:public	signature:(void) const
getNumArgs	CFG/Externals.h	/^  int8_t getNumArgs(void) {$/;"	f	class:ExternalCodeRef	access:public	signature:(void)
getOffsetFromData	cfgToLLVM/JumpTables.h	/^  virtual VA getOffsetFromData(void) const {$/;"	f	class:MCSJumpTable	access:public	signature:(void) const
getRegisterFromName	Arch/Register.h	108;"	d
getRegisterName	Arch/Register.h	107;"	d
getRegisterOffset	Arch/Register.h	109;"	d
getReturnType	CFG/Externals.h	/^  ReturnType getReturnType(void) {$/;"	f	class:ExternalCodeRef	access:public	signature:(void)
getSegmentValue	Arch/X86/Semantics/MOV.cpp	/^static llvm::Value* getSegmentValue(llvm::BasicBlock *&b, unsigned sreg) {$/;"	f	file:	signature:(llvm::BasicBlock *&b, unsigned sreg)
getShifyByValueFromCLRegister	Arch/X86/Semantics/ShiftRoll.cpp	/^static llvm::Value *getShifyByValueFromCLRegister(llvm::BasicBlock *&b) {$/;"	f	file:	signature:(llvm::BasicBlock *&b)
getSize	CFG/CFG.cpp	/^uint64_t DataSection::getSize(void) const {$/;"	f	class:DataSection	signature:(void) const
getSize	CFG/CFG.cpp	/^uint64_t DataSectionEntry::getSize(void) const {$/;"	f	class:DataSectionEntry	signature:(void) const
getSize	CFG/CFG.h	/^  uint64_t getSize(void) const;$/;"	p	class:DataSection	access:public	signature:(void) const
getSize	CFG/CFG.h	/^  uint64_t getSize(void) const;$/;"	p	class:DataSectionEntry	access:public	signature:(void) const
getStartAddr	cfgToLLVM/JumpTables.h	/^  virtual VA getStartAddr(void) const {$/;"	f	class:MCSOffsetTable	access:public	signature:(void) const
getSymbol	CFG/CFG.cpp	/^bool DataSectionEntry::getSymbol(std::string &sname) const {$/;"	f	class:DataSectionEntry	signature:(std::string &sname) const
getSymbol	CFG/CFG.h	/^  bool getSymbol(std::string &sname) const;$/;"	p	class:DataSectionEntry	access:public	signature:(std::string &sname) const
getSymbolName	CFG/Externals.h	/^  virtual const std::string &getSymbolName(void) {$/;"	f	class:ExternalRef	access:public	signature:(void)
getTable	cfgToLLVM/JumpTables.h	/^  virtual const std::vector<T> &getTable(void) const {$/;"	f	class:Table	access:public	signature:(void) const
getTable	cfgToLLVM/JumpTables.h	/^  virtual std::vector<T> &getTable(void) {$/;"	f	class:Table	access:protected	signature:(void)
getTlsIndex	Arch/X86/Runtime/print_PE_32_windows.cpp	/^void getTlsIndex(const char dest_reg[]) {$/;"	f	signature:(const char dest_reg[])
getTlsIndex	Arch/X86/Runtime/print_PE_64_windows.cpp	/^void getTlsIndex(const char dest_reg[]) {$/;"	f	signature:(const char dest_reg[])
getValueForExternal	Arch/X86/Util.h	/^static llvm::Value *getValueForExternal(llvm::Module *M, NativeInstPtr ip,$/;"	f	signature:(llvm::Module *M, NativeInstPtr ip, llvm::BasicBlock *block)
getVoidPtrType	Arch/X86/Util.h	/^static inline llvm::PointerType *getVoidPtrType(llvm::LLVMContext & C) {$/;"	f	signature:(llvm::LLVMContext & C)
get_addr_space	CFG/CFG.cpp	/^unsigned int NativeInst::get_addr_space(void) const {$/;"	f	class:NativeInst	signature:(void) const
get_addr_space	CFG/CFG.h	/^  unsigned int get_addr_space(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
get_base	CFG/CFG.cpp	/^VA NativeBlock::get_base(void) {$/;"	f	class:NativeBlock	signature:(void)
get_base	CFG/CFG.h	/^  VA get_base(void);$/;"	p	class:NativeBlock	access:public	signature:(void)
get_blocks	CFG/CFG.cpp	/^const std::map<VA, NativeBlockPtr> &NativeFunction::get_blocks(void) const {$/;"	f	class:NativeFunction	signature:(void) const
get_blocks	CFG/CFG.h	/^  const std::map<VA, NativeBlockPtr> &get_blocks(void) const;$/;"	p	class:NativeFunction	access:public	signature:(void) const
get_call_tgt	CFG/CFG.cpp	/^VA NativeInst::get_call_tgt(int index) const {$/;"	f	class:NativeInst	signature:(int index) const
get_call_tgt	CFG/CFG.h	/^  VA get_call_tgt(int index) const;$/;"	p	class:NativeInst	access:public	signature:(int index) const
get_ext_call_target	CFG/CFG.cpp	/^ExternalCodeRefPtr NativeInst::get_ext_call_target(void) const {$/;"	f	class:NativeInst	signature:(void) const
get_ext_call_target	CFG/CFG.h	/^  ExternalCodeRefPtr get_ext_call_target(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
get_ext_data_ref	CFG/CFG.cpp	/^ExternalDataRefPtr NativeInst::get_ext_data_ref(void) const {$/;"	f	class:NativeInst	signature:(void) const
get_ext_data_ref	CFG/CFG.h	/^  ExternalDataRefPtr get_ext_data_ref(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
get_fa	CFG/CFG.cpp	/^VA NativeInst::get_fa(void) const {$/;"	f	class:NativeInst	signature:(void) const
get_fa	CFG/CFG.h	/^  VA get_fa(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
get_follows	CFG/CFG.cpp	/^std::list<VA> &NativeBlock::get_follows(void) {$/;"	f	class:NativeBlock	signature:(void)
get_follows	CFG/CFG.h	/^  std::list<VA> &get_follows(void);$/;"	p	class:NativeBlock	access:public	signature:(void)
get_funcs	CFG/CFG.cpp	/^const std::unordered_map<VA, NativeFunctionPtr> &NativeModule::get_funcs($/;"	f	class:NativeModule	signature:( void) const
get_funcs	CFG/CFG.h	/^  const std::unordered_map<VA, NativeFunctionPtr> &get_funcs(void) const;$/;"	p	class:NativeModule	access:public	signature:(void) const
get_inst	CFG/CFG.cpp	/^llvm::MCInst &NativeInst::get_inst(void) {$/;"	f	class:NativeInst	signature:(void)
get_inst	CFG/CFG.h	/^  llvm::MCInst &get_inst(void);$/;"	p	class:NativeInst	access:public	signature:(void)
get_insts	CFG/CFG.cpp	/^const std::list<NativeInstPtr> &NativeBlock::get_insts(void) {$/;"	f	class:NativeBlock	signature:(void)
get_insts	CFG/CFG.h	/^  const std::list<NativeInstPtr> &get_insts(void);$/;"	p	class:NativeBlock	access:public	signature:(void)
get_is_call_external	CFG/CFG.cpp	/^bool NativeInst::get_is_call_external(void) const {$/;"	f	class:NativeInst	signature:(void) const
get_is_call_external	CFG/CFG.h	/^  bool get_is_call_external(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
get_jump_index_table	CFG/CFG.cpp	/^JumpIndexTablePtr NativeInst::get_jump_index_table(void) const {$/;"	f	class:NativeInst	signature:(void) const
get_jump_index_table	CFG/CFG.h	/^  JumpIndexTablePtr get_jump_index_table(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
get_jump_table	CFG/CFG.cpp	/^MCSJumpTablePtr NativeInst::get_jump_table(void) const {$/;"	f	class:NativeInst	signature:(void) const
get_jump_table	CFG/CFG.h	/^  MCSJumpTablePtr get_jump_table(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
get_len	CFG/CFG.cpp	/^uint8_t NativeInst::get_len(void) const {$/;"	f	class:NativeInst	signature:(void) const
get_len	CFG/CFG.h	/^  uint8_t get_len(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
get_loc	CFG/CFG.cpp	/^VA NativeInst::get_loc(void) const {$/;"	f	class:NativeInst	signature:(void) const
get_loc	CFG/CFG.h	/^  VA get_loc(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
get_name	CFG/CFG.cpp	/^std::string NativeBlock::get_name(void) {$/;"	f	class:NativeBlock	signature:(void)
get_name	CFG/CFG.cpp	/^std::string NativeFunction::get_name(void) {$/;"	f	class:NativeFunction	signature:(void)
get_name	CFG/CFG.h	/^  std::string get_name(void);$/;"	p	class:NativeBlock	access:public	signature:(void)
get_name	CFG/CFG.h	/^  std::string get_name(void);$/;"	p	class:NativeFunction	access:public	signature:(void)
get_opcode	CFG/CFG.cpp	/^unsigned int NativeInst::get_opcode(void) const {$/;"	f	class:NativeInst	signature:(void) const
get_opcode	CFG/CFG.h	/^  unsigned int get_opcode(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
get_prefix	CFG/CFG.cpp	/^NativeInst::Prefix NativeInst::get_prefix(void) const {$/;"	f	class:NativeInst	signature:(void) const
get_prefix	CFG/CFG.h	/^  Prefix get_prefix(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
get_ref_type	CFG/CFG.cpp	/^NativeInst::CFGRefType NativeInst::get_ref_type(CFGOpType op) const {$/;"	f	class:NativeInst	signature:(CFGOpType op) const
get_ref_type	CFG/CFG.h	/^  CFGRefType get_ref_type(CFGOpType op) const;$/;"	p	class:NativeInst	access:public	signature:(CFGOpType op) const
get_reference	CFG/CFG.cpp	/^uint64_t NativeInst::get_reference(CFGOpType op) const {$/;"	f	class:NativeInst	signature:(CFGOpType op) const
get_reference	CFG/CFG.h	/^  uint64_t get_reference(CFGOpType op) const;$/;"	p	class:NativeInst	access:public	signature:(CFGOpType op) const
get_reloc_offset	CFG/CFG.cpp	/^uint8_t NativeInst::get_reloc_offset(CFGOpType op) const {$/;"	f	class:NativeInst	signature:(CFGOpType op) const
get_reloc_offset	CFG/CFG.h	/^  uint8_t get_reloc_offset(CFGOpType op) const;$/;"	p	class:NativeInst	access:public	signature:(CFGOpType op) const
get_rip_relative	CFG/CFG.cpp	/^VA NativeInst::get_rip_relative(void) const {$/;"	f	class:NativeInst	signature:(void) const
get_rip_relative	CFG/CFG.h	/^  VA get_rip_relative(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
get_start	CFG/CFG.cpp	/^VA NativeFunction::get_start(void) {$/;"	f	class:NativeFunction	signature:(void)
get_start	CFG/CFG.h	/^  VA get_start(void);$/;"	p	class:NativeFunction	access:public	signature:(void)
get_symbol_name	CFG/CFG.cpp	/^const std::string &NativeFunction::get_symbol_name(void) {$/;"	f	class:NativeFunction	signature:(void)
get_symbol_name	CFG/CFG.h	/^  const std::string &get_symbol_name(void);$/;"	p	class:NativeFunction	access:public	signature:(void)
get_system_call_number	CFG/CFG.cpp	/^int NativeInst::get_system_call_number(void) const {$/;"	f	class:NativeInst	signature:(void) const
get_system_call_number	CFG/CFG.h	/^  int get_system_call_number(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
get_tr	CFG/CFG.cpp	/^VA NativeInst::get_tr(void) const {$/;"	f	class:NativeInst	signature:(void) const
get_tr	CFG/CFG.h	/^  VA get_tr(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
hasExtra	CFG/CFG.cpp	/^bool NativeEntrySymbol::hasExtra(void) const {$/;"	f	class:NativeEntrySymbol	signature:(void) const
hasExtra	CFG/CFG.h	/^  bool hasExtra(void) const;$/;"	p	class:NativeEntrySymbol	access:public	signature:(void) const
hasRIP	CFG/CFG.h	/^  bool hasRIP;$/;"	m	class:NativeInst	access:private
has_call_tgt	CFG/CFG.cpp	/^bool NativeInst::has_call_tgt(void) const {$/;"	f	class:NativeInst	signature:(void) const
has_call_tgt	CFG/CFG.h	/^  bool has_call_tgt(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
has_code_ref	CFG/CFG.cpp	/^bool NativeInst::has_code_ref(void) const {$/;"	f	class:NativeInst	signature:(void) const
has_code_ref	CFG/CFG.h	/^  bool has_code_ref(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
has_ext_call_target	CFG/CFG.cpp	/^bool NativeInst::has_ext_call_target(void) const {$/;"	f	class:NativeInst	signature:(void) const
has_ext_call_target	CFG/CFG.h	/^  bool has_ext_call_target(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
has_ext_data_ref	CFG/CFG.cpp	/^bool NativeInst::has_ext_data_ref(void) const {$/;"	f	class:NativeInst	signature:(void) const
has_ext_data_ref	CFG/CFG.h	/^  bool has_ext_data_ref(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
has_external_ref	CFG/CFG.cpp	/^bool NativeInst::has_external_ref(void) const {$/;"	f	class:NativeInst	signature:(void) const
has_external_ref	CFG/CFG.h	/^  bool has_external_ref(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
has_extra	CFG/CFG.h	/^  bool has_extra;$/;"	m	class:NativeEntrySymbol	access:private
has_imm_reference	CFG/CFG.h	/^  bool has_imm_reference;$/;"	m	class:NativeInst	access:public
has_jump_index_table	CFG/CFG.cpp	/^bool NativeInst::has_jump_index_table(void) const {$/;"	f	class:NativeInst	signature:(void) const
has_jump_index_table	CFG/CFG.h	/^  bool has_jump_index_table(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
has_jump_table	CFG/CFG.cpp	/^bool NativeInst::has_jump_table(void) const {$/;"	f	class:NativeInst	signature:(void) const
has_jump_table	CFG/CFG.h	/^  bool has_jump_table(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
has_local_noreturn	CFG/CFG.cpp	/^bool NativeInst::has_local_noreturn(void) const {$/;"	f	class:NativeInst	signature:(void) const
has_local_noreturn	CFG/CFG.h	/^  bool has_local_noreturn(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
has_mem_reference	CFG/CFG.h	/^  bool has_mem_reference;$/;"	m	class:NativeInst	access:public
has_reference	CFG/CFG.cpp	/^bool NativeInst::has_reference(CFGOpType op) const {$/;"	f	class:NativeInst	signature:(CFGOpType op) const
has_reference	CFG/CFG.h	/^  bool has_reference(CFGOpType op) const;$/;"	p	class:NativeInst	access:public	signature:(CFGOpType op) const
has_rip_relative	CFG/CFG.cpp	/^bool NativeInst::has_rip_relative(void) const {$/;"	f	class:NativeInst	signature:(void) const
has_rip_relative	CFG/CFG.h	/^  bool has_rip_relative(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
has_system_call_number	CFG/CFG.cpp	/^bool NativeInst::has_system_call_number(void) const {$/;"	f	class:NativeInst	signature:(void) const
has_system_call_number	CFG/CFG.h	/^  bool has_system_call_number(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
imm_ref_type	CFG/CFG.h	/^  CFGRefType imm_ref_type;$/;"	m	class:NativeInst	access:private
imm_reference	CFG/CFG.h	/^  uint64_t imm_reference;$/;"	m	class:NativeInst	access:private
imm_reloc_offset	CFG/CFG.h	/^  uint64_t imm_reloc_offset;$/;"	m	class:NativeInst	access:private
instructions	CFG/CFG.h	/^  std::list<NativeInstPtr> instructions;$/;"	m	class:NativeBlock	access:private
is64Bit	CFG/CFG.cpp	/^bool NativeModule::is64Bit(void) const {$/;"	f	class:NativeModule	signature:(void) const
is64Bit	CFG/CFG.h	/^  bool is64Bit(void) const;$/;"	p	class:NativeModule	access:public	signature:(void) const
isConformantJumpInst	cfgToLLVM/JumpTables.h	/^static bool isConformantJumpInst(NativeInst *jmpinst) {$/;"	f	signature:(NativeInst *jmpinst)
isReadOnly	CFG/CFG.cpp	/^bool DataSection::isReadOnly(void) const {$/;"	f	class:DataSection	signature:(void) const
isReadOnly	CFG/CFG.h	/^  bool isReadOnly(void) const;$/;"	p	class:DataSection	access:public	signature:(void) const
isWeak	CFG/Externals.h	/^  virtual bool isWeak(void) {$/;"	f	class:ExternalRef	access:public	signature:(void)
is_call_external	CFG/CFG.h	/^  bool is_call_external;$/;"	m	class:NativeInst	access:private
is_sub_reg	Arch/Mips/Register.cpp	/^  bool is_sub_reg;$/;"	m	struct:__anon3::RegInfo	file:	access:public
is_sub_reg	Arch/X86/Register.cpp	/^  bool is_sub_reg;$/;"	m	struct:__anon4::RegInfo	file:	access:public
is_symbol	CFG/CFG.h	/^  bool is_symbol;$/;"	m	class:DataSectionEntry	access:protected
is_terminator	CFG/CFG.h	/^  bool is_terminator;$/;"	m	class:NativeInst	access:private
jumpIndexTable	CFG/CFG.h	/^  JumpIndexTablePtr jumpIndexTable;$/;"	m	class:NativeInst	access:private
jumpTable	CFG/CFG.h	/^  MCSJumpTablePtr jumpTable;$/;"	m	class:NativeInst	access:private
jump_index_table	CFG/CFG.h	/^  bool jump_index_table;$/;"	m	class:NativeInst	access:private
jump_table	CFG/CFG.h	/^  bool jump_table;$/;"	m	class:NativeInst	access:private
kMaxNumInstrBytes	CFG/CFG.cpp	/^  kMaxNumInstrBytes = 16ULL  \/\/ 15 on x86 and amd64.$/;"	e	enum:size_t	file:
kRealEIPAnnotation	BC/Lift.cpp	/^static const char * const kRealEIPAnnotation = "mcsema_real_eip";$/;"	v	file:
kStackArgSize	Arch/X86/Runtime/print_ELF_32_linux.cpp	/^static const unsigned kStackArgSize = 256U;$/;"	v	file:
kStackArgSize	Arch/X86/Runtime/print_PE_32_windows.cpp	/^static const unsigned kStackArgSize = 256U;$/;"	v	file:
kStackArgSize	Arch/X86/Runtime/print_PE_64_windows.cpp	/^static const unsigned long long kStackArgSize = 264ULL;$/;"	v	file:
kStackSize	Arch/X86/Runtime/print_ELF_32_linux.cpp	/^static const unsigned kStackSize = 1UL << 20U;$/;"	v	file:
kStackSize	Arch/X86/Runtime/print_ELF_64_linux.cpp	/^static const unsigned long kStackSize = 1UL << 20UL;$/;"	v	file:
kStackSize	Arch/X86/Runtime/print_PE_32_windows.cpp	/^static const unsigned kStackSize = 1UL << 20U;$/;"	v	file:
kStackSize	Arch/X86/Runtime/print_PE_64_windows.cpp	/^static const unsigned long long kStackSize = 1ULL << 20ULL;$/;"	v	file:
len	CFG/CFG.h	/^  uint8_t len;$/;"	m	class:NativeInst	access:private
llvm	Arch/Arch.h	/^namespace llvm {$/;"	n
llvm	Arch/Dispatch.h	/^namespace llvm {$/;"	n
llvm	Arch/Register.h	/^namespace llvm {$/;"	n
llvm	Arch/X86/Semantics/ShiftRoll.h	/^namespace llvm {$/;"	n
llvm	Arch/X86/Semantics/bitops.h	/^namespace llvm {$/;"	n
llvm	Arch/X86/Util.h	/^namespace llvm {$/;"	n
llvm	BC/Util.h	/^namespace llvm {$/;"	n
llvm	CFG/CFG.h	/^namespace llvm {$/;"	n
llvm::ArchGetOrCreateRegStateTracer	Arch/Arch.cpp	/^llvm::Function *(*ArchGetOrCreateRegStateTracer)(llvm::Module *) = nullptr;$/;"	m	class:llvm	file:
llvm::ArchRegStateStructType	Arch/Arch.cpp	/^llvm::StructType *(*ArchRegStateStructType)(void) = nullptr;$/;"	m	class:llvm	file:
llvm::Mips	Arch/Arch.h	/^namespace Mips$/;"	n	namespace:llvm
llvm::X86	Arch/Arch.h	/^namespace X86 {$/;"	n	namespace:llvm
llvm::X86	Arch/Register.h	/^namespace X86 {$/;"	n	namespace:llvm
llvm::X86::gExtendedOpcodeNames	Arch/Arch.h	/^static std::map<unsigned, std::string> gExtendedOpcodeNames = {$/;"	m	namespace:llvm::X86
llvm::mips	Arch/Register.h	/^namespace mips$/;"	n	namespace:llvm
loc	CFG/CFG.h	/^  VA loc;$/;"	m	class:NativeInst	access:private
local_noreturn	CFG/CFG.h	/^  bool local_noreturn;$/;"	m	class:NativeInst	access:private
m_entry	cfgToLLVM/JumpTables.h	/^  int m_entry;$/;"	m	class:Table	access:protected
m_offset_from_data	cfgToLLVM/JumpTables.h	/^  VA m_offset_from_data;$/;"	m	class:MCSJumpTable	access:protected
m_start_addr	cfgToLLVM/JumpTables.h	/^  VA m_start_addr;$/;"	m	class:MCSOffsetTable	access:protected
m_table	cfgToLLVM/JumpTables.h	/^  std::vector<T> m_table;$/;"	m	class:Table	access:protected
main	Arch/X86/Runtime/print_ELF_32_linux.cpp	/^int main(void) {$/;"	f	signature:(void)
main	Arch/X86/Runtime/print_ELF_64_linux.cpp	/^int main(void) {$/;"	f	signature:(void)
main	Arch/X86/Runtime/print_PE_32_windows.cpp	/^int main(void) {$/;"	f	signature:(void)
main	Arch/X86/Runtime/print_PE_64_windows.cpp	/^int main(void) {$/;"	f	signature:(void)
main	Lift.cpp	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
makeCallbackForLocalFunction	BC/Util.h	/^llvm::Value *makeCallbackForLocalFunction(llvm::Module *M, VA local_target);$/;"	p	signature:(llvm::Module *M, VA local_target)
makeDSEBlob	CFG/CFG.cpp	/^static DataSectionEntry makeDSEBlob(const std::vector<uint8_t> &bytes,$/;"	f	file:	signature:(const std::vector<uint8_t> &bytes, uint64_t start, uint64_t end, uint64_t base_va)
mem_ref_type	CFG/CFG.h	/^  CFGRefType mem_ref_type;$/;"	m	class:NativeInst	access:private
mem_reference	CFG/CFG.h	/^  uint64_t mem_reference;$/;"	m	class:NativeInst	access:private
mem_reloc_offset	CFG/CFG.h	/^  uint64_t mem_reloc_offset;$/;"	m	class:NativeInst	access:private
message	cfgToLLVM/TransExcn.h	/^  std::string message;$/;"	m	class:TErr	access:private
mips	Arch/Register.h	/^namespace mips$/;"	n	namespace:llvm
mips	Arch/X86/Util.cpp	/^namespace mips {$/;"	n	file:
mips	Arch/X86/Util.h	/^namespace mips {$/;"	n
mips::getAddrFromExpr	Arch/X86/Util.cpp	/^llvm::Value *getAddrFromExpr(llvm::BasicBlock *b, NativeModulePtr mod,$/;"	f	namespace:mips	signature:(llvm::BasicBlock *b, NativeModulePtr mod, const llvm::MCOperand &Obase, const llvm::MCOperand &Oscale, const llvm::MCOperand &Oindex, const int64_t Odisp, const llvm::MCOperand &Oseg, bool dataOffset)
mips::getAddrFromExpr	Arch/X86/Util.h	/^llvm::Value *getAddrFromExpr(llvm::BasicBlock *b, NativeModulePtr mod,$/;"	p	namespace:mips	signature:(llvm::BasicBlock *b, NativeModulePtr mod, const llvm::MCOperand &Obase, const llvm::MCOperand &Oscale, const llvm::MCOperand &Oindex, const int64_t Odisp, const llvm::MCOperand &Oseg, bool dataOffset)
module_name	CFG/CFG.h	/^  const std::string module_name;$/;"	m	class:NativeModule	access:private
name	Arch/Mips/Register.cpp	/^  std::string name;$/;"	m	struct:__anon3::RegInfo	file:	access:public
name	Arch/X86/Register.cpp	/^  std::string name;$/;"	m	struct:__anon4::RegInfo	file:	access:public
name	CFG/CFG.cpp	/^const std::string &NativeModule::name(void) const {$/;"	f	class:NativeModule	signature:(void) const
name	CFG/CFG.h	/^  const std::string &name(void) const;$/;"	p	class:NativeModule	access:public	signature:(void) const
name	CFG/CFG.h	/^  std::string name;$/;"	m	class:NativeEntrySymbol	access:private
natB	Arch/Dispatch.h	/^  NativeBlock *natB;$/;"	m	struct:TranslationContext	access:public
natF	Arch/Dispatch.h	/^  NativeFunction *natF;$/;"	m	struct:TranslationContext	access:public
natI	Arch/Dispatch.h	/^  NativeInst *natI;$/;"	m	struct:TranslationContext	access:public
natM	Arch/Dispatch.h	/^  NativeModule *natM;$/;"	m	struct:TranslationContext	access:public
noAliasMCSemaScope	BC/Util.h	87;"	d
numArgs	CFG/Externals.h	/^  int numArgs;$/;"	m	class:ExternalCodeRef	access:protected
num_args	CFG/CFG.h	/^  int num_args;$/;"	m	class:NativeEntrySymbol	access:private
num_blocks	CFG/CFG.cpp	/^uint64_t NativeFunction::num_blocks(void) {$/;"	f	class:NativeFunction	signature:(void)
num_blocks	CFG/CFG.h	/^  uint64_t num_blocks(void);$/;"	p	class:NativeFunction	access:public	signature:(void)
offset_table	CFG/CFG.h	/^  VA offset_table;$/;"	m	class:NativeInst	access:public
offset_tables	CFG/CFG.h	/^  std::unordered_map<VA, MCSOffsetTablePtr> offset_tables;$/;"	m	class:NativeModule	access:public
opaque_type	BC/Lift.cpp	/^  llvm::StructType *opaque_type;$/;"	m	struct:DataSectionVar	file:	access:public
pad	Arch/X86/Runtime/State.h	/^typedef union { double d; char pad[16];} PACKED LDOUBLE;$/;"	m	union:__anon5	access:public
parent_offset	Arch/Mips/Register.cpp	/^  size_t parent_offset;$/;"	m	struct:__anon3::RegInfo	file:	access:public
parent_offset	Arch/X86/Register.cpp	/^  size_t parent_offset;$/;"	m	struct:__anon4::RegInfo	file:	access:public
parent_reg	Arch/Mips/Register.cpp	/^  MCSemaRegs parent_reg;$/;"	m	struct:__anon3::RegInfo	file:	access:public
parent_reg	Arch/X86/Register.cpp	/^  MCSemaRegs parent_reg;$/;"	m	struct:__anon4::RegInfo	file:	access:public
pfx	CFG/CFG.h	/^  Prefix pfx;$/;"	m	class:NativeInst	access:private
read_only	CFG/CFG.h	/^  bool read_only;$/;"	m	class:DataSection	access:protected
read_type	Arch/Mips/Register.cpp	/^  llvm::Type *read_type;$/;"	m	struct:__anon3::RegInfo	file:	access:public
read_type	Arch/X86/Register.cpp	/^  llvm::Type *read_type;$/;"	m	struct:__anon4::RegInfo	file:	access:public
reg	Arch/Mips/Register.cpp	/^  MCSemaRegs reg;$/;"	m	struct:__anon3::RegInfo	file:	access:public
reg	Arch/X86/Register.cpp	/^  MCSemaRegs reg;$/;"	m	struct:__anon4::RegInfo	file:	access:public
reg_t	Arch/X86/Runtime/State.h	/^typedef uint32_t reg_t;$/;"	t
reg_t	Arch/X86/Runtime/State.h	/^typedef uint64_t reg_t;$/;"	t
ret	CFG/Externals.h	/^  ReturnType ret;$/;"	m	class:ExternalCodeRef	access:protected
rip_target	CFG/CFG.h	/^  VA rip_target;$/;"	m	class:NativeInst	access:private
section	BC/Lift.cpp	/^  const DataSection *section;$/;"	m	struct:DataSectionVar	file:	access:public
setDataSize	CFG/Externals.h	/^  void setDataSize(size_t newsize) {$/;"	f	class:ExternalDataRef	access:public	signature:(size_t newsize)
setExtra	CFG/CFG.cpp	/^void NativeEntrySymbol::setExtra(int argc_, bool does_ret,$/;"	f	class:NativeEntrySymbol	signature:(int argc_, bool does_ret, ExternalCodeRef::CallingConvention conv)
setExtra	CFG/CFG.h	/^  void setExtra(int argc_, bool does_ret,$/;"	p	class:NativeEntrySymbol	access:public	signature:(int argc_, bool does_ret, ExternalCodeRef::CallingConvention conv)
setReadOnly	CFG/CFG.cpp	/^void DataSection::setReadOnly(bool isro) {$/;"	f	class:DataSection	signature:(bool isro)
setReadOnly	CFG/CFG.h	/^  void setReadOnly(bool isro);$/;"	p	class:DataSection	access:public	signature:(bool isro)
setReturnType	CFG/Externals.h	/^  void setReturnType(ReturnType r) {$/;"	f	class:ExternalCodeRef	access:public	signature:(ReturnType r)
setWeak	CFG/Externals.h	/^  virtual void setWeak(bool w) {$/;"	f	class:ExternalRef	access:public	signature:(bool w)
set_call_tgt	CFG/CFG.cpp	/^void NativeInst::set_call_tgt(VA addr) {$/;"	f	class:NativeInst	signature:(VA addr)
set_call_tgt	CFG/CFG.h	/^  void set_call_tgt(VA addr);$/;"	p	class:NativeInst	access:public	signature:(VA addr)
set_ext_call_target	CFG/CFG.cpp	/^void NativeInst::set_ext_call_target(ExternalCodeRefPtr t) {$/;"	f	class:NativeInst	signature:(ExternalCodeRefPtr t)
set_ext_call_target	CFG/CFG.h	/^  void set_ext_call_target(ExternalCodeRefPtr t);$/;"	p	class:NativeInst	access:public	signature:(ExternalCodeRefPtr t)
set_ext_data_ref	CFG/CFG.cpp	/^void NativeInst::set_ext_data_ref(ExternalDataRefPtr t) {$/;"	f	class:NativeInst	signature:(ExternalDataRefPtr t)
set_ext_data_ref	CFG/CFG.h	/^  void set_ext_data_ref(ExternalDataRefPtr t);$/;"	p	class:NativeInst	access:public	signature:(ExternalDataRefPtr t)
set_fa	CFG/CFG.cpp	/^void NativeInst::set_fa(VA a) {$/;"	f	class:NativeInst	signature:(VA a)
set_fa	CFG/CFG.h	/^  void set_fa(VA a);$/;"	p	class:NativeInst	access:public	signature:(VA a)
set_inst	CFG/CFG.cpp	/^void NativeInst::set_inst(const llvm::MCInst &i) {$/;"	f	class:NativeInst	signature:(const llvm::MCInst &i)
set_inst	CFG/CFG.h	/^  void set_inst(const llvm::MCInst &i);$/;"	p	class:NativeInst	access:public	signature:(const llvm::MCInst &i)
set_is_call_external	CFG/CFG.cpp	/^void NativeInst::set_is_call_external(void) {$/;"	f	class:NativeInst	signature:(void)
set_is_call_external	CFG/CFG.h	/^  void set_is_call_external(void);$/;"	p	class:NativeInst	access:public	signature:(void)
set_jump_index_table	CFG/CFG.cpp	/^void NativeInst::set_jump_index_table(JumpIndexTablePtr p) {$/;"	f	class:NativeInst	signature:(JumpIndexTablePtr p)
set_jump_index_table	CFG/CFG.h	/^  void set_jump_index_table(JumpIndexTablePtr p);$/;"	p	class:NativeInst	access:public	signature:(JumpIndexTablePtr p)
set_jump_table	CFG/CFG.cpp	/^void NativeInst::set_jump_table(MCSJumpTablePtr p) {$/;"	f	class:NativeInst	signature:(MCSJumpTablePtr p)
set_jump_table	CFG/CFG.h	/^  void set_jump_table(MCSJumpTablePtr p);$/;"	p	class:NativeInst	access:public	signature:(MCSJumpTablePtr p)
set_local_noreturn	CFG/CFG.cpp	/^void NativeInst::set_local_noreturn(void) {$/;"	f	class:NativeInst	signature:(void)
set_local_noreturn	CFG/CFG.h	/^  void set_local_noreturn(void);$/;"	p	class:NativeInst	access:public	signature:(void)
set_ref_reloc_type	CFG/CFG.cpp	/^void NativeInst::set_ref_reloc_type(CFGOpType op, uint64_t ref, uint64_t ro,$/;"	f	class:NativeInst	signature:(CFGOpType op, uint64_t ref, uint64_t ro, CFGRefType rt)
set_ref_reloc_type	CFG/CFG.h	/^  void set_ref_reloc_type(CFGOpType op, uint64_t ref, uint64_t ro,$/;"	p	class:NativeInst	access:public	signature:(CFGOpType op, uint64_t ref, uint64_t ro, CFGRefType rt)
set_ref_type	CFG/CFG.cpp	/^void NativeInst::set_ref_type(CFGOpType op, CFGRefType rt) {$/;"	f	class:NativeInst	signature:(CFGOpType op, CFGRefType rt)
set_ref_type	CFG/CFG.h	/^  void set_ref_type(CFGOpType op, CFGRefType rt);$/;"	p	class:NativeInst	access:public	signature:(CFGOpType op, CFGRefType rt)
set_reference	CFG/CFG.cpp	/^void NativeInst::set_reference(CFGOpType op, uint64_t ref) {$/;"	f	class:NativeInst	signature:(CFGOpType op, uint64_t ref)
set_reference	CFG/CFG.h	/^  void set_reference(CFGOpType op, uint64_t ref);$/;"	p	class:NativeInst	access:public	signature:(CFGOpType op, uint64_t ref)
set_reloc_offset	CFG/CFG.cpp	/^void NativeInst::set_reloc_offset(CFGOpType op, uint8_t ro) {$/;"	f	class:NativeInst	signature:(CFGOpType op, uint8_t ro)
set_reloc_offset	CFG/CFG.h	/^  void set_reloc_offset(CFGOpType op, uint8_t ro);$/;"	p	class:NativeInst	access:public	signature:(CFGOpType op, uint8_t ro)
set_rip_relative	CFG/CFG.cpp	/^void NativeInst::set_rip_relative(unsigned i) {$/;"	f	class:NativeInst	signature:(unsigned i)
set_rip_relative	CFG/CFG.h	/^  void set_rip_relative(unsigned i);$/;"	p	class:NativeInst	access:public	signature:(unsigned i)
set_system_call_number	CFG/CFG.cpp	/^void NativeInst::set_system_call_number(int cn) {$/;"	f	class:NativeInst	signature:(int cn)
set_system_call_number	CFG/CFG.h	/^  void set_system_call_number(int cn);$/;"	p	class:NativeInst	access:public	signature:(int cn)
set_terminator	CFG/CFG.cpp	/^void NativeInst::set_terminator(void) {$/;"	f	class:NativeInst	signature:(void)
set_terminator	CFG/CFG.h	/^  void set_terminator(void);$/;"	p	class:NativeInst	access:public	signature:(void)
set_tr	CFG/CFG.cpp	/^void NativeInst::set_tr(VA a) {$/;"	f	class:NativeInst	signature:(VA a)
set_tr	CFG/CFG.h	/^  void set_tr(VA a);$/;"	p	class:NativeInst	access:public	signature:(VA a)
shouldSubtractImageBase	Arch/Arch.cpp	/^bool shouldSubtractImageBase(llvm::Module *M) {$/;"	f	signature:(llvm::Module *M)
shouldSubtractImageBase	Arch/Arch.h	/^bool shouldSubtractImageBase(llvm::Module *M);$/;"	p	signature:(llvm::Module *M)
size_t	CFG/CFG.cpp	/^enum : size_t {$/;"	g	file:
state_offset	Arch/Mips/Register.cpp	/^  size_t state_offset;$/;"	m	struct:__anon3::RegInfo	file:	access:public
state_offset	Arch/X86/Register.cpp	/^  size_t state_offset;$/;"	m	struct:__anon4::RegInfo	file:	access:public
std::ArchRegisterName	Arch/Arch.cpp	/^const std::string &(*ArchRegisterName)(MCSemaRegs) = nullptr;$/;"	m	class:std	file:
sym_name	CFG/CFG.h	/^  std::string sym_name;$/;"	m	class:DataSectionEntry	access:protected
symbolName	CFG/Externals.h	/^  std::string symbolName;$/;"	m	class:ExternalRef	access:protected
system_call_number	CFG/CFG.h	/^  int system_call_number;$/;"	m	class:NativeInst	access:private
tableToDataSection	cfgToLLVM/JumpTables.cpp	/^static DataSection *tableToDataSection(VA new_base, const JumpIndexTable &jit) {$/;"	f	file:	signature:(VA new_base, const JumpIndexTable &jit)
tableToDataSection	cfgToLLVM/JumpTables.cpp	/^static DataSection *tableToDataSection(VA new_base, const MCSJumpTable &jt) {$/;"	f	file:	signature:(VA new_base, const MCSJumpTable &jt)
targets	CFG/CFG.h	/^  std::vector<VA> targets;$/;"	m	class:NativeInst	access:private
terminator	CFG/CFG.cpp	/^bool NativeInst::terminator(void) const {$/;"	f	class:NativeInst	signature:(void) const
terminator	CFG/CFG.h	/^  bool terminator(void) const;$/;"	p	class:NativeInst	access:public	signature:(void) const
tgtIfFalse	CFG/CFG.h	/^  VA tgtIfFalse;$/;"	m	class:NativeInst	access:private
tgtIfTrue	CFG/CFG.h	/^  VA tgtIfTrue;$/;"	m	class:NativeInst	access:private
translate_ADDiu	Arch/Mips/Semantics/ADDiu.cpp	/^static InstTransResult translate_ADDiu(TranslationContext &ctx, $/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_ADDu	Arch/Mips/Semantics/ADDu.cpp	/^static InstTransResult translate_ADDu(TranslationContext &ctx, $/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_B	Arch/Mips/Semantics/B.cpp	/^static InstTransResult translate_B(TranslationContext &ctx, $/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_BEQ	Arch/Mips/Semantics/BEQ.cpp	/^static InstTransResult translate_BEQ(TranslationContext &ctx, $/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_BNE	Arch/Mips/Semantics/BNE.cpp	/^static InstTransResult translate_BNE(TranslationContext &ctx, $/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_CALLm	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult translate_CALLm(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_CALLpcrel32	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult translate_CALLpcrel32(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_CALLr	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult translate_CALLr(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_CDQE	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult translate_CDQE(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_CPUID32	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult translate_CPUID32(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_CVTSD2SSrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult translate_CVTSD2SSrm(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_CVTSD2SSrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult translate_CVTSD2SSrr(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_CVTSI2SDrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult translate_CVTSI2SDrm(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_CVTSI2SDrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult translate_CVTSI2SDrr(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_CVTSI2SS64rm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult translate_CVTSI2SS64rm(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_CVTSI2SS64rr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult translate_CVTSI2SS64rr(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_CVTSI2SSrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult translate_CVTSI2SSrm(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_CVTSI2SSrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult translate_CVTSI2SSrr(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_CVTSS2SDrm	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult translate_CVTSS2SDrm(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_CVTSS2SDrr	Arch/X86/Semantics/SSE.cpp	/^static InstTransResult translate_CVTSS2SDrr(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_JAL	Arch/Mips/Semantics/JAL.cpp	/^static InstTransResult translate_JAL(TranslationContext &ctx, $/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_JALR	Arch/Mips/Semantics/JALR.cpp	/^static InstTransResult translate_JALR(TranslationContext &ctx, $/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_JMPm	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult translate_JMPm(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *& block)
translate_JMPr	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult translate_JMPr(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_JR	Arch/Mips/Semantics/JR.cpp	/^static InstTransResult translate_JR(TranslationContext &ctx, $/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_Jcc	Arch/X86/Semantics/Jcc.cpp	/^static InstTransResult translate_Jcc(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_LEA32r	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult translate_LEA32r(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_LEA64_32r	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult translate_LEA64_32r(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_LEA64r	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult translate_LEA64r(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_LUi	Arch/Mips/Semantics/LUi.cpp	/^static InstTransResult translate_LUi(TranslationContext &ctx, $/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_LW	Arch/Mips/Semantics/LW.cpp	/^static InstTransResult translate_LW(TranslationContext &ctx, $/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_MOV32mi	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult translate_MOV32mi(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_MOV32mr	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult translate_MOV32mr(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_MOV32ri	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult translate_MOV32ri(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_MOV32rm	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult translate_MOV32rm(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_MOV64mi32	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult translate_MOV64mi32(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_MOV64mr	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult translate_MOV64mr(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_MOV64ri	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult translate_MOV64ri(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_MOV64rm	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult translate_MOV64rm(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_MOV_NaoM	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult translate_MOV_NaoM($/;"	f	file:	signature:( TranslationContext &ctx, llvm::BasicBlock *&block)
translate_MOV_NoaM	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult translate_MOV_NoaM($/;"	f	file:	signature:( TranslationContext &ctx, llvm::BasicBlock *&block)
translate_MOVao	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult translate_MOVao(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_MOVoa	Arch/X86/Semantics/MOV.cpp	/^static InstTransResult translate_MOVoa(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_OR	Arch/Mips/Semantics/OR.cpp	/^static InstTransResult translate_OR(TranslationContext &ctx, $/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_PUSH32rmm	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult translate_PUSH32rmm(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_PUSH64rmm	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult translate_PUSH64rmm(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_PUSHi32	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult translate_PUSHi32(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_REP_prefix	Arch/X86/Semantics/String.cpp	/^static InstTransResult translate_REP_prefix($/;"	f	file:	signature:( TranslationContext &ctx, llvm::BasicBlock *&)
translate_SAHF	Arch/X86/Semantics/Misc.cpp	/^static InstTransResult translate_SAHF(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_SB	Arch/Mips/Semantics/SB.cpp	/^static InstTransResult translate_SB(TranslationContext &ctx, $/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_SUB64ri8	Arch/X86/Semantics/SUB.cpp	/^static InstTransResult translate_SUB64ri8(TranslationContext &ctx,$/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_SW	Arch/Mips/Semantics/SW.cpp	/^static InstTransResult translate_SW(TranslationContext &ctx, $/;"	f	file:	signature:(TranslationContext &ctx, llvm::BasicBlock *&block)
translate_WAIT	Arch/X86/Semantics/fpu.cpp	/^static InstTransResult translate_WAIT(TranslationContext &, llvm::BasicBlock *&) {$/;"	f	file:	signature:(TranslationContext &, llvm::BasicBlock *&)
triple	CFG/CFG.h	/^  const llvm::Triple triple;$/;"	m	class:NativeModule	access:private
trunc	Arch/X86/Semantics/MULDIV.cpp	/^  llvm::Value *trunc;$/;"	m	struct:IMulRes	file:	access:public
uint128_t	Arch/X86/Runtime/State.h	/^typedef unsigned uint128_t __attribute__((mode(TI), aligned(16)));$/;"	t
uint128_t	Arch/X86/Runtime/State.h	/^} PACKED uint128_t;$/;"	v
va_to_bb	Arch/Dispatch.h	/^  std::map<VA, llvm::BasicBlock *> va_to_bb;$/;"	m	struct:TranslationContext	access:public
var	BC/Lift.cpp	/^  llvm::GlobalVariable *var;$/;"	m	struct:DataSectionVar	file:	access:public
weak	CFG/Externals.h	/^  bool weak;$/;"	m	class:ExternalRef	access:protected
what	cfgToLLVM/TransExcn.cpp	/^const char *TErr::what() const throw() {$/;"	f	class:TErr	signature:() const
what	cfgToLLVM/TransExcn.h	/^  virtual const char *what() const throw();$/;"	p	class:TErr	access:public	signature:() const
writeDetachReturnAddr	Arch/X86/Semantics/Branches.cpp	/^static void writeDetachReturnAddr(llvm::BasicBlock *B) {$/;"	f	file:	signature:(llvm::BasicBlock *B)
writeReturnAddr	Arch/X86/Semantics/Branches.cpp	/^static void writeReturnAddr(llvm::BasicBlock *B, VA ret_addr) {$/;"	f	file:	signature:(llvm::BasicBlock *B, VA ret_addr)
write_type	Arch/Mips/Register.cpp	/^  llvm::Type *write_type;$/;"	m	struct:__anon3::RegInfo	file:	access:public
write_type	Arch/X86/Register.cpp	/^  llvm::Type *write_type;$/;"	m	struct:__anon4::RegInfo	file:	access:public
x86	Arch/X86/Semantics/Branches.cpp	/^namespace x86 {$/;"	n	file:
x86	Arch/X86/Semantics/Stack.cpp	/^namespace x86 {$/;"	n	file:
x86	Arch/X86/Util.cpp	/^namespace x86 {$/;"	n	file:
x86	Arch/X86/Util.h	/^namespace x86 {$/;"	n
x86	BC/Util.h	/^namespace x86 {$/;"	n
x86::R_READ	BC/Util.h	/^inline static llvm::Value *R_READ(llvm::BasicBlock *b, MCSemaRegs reg) {$/;"	f	namespace:x86	signature:(llvm::BasicBlock *b, MCSemaRegs reg)
x86::R_WRITE	BC/Util.h	/^inline static void R_WRITE(llvm::BasicBlock *b, MCSemaRegs reg,$/;"	f	namespace:x86	signature:(llvm::BasicBlock *b, MCSemaRegs reg, llvm::Value *write)
x86::doCallPCExtern	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult doCallPCExtern(llvm::BasicBlock *&b, std::string target,$/;"	f	namespace:x86	signature:(llvm::BasicBlock *&b, std::string target, bool is_jump)
x86::doEnter	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult doEnter(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	namespace:x86	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &frameSize, const llvm::MCOperand &nestingLevel)
x86::getAddrFromExpr	Arch/X86/Util.cpp	/^llvm::Value *getAddrFromExpr(llvm::BasicBlock *b, NativeModulePtr mod,$/;"	f	namespace:x86	signature:(llvm::BasicBlock *b, NativeModulePtr mod, const llvm::MCOperand &Obase, const llvm::MCOperand &Oscale, const llvm::MCOperand &Oindex, const int64_t Odisp, const llvm::MCOperand &Oseg, bool dataOffset)
x86::getAddrFromExpr	Arch/X86/Util.h	/^llvm::Value *getAddrFromExpr(llvm::BasicBlock *b, NativeModulePtr mod,$/;"	p	namespace:x86	signature:(llvm::BasicBlock *b, NativeModulePtr mod, const llvm::MCOperand &Obase, const llvm::MCOperand &Oscale, const llvm::MCOperand &Oindex, const int64_t Odisp, const llvm::MCOperand &Oseg, bool dataOffset)
x86_64	Arch/X86/Semantics/Branches.cpp	/^namespace x86_64 {$/;"	n	file:
x86_64	Arch/X86/Semantics/Stack.cpp	/^namespace x86_64 {$/;"	n	file:
x86_64	Arch/X86/Util.cpp	/^namespace x86_64 {$/;"	n	file:
x86_64	Arch/X86/Util.h	/^namespace x86_64 {$/;"	n
x86_64	BC/Util.h	/^namespace x86_64 {$/;"	n
x86_64::R_READ	BC/Util.h	/^inline static llvm::Value *R_READ(llvm::BasicBlock *b, MCSemaRegs reg) {$/;"	f	namespace:x86_64	signature:(llvm::BasicBlock *b, MCSemaRegs reg)
x86_64::R_WRITE	BC/Util.h	/^inline static void R_WRITE(llvm::BasicBlock *b, MCSemaRegs reg,$/;"	f	namespace:x86_64	signature:(llvm::BasicBlock *b, MCSemaRegs reg, llvm::Value *write)
x86_64::doCallPCExtern	Arch/X86/Semantics/Branches.cpp	/^static InstTransResult doCallPCExtern(llvm::BasicBlock *&b, std::string target,$/;"	f	namespace:x86_64	signature:(llvm::BasicBlock *&b, std::string target, bool is_jump)
x86_64::doEnter	Arch/X86/Semantics/Stack.cpp	/^static InstTransResult doEnter(NativeInstPtr ip, llvm::BasicBlock *&b,$/;"	f	namespace:x86_64	signature:(NativeInstPtr ip, llvm::BasicBlock *&b, const llvm::MCOperand &frameSize, const llvm::MCOperand &nestingLevel)
x86_64::getAddrFromExpr	Arch/X86/Util.cpp	/^llvm::Value *getAddrFromExpr(llvm::BasicBlock *b, NativeModulePtr mod,$/;"	f	namespace:x86_64	signature:(llvm::BasicBlock *b, NativeModulePtr mod, const llvm::MCOperand &Obase, const llvm::MCOperand &Oscale, const llvm::MCOperand &Oindex, const int64_t Odisp, const llvm::MCOperand &Oseg, bool dataOffset)
x86_64::getAddrFromExpr	Arch/X86/Util.h	/^llvm::Value *getAddrFromExpr(llvm::BasicBlock *b, NativeModulePtr mod,$/;"	p	namespace:x86_64	signature:(llvm::BasicBlock *b, NativeModulePtr mod, const llvm::MCOperand &Obase, const llvm::MCOperand &Oscale, const llvm::MCOperand &Oindex, const int64_t Odisp, const llvm::MCOperand &Oseg, bool dataOffset)
~DataSection	CFG/CFG.cpp	/^DataSection::~DataSection(void) {}$/;"	f	class:DataSection	signature:(void)
~DataSection	CFG/CFG.h	/^  virtual ~DataSection(void);$/;"	p	class:DataSection	access:public	signature:(void)
~DataSectionEntry	CFG/CFG.cpp	/^DataSectionEntry::~DataSectionEntry(void) {}$/;"	f	class:DataSectionEntry	signature:(void)
~DataSectionEntry	CFG/CFG.h	/^  virtual ~DataSectionEntry(void);$/;"	p	class:DataSectionEntry	access:public	signature:(void)
~ExternalRef	CFG/Externals.h	/^  virtual ~ExternalRef() {}$/;"	f	class:ExternalRef	access:public	signature:()
~JumpIndexTable	cfgToLLVM/JumpTables.h	/^  virtual ~JumpIndexTable() {}$/;"	f	class:JumpIndexTable	access:public	signature:()
~MCSJumpTable	cfgToLLVM/JumpTables.h	/^  virtual ~MCSJumpTable(void) {}$/;"	f	class:MCSJumpTable	access:public	signature:(void)
~MCSOffsetTable	cfgToLLVM/JumpTables.h	/^  virtual ~MCSOffsetTable(void) {}$/;"	f	class:MCSOffsetTable	access:public	signature:(void)
~TErr	cfgToLLVM/TransExcn.h	/^  virtual ~TErr(void) throw() { }$/;"	f	class:TErr	access:public	signature:(void)
~Table	cfgToLLVM/JumpTables.h	/^  virtual ~Table(void) {}$/;"	f	class:Table	access:public	signature:(void)
